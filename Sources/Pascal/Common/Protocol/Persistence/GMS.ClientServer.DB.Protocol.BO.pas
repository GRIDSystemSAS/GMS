{*---------------------------------------------------*}
// UpScript Translator (ObjectPascal for StoredObject) AutoGenerated file.
// Generation Option ExternalRefKey  : False
// Generation Option PrimaryKey Type : UInt32
// Generation Date : 2017/05/23 20.34.39
{*---------------------------------------------------*}

Unit GMS.ClientServer.DB.Protocol.BO;
{*---------------------------------------------------*}
{$IFDEF FPC}
{$mode delphi}
{$ENDIF}


INTERFACE

//Include statement
Uses
  GS.StoredObject.Buffer, GS.StoredObject.BaseTypes, GS.StoredObject.Stream,
  {$IFNDEF FPC}
  System.Generics.collections,
  GS.StoredObject.Core,
  {$ELSE}
  Generics.collections,
  GS.StoredObject.Types_UINT32,
  GS.StoredObject.Core_NonGenerics,
  {$ENDIF }
  classes, sysutils;

{*---------------------------------------------------*}
Type

TGRIDClientServerDBProtocolBOManager = Class;
TGRIDdboCustomRequest = Class;
TGRIDdboCustomResponse = Class;
TGRIDdboRequestForAccess = Class;
TGRIDdboResponseForAccess = Class;
TGRIDdboRequestObjectData = Class;
TGRIDdboRequestSaveObjectData = Class;
TGRIDdboRequestRetrieveObjectData = Class;
TGRIDdboResponseForObjectData = Class;
TGRIDdboResponseGenericError = Class;

//---- Class TGRIDdboCustomRequest (1 Field(s) and 0 method(s))
TGRIDdboCustomRequest = Class
Protected
  {$REGION 'StoredObject Technical stuffs for TGRIDdboCustomRequest'}
  StoredProtoAppClasses : TofStoredObject_UInt32Key; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : UInt32;
  FClientSessionID : TData_Def; //String

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : UInt32);
  Function GetObjKeyRef : UInt32;

  Procedure SetClientSessionID(Value : String);
  Function GetClientSessionID : String;
Public
  Constructor Create(Const aManager : TGRIDClientServerDBProtocolBOManager); Virtual;
Published
  Property ClientSessionID : String read GetClientSessionID Write SetClientSessionID;
End;

//---- Class TGRIDdboCustomResponse (0 Field(s) and 0 method(s))
TGRIDdboCustomResponse = Class
  {$REGION 'StoredObject Technical stuffs for TGRIDdboCustomResponse'}
  StoredProtoAppClasses : TofStoredObject_UInt32Key; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : UInt32;

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : UInt32);
  Function GetObjKeyRef : UInt32;

Public
  Constructor Create(Const aManager : TGRIDClientServerDBProtocolBOManager); Virtual;
End;

//---- Class TGRIDdboRequestForAccess (3 Field(s) and 0 method(s))
TGRIDdboRequestForAccess = Class(TGRIDdboCustomRequest)
Protected
  {$REGION 'StoredObject Technical stuffs for TGRIDdboRequestForAccess'}
  FDatabaseName : TData_Def; //String
  FSpecificUserName : TData_Def; //String
  FSpecificPassword : TData_Def; //String

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
  Procedure SetDatabaseName(Value : String);
  Function GetDatabaseName : String;
  Procedure SetSpecificUserName(Value : String);
  Function GetSpecificUserName : String;
  Procedure SetSpecificPassword(Value : String);
  Function GetSpecificPassword : String;
Public
  Constructor Create(Const aManager : TGRIDClientServerDBProtocolBOManager); Virtual;
Published
  Property DatabaseName : String read GetDatabaseName Write SetDatabaseName;
  Property SpecificUserName : String read GetSpecificUserName Write SetSpecificUserName;
  Property SpecificPassword : String read GetSpecificPassword Write SetSpecificPassword;
End;

//---- Class TGRIDdboResponseForAccess (4 Field(s) and 0 method(s))
TGRIDdboResponseForAccess = Class(TGRIDdboCustomResponse)
Protected
  {$REGION 'StoredObject Technical stuffs for TGRIDdboResponseForAccess'}
  FAccessGranted : TData_Def; //bool
  FAccessDeniedErrorDesc : TData_Def; //string
  FTokenID : TData_Def; //String
  FAskChannel : TData_Def; //String

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
  Procedure SetAccessGranted(Value : Boolean);
  Function GetAccessGranted : Boolean;
  Procedure SetAccessDeniedErrorDesc(Value : String);
  Function GetAccessDeniedErrorDesc : String;
  Procedure SetTokenID(Value : String);
  Function GetTokenID : String;
  Procedure SetAskChannel(Value : String);
  Function GetAskChannel : String;
Public
  Constructor Create(Const aManager : TGRIDClientServerDBProtocolBOManager); Virtual;
Published
  Property AccessGranted : Boolean read GetAccessGranted Write SetAccessGranted;
  Property AccessDeniedErrorDesc : String read GetAccessDeniedErrorDesc Write SetAccessDeniedErrorDesc;
  Property TokenID : String read GetTokenID Write SetTokenID;
  Property AskChannel : String read GetAskChannel Write SetAskChannel;
End;

//---- Class TGRIDdboRequestObjectData (2 Field(s) and 0 method(s))
TGRIDdboRequestObjectData = Class(TGRIDdboCustomRequest)
Protected
  {$REGION 'StoredObject Technical stuffs for TGRIDdboRequestObjectData'}
  FTokenID : TData_Def; //String
  FOperationContent : TData_Def; //Stream

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
  Procedure SetTokenID(Value : String);
  Function GetTokenID : String;
  Procedure SetOperationContent(Value : TStream);
  Function GetOperationContent : TStream;
Public
  Constructor Create(Const aManager : TGRIDClientServerDBProtocolBOManager); Virtual;
Published
  Property TokenID : String read GetTokenID Write SetTokenID;
  Property OperationContent : TStream read GetOperationContent Write SetOperationContent;
End;

//---- Class TGRIDdboRequestSaveObjectData (0 Field(s) and 0 method(s))
TGRIDdboRequestSaveObjectData = Class(TGRIDdboRequestObjectData)
  {$REGION 'StoredObject Technical stuffs for TGRIDdboRequestSaveObjectData'}

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
Public
  Constructor Create(Const aManager : TGRIDClientServerDBProtocolBOManager); Virtual;
End;

//---- Class TGRIDdboRequestRetrieveObjectData (0 Field(s) and 0 method(s))
TGRIDdboRequestRetrieveObjectData = Class(TGRIDdboRequestObjectData)
  {$REGION 'StoredObject Technical stuffs for TGRIDdboRequestRetrieveObjectData'}

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
Public
  Constructor Create(Const aManager : TGRIDClientServerDBProtocolBOManager); Virtual;
End;

//---- Class TGRIDdboResponseForObjectData (4 Field(s) and 0 method(s))
TGRIDdboResponseForObjectData = Class(TGRIDdboCustomResponse)
Protected
  {$REGION 'StoredObject Technical stuffs for TGRIDdboResponseForObjectData'}
  FTokenID : TData_Def; //String
  FOperationSuccess : TData_Def; //bool
  FOperationFailErrorDesc : TData_Def; //String
  FOperationResultContent : TData_Def; //Stream

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
  Procedure SetTokenID(Value : String);
  Function GetTokenID : String;
  Procedure SetOperationSuccess(Value : Boolean);
  Function GetOperationSuccess : Boolean;
  Procedure SetOperationFailErrorDesc(Value : String);
  Function GetOperationFailErrorDesc : String;
  Procedure SetOperationResultContent(Value : TStream);
  Function GetOperationResultContent : TStream;
Public
  Constructor Create(Const aManager : TGRIDClientServerDBProtocolBOManager); Virtual;
Published
  Property TokenID : String read GetTokenID Write SetTokenID;
  Property OperationSuccess : Boolean read GetOperationSuccess Write SetOperationSuccess;
  Property OperationFailErrorDesc : String read GetOperationFailErrorDesc Write SetOperationFailErrorDesc;
  Property OperationResultContent : TStream read GetOperationResultContent Write SetOperationResultContent;
End;

//---- Class TGRIDdboResponseGenericError (3 Field(s) and 0 method(s))
TGRIDdboResponseGenericError = Class(TGRIDdboCustomResponse)
Protected
  {$REGION 'StoredObject Technical stuffs for TGRIDdboResponseGenericError'}
  FTokenID : TData_Def; //String
  FErrorCode : TData_Def; //integer
  FErrorString : TData_Def; //String

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
  Procedure SetTokenID(Value : String);
  Function GetTokenID : String;
  Procedure SetErrorCode(Value : Integer);
  Function GetErrorCode : Integer;
  Procedure SetErrorString(Value : String);
  Function GetErrorString : String;
Public
  Constructor Create(Const aManager : TGRIDClientServerDBProtocolBOManager); Virtual;
Published
  Property TokenID : String read GetTokenID Write SetTokenID;
  Property ErrorCode : Integer read GetErrorCode Write SetErrorCode;
  Property ErrorString : String read GetErrorString Write SetErrorString;
End;



//------------------------------------------------------------
TGRIDClientServerDBProtocolBOManager = class(TofStoredObjectClassManager_UInt32)
Protected
  Procedure InternalLoadCommon; Override;
Public
  Constructor Create; Override;
  Function BuildObject(aObjectClass : String; Const Guid : UInt32) : TObject; Override;
    Procedure PopulateObject( anObject : TObject; PropertyName, StringValue : String); Override;
    Procedure PopulateObjectStream( anObject : TObject; PropertyName : String; Value : TStream); Override;
    Procedure PopulateObjectWithString( anObject : TObject; PropertyName : String; Value : String); Override;
    Procedure PopulateObjectWithDouble( anObject : TObject; PropertyName : String; Value : Double); Override;
    Procedure PopulateObjectWithInteger( anObject : TObject; PropertyName : String; Value : Integer); Override;
    Procedure PopulateObjectWithDateTime( anObject : TObject; PropertyName : String; Value : TDateTime); Override;
    Procedure PopulateObjectWithUInt32( anObject : TObject; PropertyName : String; Value : UInt32); Override;
    Procedure PopulateObjectWithInt64( anObject : TObject; PropertyName : String; Value : UInt64); Override;
    Procedure PopulateObjectWithByte( anObject : TObject; PropertyName : String; Value : Byte); Override;
    Procedure PopulateObjectWithBoolean( anObject : TObject; PropertyName : String; Value : Boolean); Override;
  Procedure RegisterClass; Override;

end;


IMPLEMENTATION


//---- Class TGRIDdboCustomRequest

  Constructor TGRIDdboCustomRequest.Create(Const aManager : TGRIDClientServerDBProtocolBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FClientSessionID.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDdboCustomRequest.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDdboCustomRequest,'TGRIDdboCustomRequest Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDdboCustomRequest.SetObjKeyRef(Value : UInt32);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetUInt32(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TGRIDdboCustomRequest.GetObjKeyRef : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetUInt32(Self, FObjKeyRef.FATI,Result);
  End;

  Procedure TGRIDdboCustomRequest.SetClientSessionID(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'ClientSessionID',FClientSessionID.FATI,FClientSessionID.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboCustomRequest.SetClientSessionID(Value : String) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDdboCustomRequest.GetClientSessionID : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FClientSessionID.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboCustomRequest.GetClientSessionID : String --> '+E.Message)
      end;
    end;
  End;


//---- Class TGRIDdboCustomResponse

  Constructor TGRIDdboCustomResponse.Create(Const aManager : TGRIDClientServerDBProtocolBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDdboCustomResponse.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDdboCustomResponse,'TGRIDdboCustomResponse Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDdboCustomResponse.SetObjKeyRef(Value : UInt32);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetUInt32(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TGRIDdboCustomResponse.GetObjKeyRef : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetUInt32(Self, FObjKeyRef.FATI,Result);
  End;


//---- Class TGRIDdboRequestForAccess

  Constructor TGRIDdboRequestForAccess.Create(Const aManager : TGRIDClientServerDBProtocolBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FDatabaseName.FATI := -1;
    FSpecificUserName.FATI := -1;
    FSpecificPassword.FATI := -1;
    FClientSessionID.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDdboRequestForAccess.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDdboRequestForAccess,'TGRIDdboRequestForAccess Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDdboRequestForAccess.SetDatabaseName(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'DatabaseName',FDatabaseName.FATI,FDatabaseName.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboRequestForAccess.SetDatabaseName(Value : String) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDdboRequestForAccess.GetDatabaseName : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FDatabaseName.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboRequestForAccess.GetDatabaseName : String --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDdboRequestForAccess.SetSpecificUserName(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'SpecificUserName',FSpecificUserName.FATI,FSpecificUserName.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboRequestForAccess.SetSpecificUserName(Value : String) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDdboRequestForAccess.GetSpecificUserName : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FSpecificUserName.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboRequestForAccess.GetSpecificUserName : String --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDdboRequestForAccess.SetSpecificPassword(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'SpecificPassword',FSpecificPassword.FATI,FSpecificPassword.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboRequestForAccess.SetSpecificPassword(Value : String) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDdboRequestForAccess.GetSpecificPassword : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FSpecificPassword.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboRequestForAccess.GetSpecificPassword : String --> '+E.Message)
      end;
    end;
  End;


//---- Class TGRIDdboResponseForAccess

  Constructor TGRIDdboResponseForAccess.Create(Const aManager : TGRIDClientServerDBProtocolBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FAccessGranted.FATI := -1;
    FAccessDeniedErrorDesc.FATI := -1;
    FTokenID.FATI := -1;
    FAskChannel.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDdboResponseForAccess.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDdboResponseForAccess,'TGRIDdboResponseForAccess Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDdboResponseForAccess.SetAccessGranted(Value : Boolean);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetBoolean(Self, FObjKey,'AccessGranted',FAccessGranted.FATI,FAccessGranted.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseForAccess.SetAccessGranted(Value : bool) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDdboResponseForAccess.GetAccessGranted : Boolean;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetBoolean(Self,FAccessGranted.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseForAccess.GetAccessGranted : bool --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDdboResponseForAccess.SetAccessDeniedErrorDesc(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'AccessDeniedErrorDesc',FAccessDeniedErrorDesc.FATI,FAccessDeniedErrorDesc.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseForAccess.SetAccessDeniedErrorDesc(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDdboResponseForAccess.GetAccessDeniedErrorDesc : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FAccessDeniedErrorDesc.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseForAccess.GetAccessDeniedErrorDesc : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDdboResponseForAccess.SetTokenID(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'TokenID',FTokenID.FATI,FTokenID.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseForAccess.SetTokenID(Value : String) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDdboResponseForAccess.GetTokenID : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FTokenID.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseForAccess.GetTokenID : String --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDdboResponseForAccess.SetAskChannel(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'AskChannel',FAskChannel.FATI,FAskChannel.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseForAccess.SetAskChannel(Value : String) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDdboResponseForAccess.GetAskChannel : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FAskChannel.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseForAccess.GetAskChannel : String --> '+E.Message)
      end;
    end;
  End;


//---- Class TGRIDdboRequestObjectData

  Constructor TGRIDdboRequestObjectData.Create(Const aManager : TGRIDClientServerDBProtocolBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FTokenID.FATI := -1;
    FOperationContent.FATI := -1;
    FClientSessionID.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDdboRequestObjectData.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDdboRequestObjectData,'TGRIDdboRequestObjectData Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDdboRequestObjectData.SetTokenID(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'TokenID',FTokenID.FATI,FTokenID.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboRequestObjectData.SetTokenID(Value : String) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDdboRequestObjectData.GetTokenID : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FTokenID.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboRequestObjectData.GetTokenID : String --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDdboRequestObjectData.SetOperationContent(Value : TStream);
  var r : TArrayOfByte;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
      try
         SetLength(r,Value.Size);
         Value.ReadBuffer(Pointer(r)^,Value.Size);
         StoredProtoAppClasses.SeTArrayOfByte(Self, FObjKey,'OperationContent',FOperationContent.FATI,FOperationContent.FData_Index,r);
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TGRIDdboRequestObjectData.SetOperationContent(Value : Stream) --> '+E.Message)
        end;
      end;
  End;

  Function TGRIDdboRequestObjectData.GetOperationContent : TStream;
  var r : TArrayOfByte;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
       Result := Nil;
       StoredProtoAppClasses.GetArrayOfByte(Self,FOperationContent.FATI,r);
       if length(r)>0 then
       Begin
         Result := TMemoryStream.Create;
         Result.WriteBuffer(Pointer(r)^,Length(r));
       end;
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboRequestObjectData.GetOperationContent : Stream --> '+E.Message)
      end;
    end;
  End;


//---- Class TGRIDdboRequestSaveObjectData

  Constructor TGRIDdboRequestSaveObjectData.Create(Const aManager : TGRIDClientServerDBProtocolBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FTokenID.FATI := -1;
    FOperationContent.FATI := -1;
    FClientSessionID.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDdboRequestSaveObjectData.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDdboRequestSaveObjectData,'TGRIDdboRequestSaveObjectData Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;


//---- Class TGRIDdboRequestRetrieveObjectData

  Constructor TGRIDdboRequestRetrieveObjectData.Create(Const aManager : TGRIDClientServerDBProtocolBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FTokenID.FATI := -1;
    FOperationContent.FATI := -1;
    FClientSessionID.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDdboRequestRetrieveObjectData.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDdboRequestRetrieveObjectData,'TGRIDdboRequestRetrieveObjectData Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;


//---- Class TGRIDdboResponseForObjectData

  Constructor TGRIDdboResponseForObjectData.Create(Const aManager : TGRIDClientServerDBProtocolBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FTokenID.FATI := -1;
    FOperationSuccess.FATI := -1;
    FOperationFailErrorDesc.FATI := -1;
    FOperationResultContent.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDdboResponseForObjectData.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDdboResponseForObjectData,'TGRIDdboResponseForObjectData Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDdboResponseForObjectData.SetTokenID(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'TokenID',FTokenID.FATI,FTokenID.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseForObjectData.SetTokenID(Value : String) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDdboResponseForObjectData.GetTokenID : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FTokenID.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseForObjectData.GetTokenID : String --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDdboResponseForObjectData.SetOperationSuccess(Value : Boolean);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetBoolean(Self, FObjKey,'OperationSuccess',FOperationSuccess.FATI,FOperationSuccess.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseForObjectData.SetOperationSuccess(Value : bool) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDdboResponseForObjectData.GetOperationSuccess : Boolean;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetBoolean(Self,FOperationSuccess.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseForObjectData.GetOperationSuccess : bool --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDdboResponseForObjectData.SetOperationFailErrorDesc(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'OperationFailErrorDesc',FOperationFailErrorDesc.FATI,FOperationFailErrorDesc.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseForObjectData.SetOperationFailErrorDesc(Value : String) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDdboResponseForObjectData.GetOperationFailErrorDesc : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FOperationFailErrorDesc.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseForObjectData.GetOperationFailErrorDesc : String --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDdboResponseForObjectData.SetOperationResultContent(Value : TStream);
  var r : TArrayOfByte;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
      try
         SetLength(r,Value.Size);
         Value.ReadBuffer(Pointer(r)^,Value.Size);
         StoredProtoAppClasses.SeTArrayOfByte(Self, FObjKey,'OperationResultContent',FOperationResultContent.FATI,FOperationResultContent.FData_Index,r);
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TGRIDdboResponseForObjectData.SetOperationResultContent(Value : Stream) --> '+E.Message)
        end;
      end;
  End;

  Function TGRIDdboResponseForObjectData.GetOperationResultContent : TStream;
  var r : TArrayOfByte;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
       Result := Nil;
       StoredProtoAppClasses.GetArrayOfByte(Self,FOperationResultContent.FATI,r);
       if length(r)>0 then
       Begin
         Result := TMemoryStream.Create;
         Result.WriteBuffer(Pointer(r)^,Length(r));
       end;
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseForObjectData.GetOperationResultContent : Stream --> '+E.Message)
      end;
    end;
  End;


//---- Class TGRIDdboResponseGenericError

  Constructor TGRIDdboResponseGenericError.Create(Const aManager : TGRIDClientServerDBProtocolBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FTokenID.FATI := -1;
    FErrorCode.FATI := -1;
    FErrorString.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDdboResponseGenericError.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDdboResponseGenericError,'TGRIDdboResponseGenericError Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDdboResponseGenericError.SetTokenID(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'TokenID',FTokenID.FATI,FTokenID.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseGenericError.SetTokenID(Value : String) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDdboResponseGenericError.GetTokenID : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FTokenID.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseGenericError.GetTokenID : String --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDdboResponseGenericError.SetErrorCode(Value : Integer);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetInteger(Self, FObjKey,'ErrorCode',FErrorCode.FATI,FErrorCode.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseGenericError.SetErrorCode(Value : integer) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDdboResponseGenericError.GetErrorCode : Integer;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetInteger(Self,FErrorCode.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseGenericError.GetErrorCode : integer --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDdboResponseGenericError.SetErrorString(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'ErrorString',FErrorString.FATI,FErrorString.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseGenericError.SetErrorString(Value : String) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDdboResponseGenericError.GetErrorString : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FErrorString.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDdboResponseGenericError.GetErrorString : String --> '+E.Message)
      end;
    end;
  End;


{TGRIDClientServerDBProtocolBOManager}
//------------------------------------------------------------

Procedure TGRIDClientServerDBProtocolBOManager.InternalLoadCommon;
var i : integer;
    cl : string;
    FAuditMem : Boolean;
    aTGRIDdboCustomRequest : TGRIDdboCustomRequest;
    aTGRIDdboCustomResponse : TGRIDdboCustomResponse;
    aTGRIDdboRequestForAccess : TGRIDdboRequestForAccess;
    aTGRIDdboResponseForAccess : TGRIDdboResponseForAccess;
    aTGRIDdboRequestObjectData : TGRIDdboRequestObjectData;
    aTGRIDdboRequestSaveObjectData : TGRIDdboRequestSaveObjectData;
    aTGRIDdboRequestRetrieveObjectData : TGRIDdboRequestRetrieveObjectData;
    aTGRIDdboResponseForObjectData : TGRIDdboResponseForObjectData;
    aTGRIDdboResponseGenericError : TGRIDdboResponseGenericError;
    CurrentInstanceKey : UInt32;
    aSO : TofStoredObject_UInt32Key;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  CurrentInstanceKey := High(UInt32);
  aSO := TofStoredObject_UInt32Key(StoredObject);
  for i := Low(aSO.AllocationData.TableATI_Int) to High(aSO.AllocationData.TableATI_Int) do
  begin
    //Deleted object is ignored but still exists in the buffer : Ignore it.
    if aSO.AllocationData.TableATI_Int[i].MetaStatus = ToATIMetaStatus.omsDeleted then
      Continue;

    CurrentInstanceKey := aSO.AllocationData.TableATI_Int[i].InstanceIndex;

    if CurrentInstanceKey<>High(UInt32) then
    begin

      if Not( Assigned(aSO.LookForObject(CurrentInstanceKey)) ) then
      begin
        //Object does not exists yet : Build.

        //Create object.
        cl := aSO.DefinitionData.Classes[aSO.AllocationData.TableATI_Int[i].MetaClassIndex].ClassName;
        if cl = 'TGRIDdboCustomRequest' then
        begin
          aTGRIDdboCustomRequest := TGRIDdboCustomRequest.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDdboCustomRequest.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDdboCustomRequest.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDdboCustomRequest);
          end;
        end
        else
        if cl = 'TGRIDdboCustomResponse' then
        begin
          aTGRIDdboCustomResponse := TGRIDdboCustomResponse.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDdboCustomResponse.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDdboCustomResponse.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDdboCustomResponse);
          end;
        end
        else
        if cl = 'TGRIDdboRequestForAccess' then
        begin
          aTGRIDdboRequestForAccess := TGRIDdboRequestForAccess.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDdboRequestForAccess.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDdboRequestForAccess.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDdboRequestForAccess);
          end;
        end
        else
        if cl = 'TGRIDdboResponseForAccess' then
        begin
          aTGRIDdboResponseForAccess := TGRIDdboResponseForAccess.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDdboResponseForAccess.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDdboResponseForAccess.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDdboResponseForAccess);
          end;
        end
        else
        if cl = 'TGRIDdboRequestObjectData' then
        begin
          aTGRIDdboRequestObjectData := TGRIDdboRequestObjectData.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDdboRequestObjectData.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDdboRequestObjectData.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDdboRequestObjectData);
          end;
        end
        else
        if cl = 'TGRIDdboRequestSaveObjectData' then
        begin
          aTGRIDdboRequestSaveObjectData := TGRIDdboRequestSaveObjectData.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDdboRequestSaveObjectData.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDdboRequestSaveObjectData.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDdboRequestSaveObjectData);
          end;
        end
        else
        if cl = 'TGRIDdboRequestRetrieveObjectData' then
        begin
          aTGRIDdboRequestRetrieveObjectData := TGRIDdboRequestRetrieveObjectData.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDdboRequestRetrieveObjectData.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDdboRequestRetrieveObjectData.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDdboRequestRetrieveObjectData);
          end;
        end
        else
        if cl = 'TGRIDdboResponseForObjectData' then
        begin
          aTGRIDdboResponseForObjectData := TGRIDdboResponseForObjectData.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDdboResponseForObjectData.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDdboResponseForObjectData.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDdboResponseForObjectData);
          end;
        end
        else
        if cl = 'TGRIDdboResponseGenericError' then
        begin
          aTGRIDdboResponseGenericError := TGRIDdboResponseGenericError.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDdboResponseGenericError.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDdboResponseGenericError.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDdboResponseGenericError);
          end;
        end
        else
        begin
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 0 then //TGRIDdboCustomRequest
      begin
        aTGRIDdboCustomRequest := TGRIDdboCustomRequest(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDdboCustomRequest class.
        begin
          aTGRIDdboCustomRequest.FObjKeyRef.FATI := i;
          aTGRIDdboCustomRequest.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //ClientSessionID
        begin
          aTGRIDdboCustomRequest.FClientSessionID.FATI := i;
          aTGRIDdboCustomRequest.FClientSessionID.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 1 then //TGRIDdboCustomResponse
      begin
        aTGRIDdboCustomResponse := TGRIDdboCustomResponse(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDdboCustomResponse class.
        begin
          aTGRIDdboCustomResponse.FObjKeyRef.FATI := i;
          aTGRIDdboCustomResponse.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 2 then //TGRIDdboRequestForAccess
      begin
        aTGRIDdboRequestForAccess := TGRIDdboRequestForAccess(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDdboRequestForAccess class.
        begin
          aTGRIDdboRequestForAccess.FObjKeyRef.FATI := i;
          aTGRIDdboRequestForAccess.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //ClientSessionID from TGRIDdboCustomRequest class.
        begin
          aTGRIDdboRequestForAccess.FClientSessionID.FATI := i;
          aTGRIDdboRequestForAccess.FClientSessionID.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //DatabaseName
        begin
          aTGRIDdboRequestForAccess.FDatabaseName.FATI := i;
          aTGRIDdboRequestForAccess.FDatabaseName.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 3 then //SpecificUserName
        begin
          aTGRIDdboRequestForAccess.FSpecificUserName.FATI := i;
          aTGRIDdboRequestForAccess.FSpecificUserName.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 4 then //SpecificPassword
        begin
          aTGRIDdboRequestForAccess.FSpecificPassword.FATI := i;
          aTGRIDdboRequestForAccess.FSpecificPassword.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 3 then //TGRIDdboResponseForAccess
      begin
        aTGRIDdboResponseForAccess := TGRIDdboResponseForAccess(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDdboResponseForAccess class.
        begin
          aTGRIDdboResponseForAccess.FObjKeyRef.FATI := i;
          aTGRIDdboResponseForAccess.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //AccessGranted
        begin
          aTGRIDdboResponseForAccess.FAccessGranted.FATI := i;
          aTGRIDdboResponseForAccess.FAccessGranted.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //AccessDeniedErrorDesc
        begin
          aTGRIDdboResponseForAccess.FAccessDeniedErrorDesc.FATI := i;
          aTGRIDdboResponseForAccess.FAccessDeniedErrorDesc.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 3 then //TokenID
        begin
          aTGRIDdboResponseForAccess.FTokenID.FATI := i;
          aTGRIDdboResponseForAccess.FTokenID.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 4 then //AskChannel
        begin
          aTGRIDdboResponseForAccess.FAskChannel.FATI := i;
          aTGRIDdboResponseForAccess.FAskChannel.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 4 then //TGRIDdboRequestObjectData
      begin
        aTGRIDdboRequestObjectData := TGRIDdboRequestObjectData(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDdboRequestObjectData class.
        begin
          aTGRIDdboRequestObjectData.FObjKeyRef.FATI := i;
          aTGRIDdboRequestObjectData.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //ClientSessionID from TGRIDdboCustomRequest class.
        begin
          aTGRIDdboRequestObjectData.FClientSessionID.FATI := i;
          aTGRIDdboRequestObjectData.FClientSessionID.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //TokenID
        begin
          aTGRIDdboRequestObjectData.FTokenID.FATI := i;
          aTGRIDdboRequestObjectData.FTokenID.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 3 then //OperationContent
        begin
          aTGRIDdboRequestObjectData.FOperationContent.FATI := i;
          aTGRIDdboRequestObjectData.FOperationContent.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 5 then //TGRIDdboRequestSaveObjectData
      begin
        aTGRIDdboRequestSaveObjectData := TGRIDdboRequestSaveObjectData(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDdboRequestSaveObjectData class.
        begin
          aTGRIDdboRequestSaveObjectData.FObjKeyRef.FATI := i;
          aTGRIDdboRequestSaveObjectData.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //ClientSessionID from TGRIDdboCustomRequest class.
        begin
          aTGRIDdboRequestSaveObjectData.FClientSessionID.FATI := i;
          aTGRIDdboRequestSaveObjectData.FClientSessionID.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //TokenID from TGRIDdboRequestObjectData class.
        begin
          aTGRIDdboRequestSaveObjectData.FTokenID.FATI := i;
          aTGRIDdboRequestSaveObjectData.FTokenID.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 3 then //OperationContent from TGRIDdboRequestObjectData class.
        begin
          aTGRIDdboRequestSaveObjectData.FOperationContent.FATI := i;
          aTGRIDdboRequestSaveObjectData.FOperationContent.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 6 then //TGRIDdboRequestRetrieveObjectData
      begin
        aTGRIDdboRequestRetrieveObjectData := TGRIDdboRequestRetrieveObjectData(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDdboRequestRetrieveObjectData class.
        begin
          aTGRIDdboRequestRetrieveObjectData.FObjKeyRef.FATI := i;
          aTGRIDdboRequestRetrieveObjectData.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //ClientSessionID from TGRIDdboCustomRequest class.
        begin
          aTGRIDdboRequestRetrieveObjectData.FClientSessionID.FATI := i;
          aTGRIDdboRequestRetrieveObjectData.FClientSessionID.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //TokenID from TGRIDdboRequestObjectData class.
        begin
          aTGRIDdboRequestRetrieveObjectData.FTokenID.FATI := i;
          aTGRIDdboRequestRetrieveObjectData.FTokenID.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 3 then //OperationContent from TGRIDdboRequestObjectData class.
        begin
          aTGRIDdboRequestRetrieveObjectData.FOperationContent.FATI := i;
          aTGRIDdboRequestRetrieveObjectData.FOperationContent.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 7 then //TGRIDdboResponseForObjectData
      begin
        aTGRIDdboResponseForObjectData := TGRIDdboResponseForObjectData(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDdboResponseForObjectData class.
        begin
          aTGRIDdboResponseForObjectData.FObjKeyRef.FATI := i;
          aTGRIDdboResponseForObjectData.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //TokenID
        begin
          aTGRIDdboResponseForObjectData.FTokenID.FATI := i;
          aTGRIDdboResponseForObjectData.FTokenID.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //OperationSuccess
        begin
          aTGRIDdboResponseForObjectData.FOperationSuccess.FATI := i;
          aTGRIDdboResponseForObjectData.FOperationSuccess.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 3 then //OperationFailErrorDesc
        begin
          aTGRIDdboResponseForObjectData.FOperationFailErrorDesc.FATI := i;
          aTGRIDdboResponseForObjectData.FOperationFailErrorDesc.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 4 then //OperationResultContent
        begin
          aTGRIDdboResponseForObjectData.FOperationResultContent.FATI := i;
          aTGRIDdboResponseForObjectData.FOperationResultContent.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 8 then //TGRIDdboResponseGenericError
      begin
        aTGRIDdboResponseGenericError := TGRIDdboResponseGenericError(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDdboResponseGenericError class.
        begin
          aTGRIDdboResponseGenericError.FObjKeyRef.FATI := i;
          aTGRIDdboResponseGenericError.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //TokenID
        begin
          aTGRIDdboResponseGenericError.FTokenID.FATI := i;
          aTGRIDdboResponseGenericError.FTokenID.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //ErrorCode
        begin
          aTGRIDdboResponseGenericError.FErrorCode.FATI := i;
          aTGRIDdboResponseGenericError.FErrorCode.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 3 then //ErrorString
        begin
          aTGRIDdboResponseGenericError.FErrorString.FATI := i;
          aTGRIDdboResponseGenericError.FErrorString.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;


    end
    else
    begin
      Break; //End of array list in Instance = -1
    end;
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
  StoredObject.SetModified(False);
end;

Function TGRIDClientServerDBProtocolBOManager.BuildObject(aObjectClass : String; Const Guid : UInt32) : TObject;
var i : Integer;
    FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
 if aObjectClass = 'TGRIDdboCustomRequest' then
 begin
   Result := TGRIDdboCustomRequest.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDdboCustomRequest(Result).SetObjKeyRef(Guid); //Internal set in local buffer.
     TGRIDdboCustomRequest(Result).FObjKey := Guid; //Variable set.
     StoredObject.ChangeGUID(Guid, Result); //ClassManager list update.
   end;
 end;
 if aObjectClass = 'TGRIDdboCustomResponse' then
 begin
   Result := TGRIDdboCustomResponse.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDdboCustomResponse(Result).SetObjKeyRef(Guid); //Internal set in local buffer.
     TGRIDdboCustomResponse(Result).FObjKey := Guid; //Variable set.
     StoredObject.ChangeGUID(Guid, Result); //ClassManager list update.
   end;
 end;
 if aObjectClass = 'TGRIDdboRequestForAccess' then
 begin
   Result := TGRIDdboRequestForAccess.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDdboRequestForAccess(Result).SetObjKeyRef(Guid); //Internal set in local buffer.
     TGRIDdboRequestForAccess(Result).FObjKey := Guid; //Variable set.
     StoredObject.ChangeGUID(Guid, Result); //ClassManager list update.
   end;
 end;
 if aObjectClass = 'TGRIDdboResponseForAccess' then
 begin
   Result := TGRIDdboResponseForAccess.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDdboResponseForAccess(Result).SetObjKeyRef(Guid); //Internal set in local buffer.
     TGRIDdboResponseForAccess(Result).FObjKey := Guid; //Variable set.
     StoredObject.ChangeGUID(Guid, Result); //ClassManager list update.
   end;
 end;
 if aObjectClass = 'TGRIDdboRequestObjectData' then
 begin
   Result := TGRIDdboRequestObjectData.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDdboRequestObjectData(Result).SetObjKeyRef(Guid); //Internal set in local buffer.
     TGRIDdboRequestObjectData(Result).FObjKey := Guid; //Variable set.
     StoredObject.ChangeGUID(Guid, Result); //ClassManager list update.
   end;
 end;
 if aObjectClass = 'TGRIDdboRequestSaveObjectData' then
 begin
   Result := TGRIDdboRequestSaveObjectData.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDdboRequestSaveObjectData(Result).SetObjKeyRef(Guid); //Internal set in local buffer.
     TGRIDdboRequestSaveObjectData(Result).FObjKey := Guid; //Variable set.
     StoredObject.ChangeGUID(Guid, Result); //ClassManager list update.
   end;
 end;
 if aObjectClass = 'TGRIDdboRequestRetrieveObjectData' then
 begin
   Result := TGRIDdboRequestRetrieveObjectData.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDdboRequestRetrieveObjectData(Result).SetObjKeyRef(Guid); //Internal set in local buffer.
     TGRIDdboRequestRetrieveObjectData(Result).FObjKey := Guid; //Variable set.
     StoredObject.ChangeGUID(Guid, Result); //ClassManager list update.
   end;
 end;
 if aObjectClass = 'TGRIDdboResponseForObjectData' then
 begin
   Result := TGRIDdboResponseForObjectData.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDdboResponseForObjectData(Result).SetObjKeyRef(Guid); //Internal set in local buffer.
     TGRIDdboResponseForObjectData(Result).FObjKey := Guid; //Variable set.
     StoredObject.ChangeGUID(Guid, Result); //ClassManager list update.
   end;
 end;
 if aObjectClass = 'TGRIDdboResponseGenericError' then
 begin
   Result := TGRIDdboResponseGenericError.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDdboResponseGenericError(Result).SetObjKeyRef(Guid); //Internal set in local buffer.
     TGRIDdboResponseGenericError(Result).FObjKey := Guid; //Variable set.
     StoredObject.ChangeGUID(Guid, Result); //ClassManager list update.
   end;
 end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;

Constructor TGRIDClientServerDBProtocolBOManager.Create;
Begin
  Inherited Create;
  StoredObject := TofStoredObject_UInt32Key.Create;
  TofStoredObject_UInt32Key(StoredObject).StoredObjectClassManager := Self;
  RegisterClass;
end;

Procedure TGRIDClientServerDBProtocolBOManager.PopulateObject( anObject : TObject; PropertyName, StringValue : String);
var i : integer;
    s : TStringList;
    ls : TList<String>;
    FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  if anObject Is TGRIDdboCustomRequest then
  begin
    if Lowercase(PropertyName) = 'clientsessionid' then
    begin
      TGRIDdboCustomRequest(anObject).ClientSessionID := StringValue;
    end;
  end;
  if anObject Is TGRIDdboCustomResponse then
  begin
  end;
  if anObject Is TGRIDdboRequestForAccess then
  begin
    if Lowercase(PropertyName) = 'databasename' then
    begin
      TGRIDdboRequestForAccess(anObject).DatabaseName := StringValue;
    end;
    if Lowercase(PropertyName) = 'specificusername' then
    begin
      TGRIDdboRequestForAccess(anObject).SpecificUserName := StringValue;
    end;
    if Lowercase(PropertyName) = 'specificpassword' then
    begin
      TGRIDdboRequestForAccess(anObject).SpecificPassword := StringValue;
    end;
  end;
  if anObject Is TGRIDdboResponseForAccess then
  begin
    if Lowercase(PropertyName) = 'accessgranted' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TGRIDdboResponseForAccess(anObject).AccessGranted := Boolean(StrToInt(StringValue));
    end;
    if Lowercase(PropertyName) = 'accessdeniederrordesc' then
    begin
      TGRIDdboResponseForAccess(anObject).AccessDeniedErrorDesc := StringValue;
    end;
    if Lowercase(PropertyName) = 'tokenid' then
    begin
      TGRIDdboResponseForAccess(anObject).TokenID := StringValue;
    end;
    if Lowercase(PropertyName) = 'askchannel' then
    begin
      TGRIDdboResponseForAccess(anObject).AskChannel := StringValue;
    end;
  end;
  if anObject Is TGRIDdboRequestObjectData then
  begin
    if Lowercase(PropertyName) = 'tokenid' then
    begin
      TGRIDdboRequestObjectData(anObject).TokenID := StringValue;
    end;
    //if Lowercase(PropertyName) = 'operationcontent' then
    //begin
    //  TGRIDdboRequestObjectData(anObject).OperationContent := ToStream(StringValue);
    //end;
  end;
  if anObject Is TGRIDdboRequestSaveObjectData then
  begin
  end;
  if anObject Is TGRIDdboRequestRetrieveObjectData then
  begin
  end;
  if anObject Is TGRIDdboResponseForObjectData then
  begin
    if Lowercase(PropertyName) = 'tokenid' then
    begin
      TGRIDdboResponseForObjectData(anObject).TokenID := StringValue;
    end;
    if Lowercase(PropertyName) = 'operationsuccess' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TGRIDdboResponseForObjectData(anObject).OperationSuccess := Boolean(StrToInt(StringValue));
    end;
    if Lowercase(PropertyName) = 'operationfailerrordesc' then
    begin
      TGRIDdboResponseForObjectData(anObject).OperationFailErrorDesc := StringValue;
    end;
    //if Lowercase(PropertyName) = 'operationresultcontent' then
    //begin
    //  TGRIDdboResponseForObjectData(anObject).OperationResultContent := ToStream(StringValue);
    //end;
  end;
  if anObject Is TGRIDdboResponseGenericError then
  begin
    if Lowercase(PropertyName) = 'tokenid' then
    begin
      TGRIDdboResponseGenericError(anObject).TokenID := StringValue;
    end;
    if Lowercase(PropertyName) = 'errorcode' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TGRIDdboResponseGenericError(anObject).ErrorCode := StrToInt(StringValue);
    end;
    if Lowercase(PropertyName) = 'errorstring' then
    begin
      TGRIDdboResponseGenericError(anObject).ErrorString := StringValue;
    end;
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDClientServerDBProtocolBOManager.PopulateObjectStream( anObject : TObject; PropertyName : String; Value : TStream);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
if anObject Is TGRIDdboCustomRequest then
begin
end;
if anObject Is TGRIDdboCustomResponse then
begin
end;
if anObject Is TGRIDdboRequestForAccess then
begin
end;
if anObject Is TGRIDdboResponseForAccess then
begin
end;
if anObject Is TGRIDdboRequestObjectData then
begin
  if Lowercase(PropertyName) = 'operationcontent' then
  begin
    Value.Position := 0;
    TGRIDdboRequestObjectData(anObject).OperationContent := Value;
  end;
end;
if anObject Is TGRIDdboRequestSaveObjectData then
begin
end;
if anObject Is TGRIDdboRequestRetrieveObjectData then
begin
end;
if anObject Is TGRIDdboResponseForObjectData then
begin
  if Lowercase(PropertyName) = 'operationresultcontent' then
  begin
    Value.Position := 0;
    TGRIDdboResponseForObjectData(anObject).OperationResultContent := Value;
  end;
end;
if anObject Is TGRIDdboResponseGenericError then
begin
end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDClientServerDBProtocolBOManager.PopulateObjectWithString( anObject : TObject; PropertyName : String; Value : String);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  if anObject Is TGRIDdboCustomRequest then
  begin
    if Lowercase(PropertyName) = 'clientsessionid' then
    begin
      TGRIDdboCustomRequest(anObject).ClientSessionID := Value;
    end;
  end;
  if anObject Is TGRIDdboCustomResponse then
  begin
  end;
  if anObject Is TGRIDdboRequestForAccess then
  begin
    if Lowercase(PropertyName) = 'databasename' then
    begin
      TGRIDdboRequestForAccess(anObject).DatabaseName := Value;
    end;
    if Lowercase(PropertyName) = 'specificusername' then
    begin
      TGRIDdboRequestForAccess(anObject).SpecificUserName := Value;
    end;
    if Lowercase(PropertyName) = 'specificpassword' then
    begin
      TGRIDdboRequestForAccess(anObject).SpecificPassword := Value;
    end;
  end;
  if anObject Is TGRIDdboResponseForAccess then
  begin
    if Lowercase(PropertyName) = 'accessdeniederrordesc' then
    begin
      TGRIDdboResponseForAccess(anObject).AccessDeniedErrorDesc := Value;
    end;
    if Lowercase(PropertyName) = 'tokenid' then
    begin
      TGRIDdboResponseForAccess(anObject).TokenID := Value;
    end;
    if Lowercase(PropertyName) = 'askchannel' then
    begin
      TGRIDdboResponseForAccess(anObject).AskChannel := Value;
    end;
  end;
  if anObject Is TGRIDdboRequestObjectData then
  begin
    if Lowercase(PropertyName) = 'tokenid' then
    begin
      TGRIDdboRequestObjectData(anObject).TokenID := Value;
    end;
  end;
  if anObject Is TGRIDdboRequestSaveObjectData then
  begin
  end;
  if anObject Is TGRIDdboRequestRetrieveObjectData then
  begin
  end;
  if anObject Is TGRIDdboResponseForObjectData then
  begin
    if Lowercase(PropertyName) = 'tokenid' then
    begin
      TGRIDdboResponseForObjectData(anObject).TokenID := Value;
    end;
    if Lowercase(PropertyName) = 'operationfailerrordesc' then
    begin
      TGRIDdboResponseForObjectData(anObject).OperationFailErrorDesc := Value;
    end;
  end;
  if anObject Is TGRIDdboResponseGenericError then
  begin
    if Lowercase(PropertyName) = 'tokenid' then
    begin
      TGRIDdboResponseGenericError(anObject).TokenID := Value;
    end;
    if Lowercase(PropertyName) = 'errorstring' then
    begin
      TGRIDdboResponseGenericError(anObject).ErrorString := Value;
    end;
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDClientServerDBProtocolBOManager.PopulateObjectWithDouble( anObject : TObject; PropertyName : String; Value : Double);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  if anObject Is TGRIDdboCustomRequest then
  begin
  end;
  if anObject Is TGRIDdboCustomResponse then
  begin
  end;
  if anObject Is TGRIDdboRequestForAccess then
  begin
  end;
  if anObject Is TGRIDdboResponseForAccess then
  begin
  end;
  if anObject Is TGRIDdboRequestObjectData then
  begin
  end;
  if anObject Is TGRIDdboRequestSaveObjectData then
  begin
  end;
  if anObject Is TGRIDdboRequestRetrieveObjectData then
  begin
  end;
  if anObject Is TGRIDdboResponseForObjectData then
  begin
  end;
  if anObject Is TGRIDdboResponseGenericError then
  begin
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDClientServerDBProtocolBOManager.PopulateObjectWithInteger( anObject : TObject; PropertyName : String; Value : Integer);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  if anObject Is TGRIDdboCustomRequest then
  begin
  end;
  if anObject Is TGRIDdboCustomResponse then
  begin
  end;
  if anObject Is TGRIDdboRequestForAccess then
  begin
  end;
  if anObject Is TGRIDdboResponseForAccess then
  begin
  end;
  if anObject Is TGRIDdboRequestObjectData then
  begin
  end;
  if anObject Is TGRIDdboRequestSaveObjectData then
  begin
  end;
  if anObject Is TGRIDdboRequestRetrieveObjectData then
  begin
  end;
  if anObject Is TGRIDdboResponseForObjectData then
  begin
  end;
  if anObject Is TGRIDdboResponseGenericError then
  begin
    if Lowercase(PropertyName) = 'errorcode' then
    begin
      TGRIDdboResponseGenericError(anObject).ErrorCode := Value;
    end;
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDClientServerDBProtocolBOManager.PopulateObjectWithDateTime( anObject : TObject; PropertyName : String; Value : TDateTime);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  if anObject Is TGRIDdboCustomRequest then
  begin
  end;
  if anObject Is TGRIDdboCustomResponse then
  begin
  end;
  if anObject Is TGRIDdboRequestForAccess then
  begin
  end;
  if anObject Is TGRIDdboResponseForAccess then
  begin
  end;
  if anObject Is TGRIDdboRequestObjectData then
  begin
  end;
  if anObject Is TGRIDdboRequestSaveObjectData then
  begin
  end;
  if anObject Is TGRIDdboRequestRetrieveObjectData then
  begin
  end;
  if anObject Is TGRIDdboResponseForObjectData then
  begin
  end;
  if anObject Is TGRIDdboResponseGenericError then
  begin
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDClientServerDBProtocolBOManager.PopulateObjectWithUInt32( anObject : TObject; PropertyName : String; Value : UInt32);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  if anObject Is TGRIDdboCustomRequest then
  begin
  end;
  if anObject Is TGRIDdboCustomResponse then
  begin
  end;
  if anObject Is TGRIDdboRequestForAccess then
  begin
  end;
  if anObject Is TGRIDdboResponseForAccess then
  begin
  end;
  if anObject Is TGRIDdboRequestObjectData then
  begin
  end;
  if anObject Is TGRIDdboRequestSaveObjectData then
  begin
  end;
  if anObject Is TGRIDdboRequestRetrieveObjectData then
  begin
  end;
  if anObject Is TGRIDdboResponseForObjectData then
  begin
  end;
  if anObject Is TGRIDdboResponseGenericError then
  begin
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDClientServerDBProtocolBOManager.PopulateObjectWithInt64( anObject : TObject; PropertyName : String; Value : UInt64);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  if anObject Is TGRIDdboCustomRequest then
  begin
  end;
  if anObject Is TGRIDdboCustomResponse then
  begin
  end;
  if anObject Is TGRIDdboRequestForAccess then
  begin
  end;
  if anObject Is TGRIDdboResponseForAccess then
  begin
  end;
  if anObject Is TGRIDdboRequestObjectData then
  begin
  end;
  if anObject Is TGRIDdboRequestSaveObjectData then
  begin
  end;
  if anObject Is TGRIDdboRequestRetrieveObjectData then
  begin
  end;
  if anObject Is TGRIDdboResponseForObjectData then
  begin
  end;
  if anObject Is TGRIDdboResponseGenericError then
  begin
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDClientServerDBProtocolBOManager.PopulateObjectWithByte( anObject : TObject; PropertyName : String; Value : Byte);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  if anObject Is TGRIDdboCustomRequest then
  begin
  end;
  if anObject Is TGRIDdboCustomResponse then
  begin
  end;
  if anObject Is TGRIDdboRequestForAccess then
  begin
  end;
  if anObject Is TGRIDdboResponseForAccess then
  begin
  end;
  if anObject Is TGRIDdboRequestObjectData then
  begin
  end;
  if anObject Is TGRIDdboRequestSaveObjectData then
  begin
  end;
  if anObject Is TGRIDdboRequestRetrieveObjectData then
  begin
  end;
  if anObject Is TGRIDdboResponseForObjectData then
  begin
  end;
  if anObject Is TGRIDdboResponseGenericError then
  begin
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDClientServerDBProtocolBOManager.PopulateObjectWithBoolean( anObject : TObject; PropertyName : String; Value : Boolean);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  if anObject Is TGRIDdboCustomRequest then
  begin
  end;
  if anObject Is TGRIDdboCustomResponse then
  begin
  end;
  if anObject Is TGRIDdboRequestForAccess then
  begin
  end;
  if anObject Is TGRIDdboResponseForAccess then
  begin
    if Lowercase(PropertyName) = 'accessgranted' then
    begin
      TGRIDdboResponseForAccess(anObject).AccessGranted := Value;
    end;
  end;
  if anObject Is TGRIDdboRequestObjectData then
  begin
  end;
  if anObject Is TGRIDdboRequestSaveObjectData then
  begin
  end;
  if anObject Is TGRIDdboRequestRetrieveObjectData then
  begin
  end;
  if anObject Is TGRIDdboResponseForObjectData then
  begin
    if Lowercase(PropertyName) = 'operationsuccess' then
    begin
      TGRIDdboResponseForObjectData(anObject).OperationSuccess := Value;
    end;
  end;
  if anObject Is TGRIDdboResponseGenericError then
  begin
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;

Procedure TGRIDClientServerDBProtocolBOManager.RegisterClass;
Begin
  StoredObject.ClearAllData(True);
  StoredObject.RegisterClass('TGRIDdboCustomRequest');
  StoredObject.RegisterProperty('TGRIDdboCustomRequest','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDdboCustomRequest','ClientSessionID',ofssString);
  StoredObject.RegisterClass('TGRIDdboCustomResponse');
  StoredObject.RegisterProperty('TGRIDdboCustomResponse','ObjKeyRef',ofssString);
  StoredObject.RegisterClass('TGRIDdboRequestForAccess');
  StoredObject.RegisterProperty('TGRIDdboRequestForAccess','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDdboRequestForAccess','ClientSessionID',ofssString); //From TGRIDdboCustomRequest
  StoredObject.RegisterProperty('TGRIDdboRequestForAccess','DatabaseName',ofssString);
  StoredObject.RegisterProperty('TGRIDdboRequestForAccess','SpecificUserName',ofssString);
  StoredObject.RegisterProperty('TGRIDdboRequestForAccess','SpecificPassword',ofssString);
  StoredObject.RegisterClass('TGRIDdboResponseForAccess');
  StoredObject.RegisterProperty('TGRIDdboResponseForAccess','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDdboResponseForAccess','AccessGranted',ofssBoolean);
  StoredObject.RegisterProperty('TGRIDdboResponseForAccess','AccessDeniedErrorDesc',ofssString);
  StoredObject.RegisterProperty('TGRIDdboResponseForAccess','TokenID',ofssString);
  StoredObject.RegisterProperty('TGRIDdboResponseForAccess','AskChannel',ofssString);
  StoredObject.RegisterClass('TGRIDdboRequestObjectData');
  StoredObject.RegisterProperty('TGRIDdboRequestObjectData','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDdboRequestObjectData','ClientSessionID',ofssString); //From TGRIDdboCustomRequest
  StoredObject.RegisterProperty('TGRIDdboRequestObjectData','TokenID',ofssString);
  StoredObject.RegisterProperty('TGRIDdboRequestObjectData','OperationContent',ofssBlob);
  StoredObject.RegisterClass('TGRIDdboRequestSaveObjectData');
  StoredObject.RegisterProperty('TGRIDdboRequestSaveObjectData','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDdboRequestSaveObjectData','ClientSessionID',ofssString); //From TGRIDdboCustomRequest
  StoredObject.RegisterProperty('TGRIDdboRequestSaveObjectData','TokenID',ofssString); //From TGRIDdboRequestObjectData
  StoredObject.RegisterProperty('TGRIDdboRequestSaveObjectData','OperationContent',ofssBlob); //From TGRIDdboRequestObjectData
  StoredObject.RegisterClass('TGRIDdboRequestRetrieveObjectData');
  StoredObject.RegisterProperty('TGRIDdboRequestRetrieveObjectData','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDdboRequestRetrieveObjectData','ClientSessionID',ofssString); //From TGRIDdboCustomRequest
  StoredObject.RegisterProperty('TGRIDdboRequestRetrieveObjectData','TokenID',ofssString); //From TGRIDdboRequestObjectData
  StoredObject.RegisterProperty('TGRIDdboRequestRetrieveObjectData','OperationContent',ofssBlob); //From TGRIDdboRequestObjectData
  StoredObject.RegisterClass('TGRIDdboResponseForObjectData');
  StoredObject.RegisterProperty('TGRIDdboResponseForObjectData','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDdboResponseForObjectData','TokenID',ofssString);
  StoredObject.RegisterProperty('TGRIDdboResponseForObjectData','OperationSuccess',ofssBoolean);
  StoredObject.RegisterProperty('TGRIDdboResponseForObjectData','OperationFailErrorDesc',ofssString);
  StoredObject.RegisterProperty('TGRIDdboResponseForObjectData','OperationResultContent',ofssBlob);
  StoredObject.RegisterClass('TGRIDdboResponseGenericError');
  StoredObject.RegisterProperty('TGRIDdboResponseGenericError','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDdboResponseGenericError','TokenID',ofssString);
  StoredObject.RegisterProperty('TGRIDdboResponseGenericError','ErrorCode',ofssInteger);
  StoredObject.RegisterProperty('TGRIDdboResponseGenericError','ErrorString',ofssString);
end;



End.


//--------- Original UpScript
{
project name GRIDClientServerDBProtocolBO

include classes sysutils

define class TGRIDdboCustomRequest
ClientSessionID String
end

define class TGRIDdboCustomResponse
end

define class TGRIDdboRequestForAccess herits from TGRIDdboCustomRequest
DatabaseName
SpecificUserName
SpecificPassword String
end

define class TGRIDdboResponseForAccess herits from TGRIDdboCustomResponse
AccessGranted bool
AccessDeniedErrorDesc string
TokenID AskChannel String
end

define class TGRIDdboRequestObjectData herits from TGRIDdboCustomRequest
TokenID String
OperationContent Stream
end

define class TGRIDdboRequestSaveObjectData herits from TGRIDdboRequestObjectData
end

define class TGRIDdboRequestRetrieveObjectData herits from TGRIDdboRequestObjectData
end

define class TGRIDdboResponseForObjectData herits from TGRIDdboCustomResponse
TokenID String
OperationSuccess bool
OperationFailErrorDesc String
OperationResultContent Stream
end

define class TGRIDdboResponseGenericError herits from TGRIDdboCustomResponse
TokenID String
ErrorCode integer
ErrorString String
end

}

