{*---------------------------------------------------*}
// UpScript Translator (ObjectPascal for StoredObject) AutoGenerated file.
{*---------------------------------------------------*}


Unit GMS.ClientServer.Protocol.Transport.BO;
{*---------------------------------------------------*}
{$IFDEF FPC}
{$mode delphi}
{$ENDIF}


INTERFACE

//Include statement
Uses
  GS.StoredObject.Buffer, GS.StoredObject.BaseTypes, GS.StoredObject.Stream,
  {$IFNDEF FPC}
  System.Generics.collections,
  GS.StoredObject.Core,
  {$ELSE}
  Generics.collections,
  GS.StoredObject.Types_UINT32,
  GS.StoredObject.Core_NonGenerics,
  {$ENDIF }
  classes, sysutils;

{*---------------------------------------------------*}
Type

TGRIDClientServerProtocolTransportBOManager = Class;
TGRIDC2SProtocolEntry = Class;
TGRIDC2SProtocolBase = Class;
TGRIDC2SAuth = Class;
TGRIDSC2StreamContent = Class;
TGRIDC2SMessaging = Class;
TGRIDC2SRPC = Class;
TGRIDS2CProtocolEntry = Class;
TGRIDS2CProtocolBase = Class;
TGRIDS2CAuth = Class;
TGRIDS2CStreamContent = Class;
TGRIDS2CMessaging = Class;
TGRIDS2CRPC = Class;
//TGRIDC2SObjectList = Class; Not used
//TGRIDS2CObjectList = Class; Not used

//---- Class TGRIDC2SProtocolEntry (2 Field(s) and 0 method(s))
TGRIDC2SProtocolEntry = Class
Protected
  {$REGION 'StoredObject Technical stuffs for TGRIDC2SProtocolEntry'}
  StoredProtoAppClasses : TofStoredObject_UInt32Key; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : UInt32;
  FClientProtocolVersion : TData_Def; //integer
  FContent : TData_Def; //TGridC2SObjectList

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : UInt32);
  Function GetObjKeyRef : UInt32;

  Procedure SetClientProtocolVersion(Value : Integer);
  Function GetClientProtocolVersion : Integer;
  Procedure SetContent(Index : Integer; Const Value : TGRIDC2SProtocolBase);
  Function GetContent(Index : Integer) : TGRIDC2SProtocolBase;
Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolTransportBOManager); Virtual;
  Procedure AddContent(aTGRIDC2SProtocolBase : TGRIDC2SProtocolBase);
  Procedure RemoveContent(aTGRIDC2SProtocolBase : TGRIDC2SProtocolBase);
  Function ContentCount : Integer;
  //Procedure IsContentExists(aTGRIDC2SProtocolBase : TGRIDC2SProtocolBase);
  Property Content[Index : Integer] : TGRIDC2SProtocolBase read GetContent Write SetContent;
Published
  Property ClientProtocolVersion : Integer read GetClientProtocolVersion Write SetClientProtocolVersion;
End;

//---- Class TGRIDC2SProtocolBase (0 Field(s) and 0 method(s))
TGRIDC2SProtocolBase = Class
  {$REGION 'StoredObject Technical stuffs for TGRIDC2SProtocolBase'}
  StoredProtoAppClasses : TofStoredObject_UInt32Key; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : UInt32;

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : UInt32);
  Function GetObjKeyRef : UInt32;

Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolTransportBOManager); Virtual;
End;

//---- Class TGRIDC2SAuth (2 Field(s) and 0 method(s))
TGRIDC2SAuth = Class(TGRIDC2SProtocolBase)
Protected
  {$REGION 'StoredObject Technical stuffs for TGRIDC2SAuth'}
  FUserName : TData_Def; //string
  FPassword : TData_Def; //string

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
  Procedure SetUserName(Value : String);
  Function GetUserName : String;
  Procedure SetPassword(Value : String);
  Function GetPassword : String;
Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolTransportBOManager); Virtual;
Published
  Property UserName : String read GetUserName Write SetUserName;
  Property Password : String read GetPassword Write SetPassword;
End;

//---- Class TGRIDSC2StreamContent (1 Field(s) and 0 method(s))
TGRIDSC2StreamContent = Class(TGRIDC2SProtocolBase)
Protected
  {$REGION 'StoredObject Technical stuffs for TGRIDSC2StreamContent'}
  FContent : TData_Def; //stream

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
  Procedure SetContent(Value : TStream);
  Function GetContent : TStream;
Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolTransportBOManager); Virtual;
Published
  Property Content : TStream read GetContent Write SetContent;
End;

//---- Class TGRIDC2SMessaging (0 Field(s) and 0 method(s))
TGRIDC2SMessaging = Class(TGRIDSC2StreamContent)
  {$REGION 'StoredObject Technical stuffs for TGRIDC2SMessaging'}

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolTransportBOManager); Virtual;
End;

//---- Class TGRIDC2SRPC (0 Field(s) and 0 method(s))
TGRIDC2SRPC = Class(TGRIDSC2StreamContent)
  {$REGION 'StoredObject Technical stuffs for TGRIDC2SRPC'}

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolTransportBOManager); Virtual;
End;

//---- Class TGRIDS2CProtocolEntry (2 Field(s) and 0 method(s))
TGRIDS2CProtocolEntry = Class
Protected
  {$REGION 'StoredObject Technical stuffs for TGRIDS2CProtocolEntry'}
  StoredProtoAppClasses : TofStoredObject_UInt32Key; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : UInt32;
  FServerProtocolVersion : TData_Def; //integer
  FContent : TData_Def; //TGridS2CObjectList

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : UInt32);
  Function GetObjKeyRef : UInt32;

  Procedure SetServerProtocolVersion(Value : Integer);
  Function GetServerProtocolVersion : Integer;
  Procedure SetContent(Index : Integer; Const Value : TGRIDS2CProtocolBase);
  Function GetContent(Index : Integer) : TGRIDS2CProtocolBase;
Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolTransportBOManager); Virtual;
  Procedure AddContent(aTGRIDS2CProtocolBase : TGRIDS2CProtocolBase);
  Procedure RemoveContent(aTGRIDS2CProtocolBase : TGRIDS2CProtocolBase);
  Function ContentCount : Integer;
  //Procedure IsContentExists(aTGRIDS2CProtocolBase : TGRIDS2CProtocolBase);
  Property Content[Index : Integer] : TGRIDS2CProtocolBase read GetContent Write SetContent;
Published
  Property ServerProtocolVersion : Integer read GetServerProtocolVersion Write SetServerProtocolVersion;
End;

//---- Class TGRIDS2CProtocolBase (0 Field(s) and 0 method(s))
TGRIDS2CProtocolBase = Class
  {$REGION 'StoredObject Technical stuffs for TGRIDS2CProtocolBase'}
  StoredProtoAppClasses : TofStoredObject_UInt32Key; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : UInt32;

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : UInt32);
  Function GetObjKeyRef : UInt32;

Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolTransportBOManager); Virtual;
End;

//---- Class TGRIDS2CAuth (3 Field(s) and 0 method(s))
TGRIDS2CAuth = Class(TGRIDS2CProtocolBase)
Protected
  {$REGION 'StoredObject Technical stuffs for TGRIDS2CAuth'}
  FApproved : TData_Def; //bool
  FDesapproveReaseon : TData_Def; //string
  FSessionID : TData_Def; //string

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
  Procedure SetApproved(Value : Boolean);
  Function GetApproved : Boolean;
  Procedure SetDesapproveReaseon(Value : String);
  Function GetDesapproveReaseon : String;
  Procedure SetSessionID(Value : String);
  Function GetSessionID : String;
Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolTransportBOManager); Virtual;
Published
  Property Approved : Boolean read GetApproved Write SetApproved;
  Property DesapproveReaseon : String read GetDesapproveReaseon Write SetDesapproveReaseon;
  Property SessionID : String read GetSessionID Write SetSessionID;
End;

//---- Class TGRIDS2CStreamContent (1 Field(s) and 0 method(s))
TGRIDS2CStreamContent = Class(TGRIDS2CProtocolBase)
Protected
  {$REGION 'StoredObject Technical stuffs for TGRIDS2CStreamContent'}
  FContent : TData_Def; //stream

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
  Procedure SetContent(Value : TStream);
  Function GetContent : TStream;
Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolTransportBOManager); Virtual;
Published
  Property Content : TStream read GetContent Write SetContent;
End;

//---- Class TGRIDS2CMessaging (0 Field(s) and 0 method(s))
TGRIDS2CMessaging = Class(TGRIDS2CStreamContent)
  {$REGION 'StoredObject Technical stuffs for TGRIDS2CMessaging'}

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolTransportBOManager); Virtual;
End;

//---- Class TGRIDS2CRPC (0 Field(s) and 0 method(s))
TGRIDS2CRPC = Class(TGRIDS2CStreamContent)
  {$REGION 'StoredObject Technical stuffs for TGRIDS2CRPC'}

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolTransportBOManager); Virtual;
End;

//---- Class List TGRIDC2SObjectList (of type TGRIDC2SProtocolBase) : NOT USED in StoredObject Mode

//---- Class List TGRIDS2CObjectList (of type TGRIDS2CProtocolBase) : NOT USED in StoredObject Mode



//------------------------------------------------------------
TGRIDClientServerProtocolTransportBOManager = class(TofStoredObjectClassManager_UInt32)
Protected
  Procedure InternalLoadCommon; Override;
Public
  Constructor Create; Virtual;
  Function BuildObject(aObjectClass : String; Const Guid : UInt32) : TObject; Override;
    Procedure PopulateObject( anObject : TObject; PropertyName, StringValue : String); Override;
    Procedure PopulateObjectStream( anObject : TObject; PropertyName : String; Value : TStream); Override;
  Procedure RegisterClass; Override;

end;


IMPLEMENTATION


//---- Class TGRIDC2SProtocolEntry

  Constructor TGRIDC2SProtocolEntry.Create(Const aManager : TGRIDClientServerProtocolTransportBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FClientProtocolVersion.FATI := -1;
    FContent.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDC2SProtocolEntry.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDC2SProtocolEntry,'TGRIDC2SProtocolEntry Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDC2SProtocolEntry.SetObjKeyRef(Value : UInt32);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetUInt32(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TGRIDC2SProtocolEntry.GetObjKeyRef : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetUInt32(Self, FObjKeyRef.FATI,Result);
  End;

  Procedure TGRIDC2SProtocolEntry.SetClientProtocolVersion(Value : Integer);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetInteger(Self, FObjKey,'ClientProtocolVersion',FClientProtocolVersion.FATI,FClientProtocolVersion.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDC2SProtocolEntry.SetClientProtocolVersion(Value : integer) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDC2SProtocolEntry.GetClientProtocolVersion : Integer;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetInteger(Self,FClientProtocolVersion.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDC2SProtocolEntry.GetClientProtocolVersion : integer --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDC2SProtocolEntry.SetContent(Index : Integer; Const Value : TGRIDC2SProtocolBase);
  var a : String;
      Tools : TList<UInt32>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Assert(Assigned(Value)); //Nil forbiden
    Tools :=  TList<UInt32>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfUint32(Self,FContent.FATI,Tools);
        if Tools.Count>=Index then
        begin
          Tools[Index] := Value.FObjKey;
          StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'Content',FContent.FATI,FContent.FData_Index,Tools);
        end
        else
        begin
          raise Exception.Create('Index overflow : Total Content object Count = '+IntToStr(Tools.Count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TGRIDC2SProtocolEntry.SetContent'+ E.Message);
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
  End;

  Function TGRIDC2SProtocolEntry.GetContent(Index : Integer) : TGRIDC2SProtocolBase;
  var a : String;
      Tools : TList<UInt32>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Tools :=  TList<UInt32>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfUInt32(Self,FContent.FATI,Tools);
        if (Tools.Count>Index) then
        Begin
          Result := TGRIDC2SProtocolBase(StoredProtoAppClasses.BusinessObjects[Tools[Index]]);
        End
        Else
        Begin
          Raise Exception.Create('Index overflow : Total Content count = '+IntToStr(Tools.count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TGRIDC2SProtocolEntry.GetContent : '+E.Message)
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
    if Result = nil then
      raise Exception.Create('TGRIDC2SProtocolEntry.GetContent('+IntToStr(Index)+') unassigned');
  End;


  Procedure TGRIDC2SProtocolEntry.AddContent(aTGRIDC2SProtocolBase : TGRIDC2SProtocolBase);
  var Tools : TList<UInt32>;
  Begin
    Assert(Assigned(aTGRIDC2SProtocolBase));
    Tools :=  TList<UInt32>.Create;
    try
      StoredProtoAppClasses.GetListOfUInt32(Self,FContent.FATI,Tools);
      Tools.Add(aTGRIDC2SProtocolBase.FObjKey); //No "if IndexOf()" test : Mutli-occurence is allowed (See AddExternalRef)
      StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'Content',FContent.FATI,FContent.FData_Index,Tools);
    finally
      FreeAndNil(Tools);
    end;
  end;

  Procedure TGRIDC2SProtocolEntry.RemoveContent(aTGRIDC2SProtocolBase : TGRIDC2SProtocolBase);
  var Tools : TList<UInt32>;
      lk : Int64;
  Begin
    Assert(Assigned(aTGRIDC2SProtocolBase));
    Tools :=  TList<UInt32>.Create;
    try
      StoredProtoAppClasses.GetListOfUInt32(Self,FContent.FATI,Tools);
      lk := Tools.IndexOf(aTGRIDC2SProtocolBase.FObjKey);
      if lk>-1 then
      begin
        Tools.Delete(lk);
        StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'Content',FContent.FATI,FContent.FData_Index,Tools);
      end;
    finally
      FreeAndNil(Tools);
    end;
  end;

  Function TGRIDC2SProtocolEntry.ContentCount : Integer;
  Begin
    Result := StoredProtoAppClasses.GetListItemCount(FContent.FData_Index);
  end;


//---- Class TGRIDC2SProtocolBase

  Constructor TGRIDC2SProtocolBase.Create(Const aManager : TGRIDClientServerProtocolTransportBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDC2SProtocolBase.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDC2SProtocolBase,'TGRIDC2SProtocolBase Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDC2SProtocolBase.SetObjKeyRef(Value : UInt32);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetUInt32(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TGRIDC2SProtocolBase.GetObjKeyRef : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetUInt32(Self, FObjKeyRef.FATI,Result);
  End;


//---- Class TGRIDC2SAuth

  Constructor TGRIDC2SAuth.Create(Const aManager : TGRIDClientServerProtocolTransportBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FUserName.FATI := -1;
    FPassword.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDC2SAuth.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDC2SAuth,'TGRIDC2SAuth Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDC2SAuth.SetUserName(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'UserName',FUserName.FATI,FUserName.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDC2SAuth.SetUserName(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDC2SAuth.GetUserName : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FUserName.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDC2SAuth.GetUserName : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDC2SAuth.SetPassword(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'Password',FPassword.FATI,FPassword.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDC2SAuth.SetPassword(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDC2SAuth.GetPassword : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FPassword.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDC2SAuth.GetPassword : string --> '+E.Message)
      end;
    end;
  End;


//---- Class TGRIDSC2StreamContent

  Constructor TGRIDSC2StreamContent.Create(Const aManager : TGRIDClientServerProtocolTransportBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FContent.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDSC2StreamContent.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDSC2StreamContent,'TGRIDSC2StreamContent Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDSC2StreamContent.SetContent(Value : TStream);
  var r : TArrayOfByte;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
      try
         SetLength(r,Value.Size);
         Value.ReadBuffer(Pointer(r)^,Value.Size);
         StoredProtoAppClasses.SeTArrayOfByte(Self, FObjKey,'Content',FContent.FATI,FContent.FData_Index,r);
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TGRIDSC2StreamContent.SetContent(Value : stream) --> '+E.Message)
        end;
      end;
  End;

  Function TGRIDSC2StreamContent.GetContent : TStream;
  var r : TArrayOfByte;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
       Result := Nil;
       StoredProtoAppClasses.GetArrayOfByte(Self,FContent.FATI,r);
       if length(r)>0 then
       Begin
         Result := TMemoryStream.Create;
         Result.WriteBuffer(Pointer(r)^,Length(r));
       end;
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDSC2StreamContent.GetContent : stream --> '+E.Message)
      end;
    end;
  End;


//---- Class TGRIDC2SMessaging

  Constructor TGRIDC2SMessaging.Create(Const aManager : TGRIDClientServerProtocolTransportBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FContent.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDC2SMessaging.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDC2SMessaging,'TGRIDC2SMessaging Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;


//---- Class TGRIDC2SRPC

  Constructor TGRIDC2SRPC.Create(Const aManager : TGRIDClientServerProtocolTransportBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FContent.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDC2SRPC.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDC2SRPC,'TGRIDC2SRPC Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;


//---- Class TGRIDS2CProtocolEntry

  Constructor TGRIDS2CProtocolEntry.Create(Const aManager : TGRIDClientServerProtocolTransportBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FServerProtocolVersion.FATI := -1;
    FContent.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDS2CProtocolEntry.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDS2CProtocolEntry,'TGRIDS2CProtocolEntry Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDS2CProtocolEntry.SetObjKeyRef(Value : UInt32);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetUInt32(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TGRIDS2CProtocolEntry.GetObjKeyRef : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetUInt32(Self, FObjKeyRef.FATI,Result);
  End;

  Procedure TGRIDS2CProtocolEntry.SetServerProtocolVersion(Value : Integer);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetInteger(Self, FObjKey,'ServerProtocolVersion',FServerProtocolVersion.FATI,FServerProtocolVersion.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDS2CProtocolEntry.SetServerProtocolVersion(Value : integer) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDS2CProtocolEntry.GetServerProtocolVersion : Integer;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetInteger(Self,FServerProtocolVersion.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDS2CProtocolEntry.GetServerProtocolVersion : integer --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDS2CProtocolEntry.SetContent(Index : Integer; Const Value : TGRIDS2CProtocolBase);
  var a : String;
      Tools : TList<UInt32>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Assert(Assigned(Value)); //Nil forbiden
    Tools :=  TList<UInt32>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfUint32(Self,FContent.FATI,Tools);
        if Tools.Count>=Index then
        begin
          Tools[Index] := Value.FObjKey;
          StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'Content',FContent.FATI,FContent.FData_Index,Tools);
        end
        else
        begin
          raise Exception.Create('Index overflow : Total Content object Count = '+IntToStr(Tools.Count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TGRIDS2CProtocolEntry.SetContent'+ E.Message);
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
  End;

  Function TGRIDS2CProtocolEntry.GetContent(Index : Integer) : TGRIDS2CProtocolBase;
  var a : String;
      Tools : TList<UInt32>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Tools :=  TList<UInt32>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfUInt32(Self,FContent.FATI,Tools);
        if (Tools.Count>Index) then
        Begin
          Result := TGRIDS2CProtocolBase(StoredProtoAppClasses.BusinessObjects[Tools[Index]]);
        End
        Else
        Begin
          Raise Exception.Create('Index overflow : Total Content count = '+IntToStr(Tools.count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TGRIDS2CProtocolEntry.GetContent : '+E.Message)
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
    if Result = nil then
      raise Exception.Create('TGRIDS2CProtocolEntry.GetContent('+IntToStr(Index)+') unassigned');
  End;


  Procedure TGRIDS2CProtocolEntry.AddContent(aTGRIDS2CProtocolBase : TGRIDS2CProtocolBase);
  var Tools : TList<UInt32>;
  Begin
    Assert(Assigned(aTGRIDS2CProtocolBase));
    Tools :=  TList<UInt32>.Create;
    try
      StoredProtoAppClasses.GetListOfUInt32(Self,FContent.FATI,Tools);
      Tools.Add(aTGRIDS2CProtocolBase.FObjKey); //No "if IndexOf()" test : Mutli-occurence is allowed (See AddExternalRef)
      StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'Content',FContent.FATI,FContent.FData_Index,Tools);
    finally
      FreeAndNil(Tools);
    end;
  end;

  Procedure TGRIDS2CProtocolEntry.RemoveContent(aTGRIDS2CProtocolBase : TGRIDS2CProtocolBase);
  var Tools : TList<UInt32>;
      lk : Int64;
  Begin
    Assert(Assigned(aTGRIDS2CProtocolBase));
    Tools :=  TList<UInt32>.Create;
    try
      StoredProtoAppClasses.GetListOfUInt32(Self,FContent.FATI,Tools);
      lk := Tools.IndexOf(aTGRIDS2CProtocolBase.FObjKey);
      if lk>-1 then
      begin
        Tools.Delete(lk);
        StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'Content',FContent.FATI,FContent.FData_Index,Tools);
      end;
    finally
      FreeAndNil(Tools);
    end;
  end;

  Function TGRIDS2CProtocolEntry.ContentCount : Integer;
  Begin
    Result := StoredProtoAppClasses.GetListItemCount(FContent.FData_Index);
  end;


//---- Class TGRIDS2CProtocolBase

  Constructor TGRIDS2CProtocolBase.Create(Const aManager : TGRIDClientServerProtocolTransportBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDS2CProtocolBase.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDS2CProtocolBase,'TGRIDS2CProtocolBase Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDS2CProtocolBase.SetObjKeyRef(Value : UInt32);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetUInt32(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TGRIDS2CProtocolBase.GetObjKeyRef : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetUInt32(Self, FObjKeyRef.FATI,Result);
  End;


//---- Class TGRIDS2CAuth

  Constructor TGRIDS2CAuth.Create(Const aManager : TGRIDClientServerProtocolTransportBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FApproved.FATI := -1;
    FDesapproveReaseon.FATI := -1;
    FSessionID.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDS2CAuth.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDS2CAuth,'TGRIDS2CAuth Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDS2CAuth.SetApproved(Value : Boolean);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetByte(Self, FObjKey,'Approved',FApproved.FATI,FApproved.FData_Index,Byte(Value));
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDS2CAuth.SetApproved(Value : bool) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDS2CAuth.GetApproved : Boolean;
  var b : Byte;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetByte(Self,FApproved.FATI,b);
      Result := Boolean(b);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDS2CAuth.GetApproved : bool --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDS2CAuth.SetDesapproveReaseon(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'DesapproveReaseon',FDesapproveReaseon.FATI,FDesapproveReaseon.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDS2CAuth.SetDesapproveReaseon(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDS2CAuth.GetDesapproveReaseon : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FDesapproveReaseon.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDS2CAuth.GetDesapproveReaseon : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDS2CAuth.SetSessionID(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'SessionID',FSessionID.FATI,FSessionID.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDS2CAuth.SetSessionID(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDS2CAuth.GetSessionID : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FSessionID.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDS2CAuth.GetSessionID : string --> '+E.Message)
      end;
    end;
  End;


//---- Class TGRIDS2CStreamContent

  Constructor TGRIDS2CStreamContent.Create(Const aManager : TGRIDClientServerProtocolTransportBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FContent.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDS2CStreamContent.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDS2CStreamContent,'TGRIDS2CStreamContent Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDS2CStreamContent.SetContent(Value : TStream);
  var r : TArrayOfByte;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
      try
         SetLength(r,Value.Size);
         Value.ReadBuffer(Pointer(r)^,Value.Size);
         StoredProtoAppClasses.SeTArrayOfByte(Self, FObjKey,'Content',FContent.FATI,FContent.FData_Index,r);
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TGRIDS2CStreamContent.SetContent(Value : stream) --> '+E.Message)
        end;
      end;
  End;

  Function TGRIDS2CStreamContent.GetContent : TStream;
  var r : TArrayOfByte;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
       Result := Nil;
       StoredProtoAppClasses.GetArrayOfByte(Self,FContent.FATI,r);
       if length(r)>0 then
       Begin
         Result := TMemoryStream.Create;
         Result.WriteBuffer(Pointer(r)^,Length(r));
       end;
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDS2CStreamContent.GetContent : stream --> '+E.Message)
      end;
    end;
  End;


//---- Class TGRIDS2CMessaging

  Constructor TGRIDS2CMessaging.Create(Const aManager : TGRIDClientServerProtocolTransportBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FContent.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDS2CMessaging.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDS2CMessaging,'TGRIDS2CMessaging Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;


//---- Class TGRIDS2CRPC

  Constructor TGRIDS2CRPC.Create(Const aManager : TGRIDClientServerProtocolTransportBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FContent.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDS2CRPC.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDS2CRPC,'TGRIDS2CRPC Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;


{TGRIDClientServerProtocolTransportBOManager}
//------------------------------------------------------------

Procedure TGRIDClientServerProtocolTransportBOManager.InternalLoadCommon;
var i : integer;
    cl : string;
    FAuditMem : Boolean;
    aTGRIDC2SProtocolEntry : TGRIDC2SProtocolEntry;
    aTGRIDC2SProtocolBase : TGRIDC2SProtocolBase;
    aTGRIDC2SAuth : TGRIDC2SAuth;
    aTGRIDSC2StreamContent : TGRIDSC2StreamContent;
    aTGRIDC2SMessaging : TGRIDC2SMessaging;
    aTGRIDC2SRPC : TGRIDC2SRPC;
    aTGRIDS2CProtocolEntry : TGRIDS2CProtocolEntry;
    aTGRIDS2CProtocolBase : TGRIDS2CProtocolBase;
    aTGRIDS2CAuth : TGRIDS2CAuth;
    aTGRIDS2CStreamContent : TGRIDS2CStreamContent;
    aTGRIDS2CMessaging : TGRIDS2CMessaging;
    aTGRIDS2CRPC : TGRIDS2CRPC;
    CurrentInstanceKey : UInt32;
    aSO : TofStoredObject_UInt32Key;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  CurrentInstanceKey := High(UInt32);
  aSO := TofStoredObject_UInt32Key(StoredObject);
  for i := Low(aSO.AllocationData.TableATI_Int) to High(aSO.AllocationData.TableATI_Int) do
  begin
    //Deleted object is ignored but still exists in the buffer : Ignore it.
    if aSO.AllocationData.TableATI_Int[i].MetaStatus = ToATIMetaStatus.omsDeleted then
      Continue;

    CurrentInstanceKey := aSO.AllocationData.TableATI_Int[i].InstanceIndex;

    if CurrentInstanceKey<>High(UInt32) then
    begin

      if Not( Assigned(aSO.LookForObject(CurrentInstanceKey)) ) then
      begin
        //Object does not exists yet : Build.

        //Create object.
        cl := aSO.DefinitionData.Classes[aSO.AllocationData.TableATI_Int[i].MetaClassIndex].ClassName;
        if cl = 'TGRIDC2SProtocolEntry' then
        begin
          aTGRIDC2SProtocolEntry := TGRIDC2SProtocolEntry.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDC2SProtocolEntry.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDC2SProtocolEntry.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDC2SProtocolEntry);
          end;
        end
        else
        if cl = 'TGRIDC2SProtocolBase' then
        begin
          aTGRIDC2SProtocolBase := TGRIDC2SProtocolBase.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDC2SProtocolBase.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDC2SProtocolBase.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDC2SProtocolBase);
          end;
        end
        else
        if cl = 'TGRIDC2SAuth' then
        begin
          aTGRIDC2SAuth := TGRIDC2SAuth.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDC2SAuth.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDC2SAuth.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDC2SAuth);
          end;
        end
        else
        if cl = 'TGRIDSC2StreamContent' then
        begin
          aTGRIDSC2StreamContent := TGRIDSC2StreamContent.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDSC2StreamContent.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDSC2StreamContent.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDSC2StreamContent);
          end;
        end
        else
        if cl = 'TGRIDC2SMessaging' then
        begin
          aTGRIDC2SMessaging := TGRIDC2SMessaging.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDC2SMessaging.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDC2SMessaging.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDC2SMessaging);
          end;
        end
        else
        if cl = 'TGRIDC2SRPC' then
        begin
          aTGRIDC2SRPC := TGRIDC2SRPC.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDC2SRPC.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDC2SRPC.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDC2SRPC);
          end;
        end
        else
        if cl = 'TGRIDS2CProtocolEntry' then
        begin
          aTGRIDS2CProtocolEntry := TGRIDS2CProtocolEntry.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDS2CProtocolEntry.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDS2CProtocolEntry.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDS2CProtocolEntry);
          end;
        end
        else
        if cl = 'TGRIDS2CProtocolBase' then
        begin
          aTGRIDS2CProtocolBase := TGRIDS2CProtocolBase.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDS2CProtocolBase.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDS2CProtocolBase.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDS2CProtocolBase);
          end;
        end
        else
        if cl = 'TGRIDS2CAuth' then
        begin
          aTGRIDS2CAuth := TGRIDS2CAuth.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDS2CAuth.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDS2CAuth.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDS2CAuth);
          end;
        end
        else
        if cl = 'TGRIDS2CStreamContent' then
        begin
          aTGRIDS2CStreamContent := TGRIDS2CStreamContent.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDS2CStreamContent.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDS2CStreamContent.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDS2CStreamContent);
          end;
        end
        else
        if cl = 'TGRIDS2CMessaging' then
        begin
          aTGRIDS2CMessaging := TGRIDS2CMessaging.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDS2CMessaging.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDS2CMessaging.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDS2CMessaging);
          end;
        end
        else
        if cl = 'TGRIDS2CRPC' then
        begin
          aTGRIDS2CRPC := TGRIDS2CRPC.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDS2CRPC.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDS2CRPC.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDS2CRPC);
          end;
        end
        else
        begin
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 0 then //TGRIDC2SProtocolEntry
      begin
        aTGRIDC2SProtocolEntry := TGRIDC2SProtocolEntry(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDC2SProtocolEntry class.
        begin
          aTGRIDC2SProtocolEntry.FObjKeyRef.FATI := i;
          aTGRIDC2SProtocolEntry.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //ClientProtocolVersion
        begin
          aTGRIDC2SProtocolEntry.FClientProtocolVersion.FATI := i;
          aTGRIDC2SProtocolEntry.FClientProtocolVersion.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //Content
        begin
          aTGRIDC2SProtocolEntry.FContent.FATI := i;
          aTGRIDC2SProtocolEntry.FContent.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 1 then //TGRIDC2SProtocolBase
      begin
        aTGRIDC2SProtocolBase := TGRIDC2SProtocolBase(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDC2SProtocolBase class.
        begin
          aTGRIDC2SProtocolBase.FObjKeyRef.FATI := i;
          aTGRIDC2SProtocolBase.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 2 then //TGRIDC2SAuth
      begin
        aTGRIDC2SAuth := TGRIDC2SAuth(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDC2SAuth class.
        begin
          aTGRIDC2SAuth.FObjKeyRef.FATI := i;
          aTGRIDC2SAuth.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //UserName
        begin
          aTGRIDC2SAuth.FUserName.FATI := i;
          aTGRIDC2SAuth.FUserName.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //Password
        begin
          aTGRIDC2SAuth.FPassword.FATI := i;
          aTGRIDC2SAuth.FPassword.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 3 then //TGRIDSC2StreamContent
      begin
        aTGRIDSC2StreamContent := TGRIDSC2StreamContent(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDSC2StreamContent class.
        begin
          aTGRIDSC2StreamContent.FObjKeyRef.FATI := i;
          aTGRIDSC2StreamContent.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //Content
        begin
          aTGRIDSC2StreamContent.FContent.FATI := i;
          aTGRIDSC2StreamContent.FContent.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 4 then //TGRIDC2SMessaging
      begin
        aTGRIDC2SMessaging := TGRIDC2SMessaging(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDC2SMessaging class.
        begin
          aTGRIDC2SMessaging.FObjKeyRef.FATI := i;
          aTGRIDC2SMessaging.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //Content from TGRIDSC2StreamContent class.
        begin
          aTGRIDC2SMessaging.FContent.FATI := i;
          aTGRIDC2SMessaging.FContent.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 5 then //TGRIDC2SRPC
      begin
        aTGRIDC2SRPC := TGRIDC2SRPC(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDC2SRPC class.
        begin
          aTGRIDC2SRPC.FObjKeyRef.FATI := i;
          aTGRIDC2SRPC.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //Content from TGRIDSC2StreamContent class.
        begin
          aTGRIDC2SRPC.FContent.FATI := i;
          aTGRIDC2SRPC.FContent.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 6 then //TGRIDS2CProtocolEntry
      begin
        aTGRIDS2CProtocolEntry := TGRIDS2CProtocolEntry(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDS2CProtocolEntry class.
        begin
          aTGRIDS2CProtocolEntry.FObjKeyRef.FATI := i;
          aTGRIDS2CProtocolEntry.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //ServerProtocolVersion
        begin
          aTGRIDS2CProtocolEntry.FServerProtocolVersion.FATI := i;
          aTGRIDS2CProtocolEntry.FServerProtocolVersion.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //Content
        begin
          aTGRIDS2CProtocolEntry.FContent.FATI := i;
          aTGRIDS2CProtocolEntry.FContent.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 7 then //TGRIDS2CProtocolBase
      begin
        aTGRIDS2CProtocolBase := TGRIDS2CProtocolBase(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDS2CProtocolBase class.
        begin
          aTGRIDS2CProtocolBase.FObjKeyRef.FATI := i;
          aTGRIDS2CProtocolBase.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 8 then //TGRIDS2CAuth
      begin
        aTGRIDS2CAuth := TGRIDS2CAuth(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDS2CAuth class.
        begin
          aTGRIDS2CAuth.FObjKeyRef.FATI := i;
          aTGRIDS2CAuth.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //Approved
        begin
          aTGRIDS2CAuth.FApproved.FATI := i;
          aTGRIDS2CAuth.FApproved.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //DesapproveReaseon
        begin
          aTGRIDS2CAuth.FDesapproveReaseon.FATI := i;
          aTGRIDS2CAuth.FDesapproveReaseon.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 3 then //SessionID
        begin
          aTGRIDS2CAuth.FSessionID.FATI := i;
          aTGRIDS2CAuth.FSessionID.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 9 then //TGRIDS2CStreamContent
      begin
        aTGRIDS2CStreamContent := TGRIDS2CStreamContent(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDS2CStreamContent class.
        begin
          aTGRIDS2CStreamContent.FObjKeyRef.FATI := i;
          aTGRIDS2CStreamContent.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //Content
        begin
          aTGRIDS2CStreamContent.FContent.FATI := i;
          aTGRIDS2CStreamContent.FContent.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 10 then //TGRIDS2CMessaging
      begin
        aTGRIDS2CMessaging := TGRIDS2CMessaging(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDS2CMessaging class.
        begin
          aTGRIDS2CMessaging.FObjKeyRef.FATI := i;
          aTGRIDS2CMessaging.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //Content from TGRIDS2CStreamContent class.
        begin
          aTGRIDS2CMessaging.FContent.FATI := i;
          aTGRIDS2CMessaging.FContent.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 11 then //TGRIDS2CRPC
      begin
        aTGRIDS2CRPC := TGRIDS2CRPC(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDS2CRPC class.
        begin
          aTGRIDS2CRPC.FObjKeyRef.FATI := i;
          aTGRIDS2CRPC.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //Content from TGRIDS2CStreamContent class.
        begin
          aTGRIDS2CRPC.FContent.FATI := i;
          aTGRIDS2CRPC.FContent.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;


    end
    else
    begin
      Break; //End of array list in Instance = -1
    end;
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
  StoredObject.SetModified(False);
end;

Function TGRIDClientServerProtocolTransportBOManager.BuildObject(aObjectClass : String; Const Guid : UInt32) : TObject;
var i : Integer;
    FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
 if aObjectClass = 'TGRIDC2SProtocolEntry' then
 begin
   Result := TGRIDC2SProtocolEntry.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDC2SProtocolEntry(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TGRIDC2SProtocolBase' then
 begin
   Result := TGRIDC2SProtocolBase.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDC2SProtocolBase(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TGRIDC2SAuth' then
 begin
   Result := TGRIDC2SAuth.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDC2SAuth(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TGRIDSC2StreamContent' then
 begin
   Result := TGRIDSC2StreamContent.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDSC2StreamContent(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TGRIDC2SMessaging' then
 begin
   Result := TGRIDC2SMessaging.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDC2SMessaging(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TGRIDC2SRPC' then
 begin
   Result := TGRIDC2SRPC.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDC2SRPC(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TGRIDS2CProtocolEntry' then
 begin
   Result := TGRIDS2CProtocolEntry.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDS2CProtocolEntry(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TGRIDS2CProtocolBase' then
 begin
   Result := TGRIDS2CProtocolBase.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDS2CProtocolBase(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TGRIDS2CAuth' then
 begin
   Result := TGRIDS2CAuth.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDS2CAuth(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TGRIDS2CStreamContent' then
 begin
   Result := TGRIDS2CStreamContent.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDS2CStreamContent(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TGRIDS2CMessaging' then
 begin
   Result := TGRIDS2CMessaging.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDS2CMessaging(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TGRIDS2CRPC' then
 begin
   Result := TGRIDS2CRPC.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDS2CRPC(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;

Constructor TGRIDClientServerProtocolTransportBOManager.Create;
Begin
  StoredObject := TofStoredObject_UInt32Key.Create;
  TofStoredObject_UInt32Key(StoredObject).StoredObjectClassManager := Self;
  RegisterClass;
end;

Procedure TGRIDClientServerProtocolTransportBOManager.PopulateObject( anObject : TObject; PropertyName, StringValue : String);
var i : integer;
    s : TStringList;
    ls : TList<String>;
Begin
if anObject Is TGRIDC2SProtocolEntry then
begin
  if length(StringValue)=0 then
    StringValue := '0';
  if Lowercase(PropertyName) = 'clientprotocolversion' then
  begin
    TGRIDC2SProtocolEntry(anObject).ClientProtocolVersion := StrToInt(StringValue);
  end;
  if Lowercase(PropertyName) = 'content' then
  begin
  end;
end;
if anObject Is TGRIDC2SProtocolBase then
begin
end;
if anObject Is TGRIDC2SAuth then
begin
  if Lowercase(PropertyName) = 'username' then
  begin
    TGRIDC2SAuth(anObject).UserName := StringValue;
  end;
  if Lowercase(PropertyName) = 'password' then
  begin
    TGRIDC2SAuth(anObject).Password := StringValue;
  end;
end;
if anObject Is TGRIDSC2StreamContent then
begin
  //if Lowercase(PropertyName) = 'content' then
  //begin
  //  TGRIDSC2StreamContent(anObject).Content := ToStream(StringValue);
  //end;
end;
if anObject Is TGRIDC2SMessaging then
begin
end;
if anObject Is TGRIDC2SRPC then
begin
end;
if anObject Is TGRIDS2CProtocolEntry then
begin
  if length(StringValue)=0 then
    StringValue := '0';
  if Lowercase(PropertyName) = 'serverprotocolversion' then
  begin
    TGRIDS2CProtocolEntry(anObject).ServerProtocolVersion := StrToInt(StringValue);
  end;
  if Lowercase(PropertyName) = 'content' then
  begin
  end;
end;
if anObject Is TGRIDS2CProtocolBase then
begin
end;
if anObject Is TGRIDS2CAuth then
begin
  if length(StringValue)=0 then
    StringValue := '0';
  if Lowercase(PropertyName) = 'approved' then
  begin
    TGRIDS2CAuth(anObject).Approved := Boolean(StrToInt(StringValue));
  end;
  if Lowercase(PropertyName) = 'desapprovereaseon' then
  begin
    TGRIDS2CAuth(anObject).DesapproveReaseon := StringValue;
  end;
  if Lowercase(PropertyName) = 'sessionid' then
  begin
    TGRIDS2CAuth(anObject).SessionID := StringValue;
  end;
end;
if anObject Is TGRIDS2CStreamContent then
begin
  //if Lowercase(PropertyName) = 'content' then
  //begin
  //  TGRIDS2CStreamContent(anObject).Content := ToStream(StringValue);
  //end;
end;
if anObject Is TGRIDS2CMessaging then
begin
end;
if anObject Is TGRIDS2CRPC then
begin
end;
end;
Procedure TGRIDClientServerProtocolTransportBOManager.PopulateObjectStream( anObject : TObject; PropertyName : String; Value : TStream);
Begin
if anObject Is TGRIDC2SProtocolEntry then
begin
end;
if anObject Is TGRIDC2SProtocolBase then
begin
end;
if anObject Is TGRIDC2SAuth then
begin
end;
if anObject Is TGRIDSC2StreamContent then
begin
  if Lowercase(PropertyName) = 'content' then
  begin
    Value.Position := 0;
    TGRIDSC2StreamContent(anObject).Content := Value;
  end;
end;
if anObject Is TGRIDC2SMessaging then
begin
end;
if anObject Is TGRIDC2SRPC then
begin
end;
if anObject Is TGRIDS2CProtocolEntry then
begin
end;
if anObject Is TGRIDS2CProtocolBase then
begin
end;
if anObject Is TGRIDS2CAuth then
begin
end;
if anObject Is TGRIDS2CStreamContent then
begin
  if Lowercase(PropertyName) = 'content' then
  begin
    Value.Position := 0;
    TGRIDS2CStreamContent(anObject).Content := Value;
  end;
end;
if anObject Is TGRIDS2CMessaging then
begin
end;
if anObject Is TGRIDS2CRPC then
begin
end;
end;

Procedure TGRIDClientServerProtocolTransportBOManager.RegisterClass;
Begin
  StoredObject.ClearAllData(True);
  StoredObject.RegisterClass('TGRIDC2SProtocolEntry');
  StoredObject.RegisterProperty('TGRIDC2SProtocolEntry','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDC2SProtocolEntry','ClientProtocolVersion',ofssInteger);
  StoredObject.RegisterProperty('TGRIDC2SProtocolEntry','Content',ofssObjectList);
  StoredObject.RegisterClass('TGRIDC2SProtocolBase');
  StoredObject.RegisterProperty('TGRIDC2SProtocolBase','ObjKeyRef',ofssString);
  StoredObject.RegisterClass('TGRIDC2SAuth');
  StoredObject.RegisterProperty('TGRIDC2SAuth','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDC2SAuth','UserName',ofssString);
  StoredObject.RegisterProperty('TGRIDC2SAuth','Password',ofssString);
  StoredObject.RegisterClass('TGRIDSC2StreamContent');
  StoredObject.RegisterProperty('TGRIDSC2StreamContent','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDSC2StreamContent','Content',ofssBlob);
  StoredObject.RegisterClass('TGRIDC2SMessaging');
  StoredObject.RegisterProperty('TGRIDC2SMessaging','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDC2SMessaging','Content',ofssBlob); //From TGRIDSC2StreamContent
  StoredObject.RegisterClass('TGRIDC2SRPC');
  StoredObject.RegisterProperty('TGRIDC2SRPC','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDC2SRPC','Content',ofssBlob); //From TGRIDSC2StreamContent
  StoredObject.RegisterClass('TGRIDS2CProtocolEntry');
  StoredObject.RegisterProperty('TGRIDS2CProtocolEntry','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDS2CProtocolEntry','ServerProtocolVersion',ofssInteger);
  StoredObject.RegisterProperty('TGRIDS2CProtocolEntry','Content',ofssObjectList);
  StoredObject.RegisterClass('TGRIDS2CProtocolBase');
  StoredObject.RegisterProperty('TGRIDS2CProtocolBase','ObjKeyRef',ofssString);
  StoredObject.RegisterClass('TGRIDS2CAuth');
  StoredObject.RegisterProperty('TGRIDS2CAuth','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDS2CAuth','Approved',ofssBoolean);
  StoredObject.RegisterProperty('TGRIDS2CAuth','DesapproveReaseon',ofssString);
  StoredObject.RegisterProperty('TGRIDS2CAuth','SessionID',ofssString);
  StoredObject.RegisterClass('TGRIDS2CStreamContent');
  StoredObject.RegisterProperty('TGRIDS2CStreamContent','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDS2CStreamContent','Content',ofssBlob);
  StoredObject.RegisterClass('TGRIDS2CMessaging');
  StoredObject.RegisterProperty('TGRIDS2CMessaging','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDS2CMessaging','Content',ofssBlob); //From TGRIDS2CStreamContent
  StoredObject.RegisterClass('TGRIDS2CRPC');
  StoredObject.RegisterProperty('TGRIDS2CRPC','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDS2CRPC','Content',ofssBlob); //From TGRIDS2CStreamContent
end;



End.


//--------- Original UpScript
{
project name GRIDClientServerProtocolTransportBO

include classes sysutils

def forward
TGRIDC2SProtocolEntry
TGRIDC2SProtocolBase
  TGRIDC2SAuth
  TGRIDC2SMessaging
  TGRIDC2SRPC

TGRIDS2CProtocolEntry
TGRIDS2CProtocolBase
  TGRIDS2CAuth
  TGRIDS2CMessaging
  TGRIDS2CRPC

TGRIDC2SObjectList
TGRIDS2CObjectList

end


define class TGRIDC2SProtocolEntry
ClientProtocolVersion integer
Content TGridC2SObjectList
end

define class TGRIDC2SProtocolBase
end

  define class TGRIDC2SAuth herits from TGRIDC2SProtocolBase
     UserName Password string
  end

  define class TGRIDSC2StreamContent herits from TGRIDC2SProtocolBase
    Content stream
  end

    define class TGRIDC2SMessaging herits from TGRIDSC2StreamContent
  end

    define class TGRIDC2SRPC herits from TGRIDSC2StreamContent
  end


define class TGRIDS2CProtocolEntry
ServerProtocolVersion integer
Content TGridS2CObjectList
end

define class TGRIDS2CProtocolBase
end

  define class TGRIDS2CAuth  herits from TGRIDS2CProtocolBase
    Approved bool
    DesapproveReaseon string
    SessionID string
  end

  define class TGRIDS2CStreamContent herits from TGRIDS2CProtocolBase
    Content stream
  end


  define class TGRIDS2CMessaging herits from TGRIDS2CStreamContent
  end

  define class TGRIDS2CRPC herits from TGRIDS2CStreamContent
  end

define classlist TGRIDC2SObjectList of TGRIDC2SProtocolBase
define classlist TGRIDS2CObjectList of TGRIDS2CProtocolBase


}

