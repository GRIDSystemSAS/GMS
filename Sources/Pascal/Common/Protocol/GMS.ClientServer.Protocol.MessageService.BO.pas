{*---------------------------------------------------*}
// UpScript Translator (ObjectPascal for StoredObject) AutoGenerated file.
{*---------------------------------------------------*}


Unit GMS.ClientServer.Protocol.MessageService.BO;
{*---------------------------------------------------*}
{$IFDEF FPC}
{$mode delphi}
{$ENDIF}


INTERFACE

//Include statement
Uses
  GS.StoredObject.Buffer, GS.StoredObject.BaseTypes, GS.StoredObject.Stream,
  {$IFNDEF FPC}
  System.Generics.collections,
  GS.StoredObject.Core,
  {$ELSE}
  Generics.collections,
  GS.StoredObject.Types_UINT32,
  GS.StoredObject.Core_NonGenerics,
  {$ENDIF }
  classes, sysutils;


{*---------------------------------------------------*}
Type

TGRIDClientServerProtocolMessageServiceManager = Class;
TGRIDMessagingService = Class;
TGRIDMessage = Class;
TGRIDMessageSystem = Class;
TGRIDMessageSystemChannelRelated = Class;
TGRIDMessageSubscription = Class;
TGRIDMessageUnsubscription = Class;
TGRIDMessageGetMsg = Class;
TGRIDMessageGetMsgReply = Class;

//---- Enum TGRIDMessageGetMsgReplyCode (3 enumerate(s))
TGRIDMessageGetMsgReplyCode = (gmrNoMessageOnServer,gmrStillMessagePendingOnServer,gmrFail);

//---- Class TGRIDMessagingService (3 Field(s) and 0 method(s))
TGRIDMessagingService = Class
Protected
  {$REGION 'StoredObject Technical stuffs for TGRIDMessagingService'}
  StoredProtoAppClasses : TofStoredObject_UInt32Key; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : UInt32;
  FId : TData_Def; //string
  FChannel : TData_Def; //string
  FBuffer : TData_Def; //stream

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : UInt32);
  Function GetObjKeyRef : UInt32;

  Procedure SetId(Value : String);
  Function GetId : String;
  Procedure SetChannel(Value : String);
  Function GetChannel : String;
  Procedure SetBuffer(Value : TStream);
  Function GetBuffer : TStream;
Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolMessageServiceManager); Virtual;
Published
  Property Id : String read GetId Write SetId;
  Property Channel : String read GetChannel Write SetChannel;
  Property Buffer : TStream read GetBuffer Write SetBuffer;
End;

//---- Class TGRIDMessage (0 Field(s) and 0 method(s))
TGRIDMessage = Class(TGRIDMessagingService)
  {$REGION 'StoredObject Technical stuffs for TGRIDMessage'}

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolMessageServiceManager); Virtual;
End;

//---- Class TGRIDMessageSystem (0 Field(s) and 0 method(s))
TGRIDMessageSystem = Class
  {$REGION 'StoredObject Technical stuffs for TGRIDMessageSystem'}
  StoredProtoAppClasses : TofStoredObject_UInt32Key; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : UInt32;

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : UInt32);
  Function GetObjKeyRef : UInt32;

Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolMessageServiceManager); Virtual;
End;

//---- Class TGRIDMessageSystemChannelRelated (1 Field(s) and 0 method(s))
TGRIDMessageSystemChannelRelated = Class(TGRIDMessageSystem)
Protected
  {$REGION 'StoredObject Technical stuffs for TGRIDMessageSystemChannelRelated'}
  FTargetChannel : TData_Def; //string

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
  Procedure SetTargetChannel(Value : String);
  Function GetTargetChannel : String;
Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolMessageServiceManager); Virtual;
Published
  Property TargetChannel : String read GetTargetChannel Write SetTargetChannel;
End;

//---- Class TGRIDMessageSubscription (0 Field(s) and 0 method(s))
TGRIDMessageSubscription = Class(TGRIDMessageSystemChannelRelated)
  {$REGION 'StoredObject Technical stuffs for TGRIDMessageSubscription'}

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolMessageServiceManager); Virtual;
End;

//---- Class TGRIDMessageUnsubscription (0 Field(s) and 0 method(s))
TGRIDMessageUnsubscription = Class(TGRIDMessageSystemChannelRelated)
  {$REGION 'StoredObject Technical stuffs for TGRIDMessageUnsubscription'}

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolMessageServiceManager); Virtual;
End;

//---- Class TGRIDMessageGetMsg (1 Field(s) and 0 method(s))
TGRIDMessageGetMsg = Class(TGRIDMessageSystem)
Protected
  {$REGION 'StoredObject Technical stuffs for TGRIDMessageGetMsg'}
  FWaitDelay : TData_Def; //integer

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
  Procedure SetWaitDelay(Value : Integer);
  Function GetWaitDelay : Integer;
Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolMessageServiceManager); Virtual;
Published
  Property WaitDelay : Integer read GetWaitDelay Write SetWaitDelay;
End;

//---- Class TGRIDMessageGetMsgReply (2 Field(s) and 0 method(s))
TGRIDMessageGetMsgReply = Class(TGRIDMessageSystem)
Protected
  {$REGION 'StoredObject Technical stuffs for TGRIDMessageGetMsgReply'}
  FCode : TData_Def; //TGRIDMessageGetMsgReplyCode
  FInformation : TData_Def; //string

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;
  Procedure SetCode(Value : TGRIDMessageGetMsgReplyCode);
  Function GetCode : TGRIDMessageGetMsgReplyCode;
  Procedure SetInformation(Value : String);
  Function GetInformation : String;
Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolMessageServiceManager); Virtual;
Published
  Property Code : TGRIDMessageGetMsgReplyCode read GetCode Write SetCode;
  Property Information : String read GetInformation Write SetInformation;
End;



//------------------------------------------------------------
TGRIDClientServerProtocolMessageServiceManager = class(TofStoredObjectClassManager_UInt32)
Protected
  Procedure InternalLoadCommon; Override;
Public
  Constructor Create; Virtual;
  Function BuildObject(aObjectClass : String; Const Guid : UInt32) : TObject; Override;
    Procedure PopulateObject( anObject : TObject; PropertyName, StringValue : String); Override;
    Procedure PopulateObjectStream( anObject : TObject; PropertyName : String; Value : TStream); Override;
  Procedure RegisterClass; Override;

end;


IMPLEMENTATION


//---- Class TGRIDMessagingService

  Constructor TGRIDMessagingService.Create(Const aManager : TGRIDClientServerProtocolMessageServiceManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FId.FATI := -1;
    FChannel.FATI := -1;
    FBuffer.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDMessagingService.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDMessagingService,'TGRIDMessagingService Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDMessagingService.SetObjKeyRef(Value : UInt32);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetUInt32(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TGRIDMessagingService.GetObjKeyRef : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetUInt32(Self, FObjKeyRef.FATI,Result);
  End;

  Procedure TGRIDMessagingService.SetId(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'Id',FId.FATI,FId.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDMessagingService.SetId(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDMessagingService.GetId : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FId.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDMessagingService.GetId : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDMessagingService.SetChannel(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'Channel',FChannel.FATI,FChannel.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDMessagingService.SetChannel(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDMessagingService.GetChannel : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FChannel.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDMessagingService.GetChannel : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDMessagingService.SetBuffer(Value : TStream);
  var r : TArrayOfByte;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
      try
         SetLength(r,Value.Size);
         Value.ReadBuffer(Pointer(r)^,Value.Size);
         StoredProtoAppClasses.SeTArrayOfByte(Self, FObjKey,'Buffer',FBuffer.FATI,FBuffer.FData_Index,r);
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TGRIDMessagingService.SetBuffer(Value : stream) --> '+E.Message)
        end;
      end;
  End;

  Function TGRIDMessagingService.GetBuffer : TStream;
  var r : TArrayOfByte;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
       Result := Nil;
       StoredProtoAppClasses.GetArrayOfByte(Self,FBuffer.FATI,r);
       if length(r)>0 then
       Begin
         Result := TMemoryStream.Create;
         Result.WriteBuffer(Pointer(r)^,Length(r));
       end;
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDMessagingService.GetBuffer : stream --> '+E.Message)
      end;
    end;
  End;


//---- Class TGRIDMessage

  Constructor TGRIDMessage.Create(Const aManager : TGRIDClientServerProtocolMessageServiceManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FId.FATI := -1;
    FChannel.FATI := -1;
    FBuffer.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDMessage.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDMessage,'TGRIDMessage Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;


//---- Class TGRIDMessageSystem

  Constructor TGRIDMessageSystem.Create(Const aManager : TGRIDClientServerProtocolMessageServiceManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDMessageSystem.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDMessageSystem,'TGRIDMessageSystem Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDMessageSystem.SetObjKeyRef(Value : UInt32);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetUInt32(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TGRIDMessageSystem.GetObjKeyRef : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetUInt32(Self, FObjKeyRef.FATI,Result);
  End;


//---- Class TGRIDMessageSystemChannelRelated

  Constructor TGRIDMessageSystemChannelRelated.Create(Const aManager : TGRIDClientServerProtocolMessageServiceManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FTargetChannel.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDMessageSystemChannelRelated.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDMessageSystemChannelRelated,'TGRIDMessageSystemChannelRelated Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDMessageSystemChannelRelated.SetTargetChannel(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'TargetChannel',FTargetChannel.FATI,FTargetChannel.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDMessageSystemChannelRelated.SetTargetChannel(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDMessageSystemChannelRelated.GetTargetChannel : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FTargetChannel.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDMessageSystemChannelRelated.GetTargetChannel : string --> '+E.Message)
      end;
    end;
  End;


//---- Class TGRIDMessageSubscription

  Constructor TGRIDMessageSubscription.Create(Const aManager : TGRIDClientServerProtocolMessageServiceManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FTargetChannel.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDMessageSubscription.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDMessageSubscription,'TGRIDMessageSubscription Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;


//---- Class TGRIDMessageUnsubscription

  Constructor TGRIDMessageUnsubscription.Create(Const aManager : TGRIDClientServerProtocolMessageServiceManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FTargetChannel.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDMessageUnsubscription.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDMessageUnsubscription,'TGRIDMessageUnsubscription Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;


//---- Class TGRIDMessageGetMsg

  Constructor TGRIDMessageGetMsg.Create(Const aManager : TGRIDClientServerProtocolMessageServiceManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FWaitDelay.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDMessageGetMsg.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDMessageGetMsg,'TGRIDMessageGetMsg Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDMessageGetMsg.SetWaitDelay(Value : Integer);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetInteger(Self, FObjKey,'WaitDelay',FWaitDelay.FATI,FWaitDelay.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDMessageGetMsg.SetWaitDelay(Value : integer) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDMessageGetMsg.GetWaitDelay : Integer;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetInteger(Self,FWaitDelay.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDMessageGetMsg.GetWaitDelay : integer --> '+E.Message)
      end;
    end;
  End;


//---- Class TGRIDMessageGetMsgReply

  Constructor TGRIDMessageGetMsgReply.Create(Const aManager : TGRIDClientServerProtocolMessageServiceManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FCode.FATI := -1;
    FInformation.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDMessageGetMsgReply.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDMessageGetMsgReply,'TGRIDMessageGetMsgReply Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDMessageGetMsgReply.SetCode(Value : TGRIDMessageGetMsgReplyCode);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetByte(Self, FObjKey,'Code',FCode.FATI,FCode.FData_Index,Byte(Value));
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDMessageGetMsgReply.SetCode(Value : TGRIDMessageGetMsgReplyCode) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDMessageGetMsgReply.GetCode : TGRIDMessageGetMsgReplyCode;
  var R : Byte;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetByte(Self,FCode.FATI,R);
      Result :=TGRIDMessageGetMsgReplyCode(R);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDMessageGetMsgReply.GetCode : TGRIDMessageGetMsgReplyCode --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDMessageGetMsgReply.SetInformation(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'Information',FInformation.FATI,FInformation.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDMessageGetMsgReply.SetInformation(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDMessageGetMsgReply.GetInformation : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FInformation.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDMessageGetMsgReply.GetInformation : string --> '+E.Message)
      end;
    end;
  End;


{TGRIDClientServerProtocolMessageServiceManager}
//------------------------------------------------------------

Procedure TGRIDClientServerProtocolMessageServiceManager.InternalLoadCommon;
var i : integer;
    cl : string;
    FAuditMem : Boolean;
    aTGRIDMessagingService : TGRIDMessagingService;
    aTGRIDMessage : TGRIDMessage;
    aTGRIDMessageSystem : TGRIDMessageSystem;
    aTGRIDMessageSystemChannelRelated : TGRIDMessageSystemChannelRelated;
    aTGRIDMessageSubscription : TGRIDMessageSubscription;
    aTGRIDMessageUnsubscription : TGRIDMessageUnsubscription;
    aTGRIDMessageGetMsg : TGRIDMessageGetMsg;
    aTGRIDMessageGetMsgReply : TGRIDMessageGetMsgReply;
    CurrentInstanceKey : UInt32;
    aSO : TofStoredObject_UInt32Key;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  CurrentInstanceKey := High(UInt32);
  aSO := TofStoredObject_UInt32Key(StoredObject);
  for i := Low(aSO.AllocationData.TableATI_Int) to High(aSO.AllocationData.TableATI_Int) do
  begin
    //Deleted object is ignored but still exists in the buffer : Ignore it.
    if aSO.AllocationData.TableATI_Int[i].MetaStatus = ToATIMetaStatus.omsDeleted then
      Continue;

    CurrentInstanceKey := aSO.AllocationData.TableATI_Int[i].InstanceIndex;

    if CurrentInstanceKey<>High(UInt32) then
    begin

      if Not( Assigned(aSO.LookForObject(CurrentInstanceKey)) ) then
      begin
        //Object does not exists yet : Build.

        //Create object.
        cl := aSO.DefinitionData.Classes[aSO.AllocationData.TableATI_Int[i].MetaClassIndex].ClassName;
        if cl = 'TGRIDMessagingService' then
        begin
          aTGRIDMessagingService := TGRIDMessagingService.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDMessagingService.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDMessagingService.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDMessagingService);
          end;
        end
        else
        if cl = 'TGRIDMessage' then
        begin
          aTGRIDMessage := TGRIDMessage.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDMessage.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDMessage.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDMessage);
          end;
        end
        else
        if cl = 'TGRIDMessageSystem' then
        begin
          aTGRIDMessageSystem := TGRIDMessageSystem.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDMessageSystem.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDMessageSystem.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDMessageSystem);
          end;
        end
        else
        if cl = 'TGRIDMessageSystemChannelRelated' then
        begin
          aTGRIDMessageSystemChannelRelated := TGRIDMessageSystemChannelRelated.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDMessageSystemChannelRelated.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDMessageSystemChannelRelated.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDMessageSystemChannelRelated);
          end;
        end
        else
        if cl = 'TGRIDMessageSubscription' then
        begin
          aTGRIDMessageSubscription := TGRIDMessageSubscription.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDMessageSubscription.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDMessageSubscription.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDMessageSubscription);
          end;
        end
        else
        if cl = 'TGRIDMessageUnsubscription' then
        begin
          aTGRIDMessageUnsubscription := TGRIDMessageUnsubscription.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDMessageUnsubscription.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDMessageUnsubscription.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDMessageUnsubscription);
          end;
        end
        else
        if cl = 'TGRIDMessageGetMsg' then
        begin
          aTGRIDMessageGetMsg := TGRIDMessageGetMsg.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDMessageGetMsg.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDMessageGetMsg.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDMessageGetMsg);
          end;
        end
        else
        if cl = 'TGRIDMessageGetMsgReply' then
        begin
          aTGRIDMessageGetMsgReply := TGRIDMessageGetMsgReply.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDMessageGetMsgReply.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDMessageGetMsgReply.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDMessageGetMsgReply);
          end;
        end
        else
        begin
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 0 then //TGRIDMessagingService
      begin
        aTGRIDMessagingService := TGRIDMessagingService(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDMessagingService class.
        begin
          aTGRIDMessagingService.FObjKeyRef.FATI := i;
          aTGRIDMessagingService.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //Id
        begin
          aTGRIDMessagingService.FId.FATI := i;
          aTGRIDMessagingService.FId.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //Channel
        begin
          aTGRIDMessagingService.FChannel.FATI := i;
          aTGRIDMessagingService.FChannel.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 3 then //Buffer
        begin
          aTGRIDMessagingService.FBuffer.FATI := i;
          aTGRIDMessagingService.FBuffer.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 1 then //TGRIDMessage
      begin
        aTGRIDMessage := TGRIDMessage(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDMessage class.
        begin
          aTGRIDMessage.FObjKeyRef.FATI := i;
          aTGRIDMessage.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //Id from TGRIDMessagingService class.
        begin
          aTGRIDMessage.FId.FATI := i;
          aTGRIDMessage.FId.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //Channel from TGRIDMessagingService class.
        begin
          aTGRIDMessage.FChannel.FATI := i;
          aTGRIDMessage.FChannel.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 3 then //Buffer from TGRIDMessagingService class.
        begin
          aTGRIDMessage.FBuffer.FATI := i;
          aTGRIDMessage.FBuffer.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 2 then //TGRIDMessageSystem
      begin
        aTGRIDMessageSystem := TGRIDMessageSystem(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDMessageSystem class.
        begin
          aTGRIDMessageSystem.FObjKeyRef.FATI := i;
          aTGRIDMessageSystem.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 3 then //TGRIDMessageSystemChannelRelated
      begin
        aTGRIDMessageSystemChannelRelated := TGRIDMessageSystemChannelRelated(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDMessageSystemChannelRelated class.
        begin
          aTGRIDMessageSystemChannelRelated.FObjKeyRef.FATI := i;
          aTGRIDMessageSystemChannelRelated.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //TargetChannel
        begin
          aTGRIDMessageSystemChannelRelated.FTargetChannel.FATI := i;
          aTGRIDMessageSystemChannelRelated.FTargetChannel.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 4 then //TGRIDMessageSubscription
      begin
        aTGRIDMessageSubscription := TGRIDMessageSubscription(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDMessageSubscription class.
        begin
          aTGRIDMessageSubscription.FObjKeyRef.FATI := i;
          aTGRIDMessageSubscription.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //TargetChannel from TGRIDMessageSystemChannelRelated class.
        begin
          aTGRIDMessageSubscription.FTargetChannel.FATI := i;
          aTGRIDMessageSubscription.FTargetChannel.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 5 then //TGRIDMessageUnsubscription
      begin
        aTGRIDMessageUnsubscription := TGRIDMessageUnsubscription(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDMessageUnsubscription class.
        begin
          aTGRIDMessageUnsubscription.FObjKeyRef.FATI := i;
          aTGRIDMessageUnsubscription.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //TargetChannel from TGRIDMessageSystemChannelRelated class.
        begin
          aTGRIDMessageUnsubscription.FTargetChannel.FATI := i;
          aTGRIDMessageUnsubscription.FTargetChannel.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 6 then //TGRIDMessageGetMsg
      begin
        aTGRIDMessageGetMsg := TGRIDMessageGetMsg(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDMessageGetMsg class.
        begin
          aTGRIDMessageGetMsg.FObjKeyRef.FATI := i;
          aTGRIDMessageGetMsg.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //WaitDelay
        begin
          aTGRIDMessageGetMsg.FWaitDelay.FATI := i;
          aTGRIDMessageGetMsg.FWaitDelay.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 7 then //TGRIDMessageGetMsgReply
      begin
        aTGRIDMessageGetMsgReply := TGRIDMessageGetMsgReply(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDMessageGetMsgReply class.
        begin
          aTGRIDMessageGetMsgReply.FObjKeyRef.FATI := i;
          aTGRIDMessageGetMsgReply.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //Code
        begin
          aTGRIDMessageGetMsgReply.FCode.FATI := i;
          aTGRIDMessageGetMsgReply.FCode.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //Information
        begin
          aTGRIDMessageGetMsgReply.FInformation.FATI := i;
          aTGRIDMessageGetMsgReply.FInformation.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;


    end
    else
    begin
      Break; //End of array list in Instance = -1
    end;
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
  StoredObject.SetModified(False);
end;

Function TGRIDClientServerProtocolMessageServiceManager.BuildObject(aObjectClass : String; Const Guid : UInt32) : TObject;
var i : Integer;
    FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
 if aObjectClass = 'TGRIDMessagingService' then
 begin
   Result := TGRIDMessagingService.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDMessagingService(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TGRIDMessage' then
 begin
   Result := TGRIDMessage.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDMessage(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TGRIDMessageSystem' then
 begin
   Result := TGRIDMessageSystem.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDMessageSystem(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TGRIDMessageSystemChannelRelated' then
 begin
   Result := TGRIDMessageSystemChannelRelated.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDMessageSystemChannelRelated(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TGRIDMessageSubscription' then
 begin
   Result := TGRIDMessageSubscription.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDMessageSubscription(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TGRIDMessageUnsubscription' then
 begin
   Result := TGRIDMessageUnsubscription.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDMessageUnsubscription(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TGRIDMessageGetMsg' then
 begin
   Result := TGRIDMessageGetMsg.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDMessageGetMsg(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TGRIDMessageGetMsgReply' then
 begin
   Result := TGRIDMessageGetMsgReply.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDMessageGetMsgReply(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;

Constructor TGRIDClientServerProtocolMessageServiceManager.Create;
Begin
  StoredObject := TofStoredObject_UInt32Key.Create;
  TofStoredObject_UInt32Key(StoredObject).StoredObjectClassManager := Self;
  RegisterClass;
end;

Procedure TGRIDClientServerProtocolMessageServiceManager.PopulateObject( anObject : TObject; PropertyName, StringValue : String);
var i : integer;
    s : TStringList;
    ls : TList<String>;
Begin
if anObject Is TGRIDMessagingService then
begin
  if Lowercase(PropertyName) = 'id' then
  begin
    TGRIDMessagingService(anObject).Id := StringValue;
  end;
  if Lowercase(PropertyName) = 'channel' then
  begin
    TGRIDMessagingService(anObject).Channel := StringValue;
  end;
  //if Lowercase(PropertyName) = 'buffer' then
  //begin
  //  TGRIDMessagingService(anObject).Buffer := ToStream(StringValue);
  //end;
end;
if anObject Is TGRIDMessage then
begin
end;
if anObject Is TGRIDMessageSystem then
begin
end;
if anObject Is TGRIDMessageSystemChannelRelated then
begin
  if Lowercase(PropertyName) = 'targetchannel' then
  begin
    TGRIDMessageSystemChannelRelated(anObject).TargetChannel := StringValue;
  end;
end;
if anObject Is TGRIDMessageSubscription then
begin
end;
if anObject Is TGRIDMessageUnsubscription then
begin
end;
if anObject Is TGRIDMessageGetMsg then
begin
  if length(StringValue)=0 then
    StringValue := '0';
  if Lowercase(PropertyName) = 'waitdelay' then
  begin
    TGRIDMessageGetMsg(anObject).WaitDelay := StrToInt(StringValue);
  end;
end;
if anObject Is TGRIDMessageGetMsgReply then
begin
  if length(StringValue)=0 then
    StringValue := '0';
  if Lowercase(PropertyName) = 'code' then
  begin
    TGRIDMessageGetMsgReply(anObject).Code := TGRIDMessageGetMsgReplyCode(StrToInt(StringValue));
  end;
  if Lowercase(PropertyName) = 'information' then
  begin
    TGRIDMessageGetMsgReply(anObject).Information := StringValue;
  end;
end;
end;
Procedure TGRIDClientServerProtocolMessageServiceManager.PopulateObjectStream( anObject : TObject; PropertyName : String; Value : TStream);
Begin
if anObject Is TGRIDMessagingService then
begin
  if Lowercase(PropertyName) = 'buffer' then
  begin
    Value.Position := 0;
    TGRIDMessagingService(anObject).Buffer := Value;
  end;
end;
if anObject Is TGRIDMessage then
begin
end;
if anObject Is TGRIDMessageSystem then
begin
end;
if anObject Is TGRIDMessageSystemChannelRelated then
begin
end;
if anObject Is TGRIDMessageSubscription then
begin
end;
if anObject Is TGRIDMessageUnsubscription then
begin
end;
if anObject Is TGRIDMessageGetMsg then
begin
end;
if anObject Is TGRIDMessageGetMsgReply then
begin
end;
end;

Procedure TGRIDClientServerProtocolMessageServiceManager.RegisterClass;
Begin
  StoredObject.ClearAllData(True);
  StoredObject.RegisterClass('TGRIDMessagingService');
  StoredObject.RegisterProperty('TGRIDMessagingService','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDMessagingService','Id',ofssString);
  StoredObject.RegisterProperty('TGRIDMessagingService','Channel',ofssString);
  StoredObject.RegisterProperty('TGRIDMessagingService','Buffer',ofssBlob);
  StoredObject.RegisterClass('TGRIDMessage');
  StoredObject.RegisterProperty('TGRIDMessage','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDMessage','Id',ofssString); //From TGRIDMessagingService
  StoredObject.RegisterProperty('TGRIDMessage','Channel',ofssString); //From TGRIDMessagingService
  StoredObject.RegisterProperty('TGRIDMessage','Buffer',ofssBlob); //From TGRIDMessagingService
  StoredObject.RegisterClass('TGRIDMessageSystem');
  StoredObject.RegisterProperty('TGRIDMessageSystem','ObjKeyRef',ofssString);
  StoredObject.RegisterClass('TGRIDMessageSystemChannelRelated');
  StoredObject.RegisterProperty('TGRIDMessageSystemChannelRelated','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDMessageSystemChannelRelated','TargetChannel',ofssString);
  StoredObject.RegisterClass('TGRIDMessageSubscription');
  StoredObject.RegisterProperty('TGRIDMessageSubscription','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDMessageSubscription','TargetChannel',ofssString); //From TGRIDMessageSystemChannelRelated
  StoredObject.RegisterClass('TGRIDMessageUnsubscription');
  StoredObject.RegisterProperty('TGRIDMessageUnsubscription','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDMessageUnsubscription','TargetChannel',ofssString); //From TGRIDMessageSystemChannelRelated
  StoredObject.RegisterClass('TGRIDMessageGetMsg');
  StoredObject.RegisterProperty('TGRIDMessageGetMsg','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDMessageGetMsg','WaitDelay',ofssInteger);
  StoredObject.RegisterClass('TGRIDMessageGetMsgReply');
  StoredObject.RegisterProperty('TGRIDMessageGetMsgReply','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDMessageGetMsgReply','Code',ofssByte);
  StoredObject.RegisterProperty('TGRIDMessageGetMsgReply','Information',ofssString);
end;



End.


//--------- Original UpScript
{
project name GRIDClientServerProtocolMessageService

include classes sysutils

def forward
TGRIDMessagingService
TGRIDMessage
TGRIDMessageSystem
  TGRIDMessageSubscription
  TGRIDMessageUnsubscription
  TGRIDMessageGetMsg
  TGRIDMessageGetMsgReply
end

define class TGRIDMessagingService
Id Channel string
Buffer stream
end

define class TGRIDMessage herits from TGRIDMessagingService
end


define class TGRIDMessageSystem
end

define class TGRIDMessageSystemChannelRelated herits from TGRIDMessageSystem
TargetChannel string
end

define class TGRIDMessageSubscription herits from TGRIDMessageSystemChannelRelated
end

define class TGRIDMessageUnsubscription herits from TGRIDMessageSystemChannelRelated
end

define class TGRIDMessageGetMsg herits from TGRIDMessageSystem
WaitDelay integer
end

define enum TGRIDMessageGetMsgReplyCode  gmrNoMessageOnServer gmrStillMessagePendingOnServer gmrFail end
define class TGRIDMessageGetMsgReply herits from TGRIDMessageSystem
Code TGRIDMessageGetMsgReplyCode
Information string
end

}

