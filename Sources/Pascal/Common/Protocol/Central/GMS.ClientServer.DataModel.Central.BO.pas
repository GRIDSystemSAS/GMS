{*---------------------------------------------------*}
// UpScript Translator (ObjectPascal for StoredObject) AutoGenerated file.
// Generation Option ExternalRefKey  : False
// Generation Option PrimaryKey Type : UInt32
// Generation Date : 2017/07/12 20.46.49
{*---------------------------------------------------*}

Unit GMS.ClientServer.DataModel.Central.BO;
{*---------------------------------------------------*}
{$IFDEF FPC}
{$mode delphi}
{$ENDIF}


INTERFACE

//Include statement
Uses
  GS.StoredObject.Buffer, GS.StoredObject.BaseTypes, GS.StoredObject.Stream,
  {$IFNDEF FPC}
  System.Generics.collections,
  GS.StoredObject.Core,
  {$ELSE}
  Generics.collections,
  GS.StoredObject.Types_UINT32,
  GS.StoredObject.Core_NonGenerics,
  {$ENDIF }
  classes, sysutils;

{*---------------------------------------------------*}
Type

TGRIDClientServerDataModelCentralBOManager = Class;
TSOGRIDCentralServiceItem = Class;
TSOGRIDSystemProfile = Class;
TSOGRIDCentralDataModel = Class;
//TSOGRIDCentralServiceItemList = Class; Not used

//---- Enum TSOGRIDCentralServiceCategory (6 enumerate(s))
TSOGRIDCentralServiceCategory = (scLogger,scComServer,scCentralManagementService,scProcessManagementService,scBus,scProcess);

//---- Class TSOGRIDCentralServiceItem (8 Field(s) and 0 method(s))
TSOGRIDCentralServiceItem = Class
Protected
  {$REGION 'StoredObject Technical stuffs for TSOGRIDCentralServiceItem'}
  StoredProtoAppClasses : TofStoredObject_UInt32Key; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : UInt32;
  FServiceClass : TData_Def; //string
  FServiceName : TData_Def; //string
  FServiceDesc : TData_Def; //string
  FServiceInstanceID : TData_Def; //string
  FServiceStarted : TData_Def; //bool
  FServiceStartedOn : TData_Def; //DateTime
  FServiceThreadID : TData_Def; //integer
  FServiceCategory : TData_Def; //TSOGRIDCentralServiceCategory

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : UInt32);
  Function GetObjKeyRef : UInt32;

  Procedure SetServiceClass(Value : String);
  Function GetServiceClass : String;
  Procedure SetServiceName(Value : String);
  Function GetServiceName : String;
  Procedure SetServiceDesc(Value : String);
  Function GetServiceDesc : String;
  Procedure SetServiceInstanceID(Value : String);
  Function GetServiceInstanceID : String;
  Procedure SetServiceStarted(Value : Boolean);
  Function GetServiceStarted : Boolean;
  Procedure SetServiceStartedOn(Value : TDatetime);
  Function GetServiceStartedOn : TDatetime;
  Procedure SetServiceThreadID(Value : Integer);
  Function GetServiceThreadID : Integer;
  Procedure SetServiceCategory(Value : TSOGRIDCentralServiceCategory);
  Function GetServiceCategory : TSOGRIDCentralServiceCategory;
Public
  Constructor Create(Const aManager : TGRIDClientServerDataModelCentralBOManager); Virtual;
Published
  Property ServiceClass : String read GetServiceClass Write SetServiceClass;
  Property ServiceName : String read GetServiceName Write SetServiceName;
  Property ServiceDesc : String read GetServiceDesc Write SetServiceDesc;
  Property ServiceInstanceID : String read GetServiceInstanceID Write SetServiceInstanceID;
  Property ServiceStarted : Boolean read GetServiceStarted Write SetServiceStarted;
  Property ServiceStartedOn : TDatetime read GetServiceStartedOn Write SetServiceStartedOn;
  Property ServiceThreadID : Integer read GetServiceThreadID Write SetServiceThreadID;
  Property ServiceCategory : TSOGRIDCentralServiceCategory read GetServiceCategory Write SetServiceCategory;
End;

//---- Class TSOGRIDSystemProfile (7 Field(s) and 0 method(s))
TSOGRIDSystemProfile = Class
Protected
  {$REGION 'StoredObject Technical stuffs for TSOGRIDSystemProfile'}
  StoredProtoAppClasses : TofStoredObject_UInt32Key; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : UInt32;
  FSystemCPULoad : TData_Def; //Double
  FSystemCPULoadKernel : TData_Def; //Double
  FSystemCPUPIdleTime : TData_Def; //Double
  FSystemCPUUserTime : TData_Def; //Double
  FSystemCPUKernelTime : TData_Def; //Double
  FSystemCPUNiceTime : TData_Def; //Double
  FSystemCaptureDateTime : TData_Def; //datetime

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : UInt32);
  Function GetObjKeyRef : UInt32;

  Procedure SetSystemCPULoad(Value : Double);
  Function GetSystemCPULoad : Double;
  Procedure SetSystemCPULoadKernel(Value : Double);
  Function GetSystemCPULoadKernel : Double;
  Procedure SetSystemCPUPIdleTime(Value : Double);
  Function GetSystemCPUPIdleTime : Double;
  Procedure SetSystemCPUUserTime(Value : Double);
  Function GetSystemCPUUserTime : Double;
  Procedure SetSystemCPUKernelTime(Value : Double);
  Function GetSystemCPUKernelTime : Double;
  Procedure SetSystemCPUNiceTime(Value : Double);
  Function GetSystemCPUNiceTime : Double;
  Procedure SetSystemCaptureDateTime(Value : TDatetime);
  Function GetSystemCaptureDateTime : TDatetime;
Public
  Constructor Create(Const aManager : TGRIDClientServerDataModelCentralBOManager); Virtual;
Published
  Property SystemCPULoad : Double read GetSystemCPULoad Write SetSystemCPULoad;
  Property SystemCPULoadKernel : Double read GetSystemCPULoadKernel Write SetSystemCPULoadKernel;
  Property SystemCPUPIdleTime : Double read GetSystemCPUPIdleTime Write SetSystemCPUPIdleTime;
  Property SystemCPUUserTime : Double read GetSystemCPUUserTime Write SetSystemCPUUserTime;
  Property SystemCPUKernelTime : Double read GetSystemCPUKernelTime Write SetSystemCPUKernelTime;
  Property SystemCPUNiceTime : Double read GetSystemCPUNiceTime Write SetSystemCPUNiceTime;
  Property SystemCaptureDateTime : TDatetime read GetSystemCaptureDateTime Write SetSystemCaptureDateTime;
End;

//---- Class TSOGRIDCentralDataModel (10 Field(s) and 0 method(s))
TSOGRIDCentralDataModel = Class
Protected
  {$REGION 'StoredObject Technical stuffs for TSOGRIDCentralDataModel'}
  StoredProtoAppClasses : TofStoredObject_UInt32Key; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : UInt32;
  FGRIDServerName : TData_Def; //string
  FGRIDServerDesc : TData_Def; //string
  FGRIDServerHost : TData_Def; //string
  FGRIDServerInterface : TData_Def; //string
  FGRIDServerStartUp : TData_Def; //datetime
  FGRIDServerVersionMajor : TData_Def; //string
  FGRIDServerVersionMinor : TData_Def; //string
  FGRIDServerVersionBuild : TData_Def; //string
  FGRIDService : TData_Def; //TSOGRIDCentralServiceItemList
  FGRIDSystemProfile : TData_Def; //TSOGRIDSystemProfile

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : UInt32);
  Function GetObjKeyRef : UInt32;

  Procedure SetGRIDServerName(Value : String);
  Function GetGRIDServerName : String;
  Procedure SetGRIDServerDesc(Value : String);
  Function GetGRIDServerDesc : String;
  Procedure SetGRIDServerHost(Value : String);
  Function GetGRIDServerHost : String;
  Procedure SetGRIDServerInterface(Value : String);
  Function GetGRIDServerInterface : String;
  Procedure SetGRIDServerStartUp(Value : TDatetime);
  Function GetGRIDServerStartUp : TDatetime;
  Procedure SetGRIDServerVersionMajor(Value : String);
  Function GetGRIDServerVersionMajor : String;
  Procedure SetGRIDServerVersionMinor(Value : String);
  Function GetGRIDServerVersionMinor : String;
  Procedure SetGRIDServerVersionBuild(Value : String);
  Function GetGRIDServerVersionBuild : String;
  Procedure SetGRIDService(Index : Integer; Const Value : TSOGRIDCentralServiceItem);
  Function GetGRIDService(Index : Integer) : TSOGRIDCentralServiceItem;
  Procedure SetGRIDSystemProfile(Value : TSOGRIDSystemProfile);
  Function GetGRIDSystemProfile : TSOGRIDSystemProfile;
Public
  Constructor Create(Const aManager : TGRIDClientServerDataModelCentralBOManager); Virtual;
  Procedure AddGRIDService(aTSOGRIDCentralServiceItem : TSOGRIDCentralServiceItem);
  Procedure RemoveGRIDService(aTSOGRIDCentralServiceItem : TSOGRIDCentralServiceItem);
  Function GRIDServiceCount : Integer;
  //Procedure IsGRIDServiceExists(aTSOGRIDCentralServiceItem : TSOGRIDCentralServiceItem);
  Property GRIDService[Index : Integer] : TSOGRIDCentralServiceItem read GetGRIDService Write SetGRIDService;
Published
  Property GRIDServerName : String read GetGRIDServerName Write SetGRIDServerName;
  Property GRIDServerDesc : String read GetGRIDServerDesc Write SetGRIDServerDesc;
  Property GRIDServerHost : String read GetGRIDServerHost Write SetGRIDServerHost;
  Property GRIDServerInterface : String read GetGRIDServerInterface Write SetGRIDServerInterface;
  Property GRIDServerStartUp : TDatetime read GetGRIDServerStartUp Write SetGRIDServerStartUp;
  Property GRIDServerVersionMajor : String read GetGRIDServerVersionMajor Write SetGRIDServerVersionMajor;
  Property GRIDServerVersionMinor : String read GetGRIDServerVersionMinor Write SetGRIDServerVersionMinor;
  Property GRIDServerVersionBuild : String read GetGRIDServerVersionBuild Write SetGRIDServerVersionBuild;
  Property GRIDSystemProfile : TSOGRIDSystemProfile read GetGRIDSystemProfile Write SetGRIDSystemProfile;
End;

//---- Class List TSOGRIDCentralServiceItemList (of type TSOGRIDCentralServiceItem) : NOT USED in StoredObject Mode



//------------------------------------------------------------
TGRIDClientServerDataModelCentralBOManager = class(TofStoredObjectClassManager_UInt32)
Protected
  Procedure InternalLoadCommon; Override;
Public
  Constructor Create; Override;
  Function BuildObject(aObjectClass : String; Const Guid : UInt32) : TObject; Override;
    Procedure PopulateObject( anObject : TObject; PropertyName, StringValue : String); Override;
    Procedure PopulateObjectStream( anObject : TObject; PropertyName : String; Value : TStream); Override;
    Procedure PopulateObjectWithString( anObject : TObject; PropertyName : String; Value : String); Override;
    Procedure PopulateObjectWithDouble( anObject : TObject; PropertyName : String; Value : Double); Override;
    Procedure PopulateObjectWithInteger( anObject : TObject; PropertyName : String; Value : Integer); Override;
    Procedure PopulateObjectWithDateTime( anObject : TObject; PropertyName : String; Value : TDateTime); Override;
    Procedure PopulateObjectWithUInt32( anObject : TObject; PropertyName : String; Value : UInt32); Override;
    Procedure PopulateObjectWithInt64( anObject : TObject; PropertyName : String; Value : UInt64); Override;
    Procedure PopulateObjectWithByte( anObject : TObject; PropertyName : String; Value : Byte); Override;
    Procedure PopulateObjectWithBoolean( anObject : TObject; PropertyName : String; Value : Boolean); Override;
  Procedure RegisterClass; Override;

end;


IMPLEMENTATION


//---- Class TSOGRIDCentralServiceItem

  Constructor TSOGRIDCentralServiceItem.Create(Const aManager : TGRIDClientServerDataModelCentralBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FServiceClass.FATI := -1;
    FServiceName.FATI := -1;
    FServiceDesc.FATI := -1;
    FServiceInstanceID.FATI := -1;
    FServiceStarted.FATI := -1;
    FServiceStartedOn.FATI := -1;
    FServiceThreadID.FATI := -1;
    FServiceCategory.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TSOGRIDCentralServiceItem.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TSOGRIDCentralServiceItem,'TSOGRIDCentralServiceItem Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TSOGRIDCentralServiceItem.SetObjKeyRef(Value : UInt32);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetUInt32(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TSOGRIDCentralServiceItem.GetObjKeyRef : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetUInt32(Self, FObjKeyRef.FATI,Result);
  End;

  Procedure TSOGRIDCentralServiceItem.SetServiceClass(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'ServiceClass',FServiceClass.FATI,FServiceClass.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralServiceItem.SetServiceClass(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralServiceItem.GetServiceClass : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FServiceClass.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralServiceItem.GetServiceClass : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralServiceItem.SetServiceName(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'ServiceName',FServiceName.FATI,FServiceName.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralServiceItem.SetServiceName(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralServiceItem.GetServiceName : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FServiceName.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralServiceItem.GetServiceName : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralServiceItem.SetServiceDesc(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'ServiceDesc',FServiceDesc.FATI,FServiceDesc.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralServiceItem.SetServiceDesc(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralServiceItem.GetServiceDesc : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FServiceDesc.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralServiceItem.GetServiceDesc : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralServiceItem.SetServiceInstanceID(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'ServiceInstanceID',FServiceInstanceID.FATI,FServiceInstanceID.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralServiceItem.SetServiceInstanceID(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralServiceItem.GetServiceInstanceID : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FServiceInstanceID.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralServiceItem.GetServiceInstanceID : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralServiceItem.SetServiceStarted(Value : Boolean);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetBoolean(Self, FObjKey,'ServiceStarted',FServiceStarted.FATI,FServiceStarted.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralServiceItem.SetServiceStarted(Value : bool) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralServiceItem.GetServiceStarted : Boolean;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetBoolean(Self,FServiceStarted.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralServiceItem.GetServiceStarted : bool --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralServiceItem.SetServiceStartedOn(Value : TDatetime);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetDateTime(Self, FObjKey,'ServiceStartedOn',FServiceStartedOn.FATI,FServiceStartedOn.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralServiceItem.SetServiceStartedOn(Value : DateTime) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralServiceItem.GetServiceStartedOn : TDatetime;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetDateTime(Self,FServiceStartedOn.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralServiceItem.GetServiceStartedOn : DateTime --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralServiceItem.SetServiceThreadID(Value : Integer);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetInteger(Self, FObjKey,'ServiceThreadID',FServiceThreadID.FATI,FServiceThreadID.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralServiceItem.SetServiceThreadID(Value : integer) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralServiceItem.GetServiceThreadID : Integer;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetInteger(Self,FServiceThreadID.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralServiceItem.GetServiceThreadID : integer --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralServiceItem.SetServiceCategory(Value : TSOGRIDCentralServiceCategory);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetByte(Self, FObjKey,'ServiceCategory',FServiceCategory.FATI,FServiceCategory.FData_Index,Byte(Value));
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralServiceItem.SetServiceCategory(Value : TSOGRIDCentralServiceCategory) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralServiceItem.GetServiceCategory : TSOGRIDCentralServiceCategory;
  var R : Byte;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetByte(Self,FServiceCategory.FATI,R);
      Result :=TSOGRIDCentralServiceCategory(R);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralServiceItem.GetServiceCategory : TSOGRIDCentralServiceCategory --> '+E.Message)
      end;
    end;
  End;


//---- Class TSOGRIDSystemProfile

  Constructor TSOGRIDSystemProfile.Create(Const aManager : TGRIDClientServerDataModelCentralBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FSystemCPULoad.FATI := -1;
    FSystemCPULoadKernel.FATI := -1;
    FSystemCPUPIdleTime.FATI := -1;
    FSystemCPUUserTime.FATI := -1;
    FSystemCPUKernelTime.FATI := -1;
    FSystemCPUNiceTime.FATI := -1;
    FSystemCaptureDateTime.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TSOGRIDSystemProfile.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TSOGRIDSystemProfile,'TSOGRIDSystemProfile Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TSOGRIDSystemProfile.SetObjKeyRef(Value : UInt32);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetUInt32(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TSOGRIDSystemProfile.GetObjKeyRef : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetUInt32(Self, FObjKeyRef.FATI,Result);
  End;

  Procedure TSOGRIDSystemProfile.SetSystemCPULoad(Value : Double);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetDouble(Self, FObjKey,'SystemCPULoad',FSystemCPULoad.FATI,FSystemCPULoad.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDSystemProfile.SetSystemCPULoad(Value : Double) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDSystemProfile.GetSystemCPULoad : Double;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetDouble(Self,FSystemCPULoad.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDSystemProfile.GetSystemCPULoad : Double --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDSystemProfile.SetSystemCPULoadKernel(Value : Double);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetDouble(Self, FObjKey,'SystemCPULoadKernel',FSystemCPULoadKernel.FATI,FSystemCPULoadKernel.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDSystemProfile.SetSystemCPULoadKernel(Value : Double) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDSystemProfile.GetSystemCPULoadKernel : Double;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetDouble(Self,FSystemCPULoadKernel.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDSystemProfile.GetSystemCPULoadKernel : Double --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDSystemProfile.SetSystemCPUPIdleTime(Value : Double);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetDouble(Self, FObjKey,'SystemCPUPIdleTime',FSystemCPUPIdleTime.FATI,FSystemCPUPIdleTime.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDSystemProfile.SetSystemCPUPIdleTime(Value : Double) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDSystemProfile.GetSystemCPUPIdleTime : Double;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetDouble(Self,FSystemCPUPIdleTime.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDSystemProfile.GetSystemCPUPIdleTime : Double --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDSystemProfile.SetSystemCPUUserTime(Value : Double);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetDouble(Self, FObjKey,'SystemCPUUserTime',FSystemCPUUserTime.FATI,FSystemCPUUserTime.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDSystemProfile.SetSystemCPUUserTime(Value : Double) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDSystemProfile.GetSystemCPUUserTime : Double;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetDouble(Self,FSystemCPUUserTime.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDSystemProfile.GetSystemCPUUserTime : Double --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDSystemProfile.SetSystemCPUKernelTime(Value : Double);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetDouble(Self, FObjKey,'SystemCPUKernelTime',FSystemCPUKernelTime.FATI,FSystemCPUKernelTime.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDSystemProfile.SetSystemCPUKernelTime(Value : Double) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDSystemProfile.GetSystemCPUKernelTime : Double;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetDouble(Self,FSystemCPUKernelTime.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDSystemProfile.GetSystemCPUKernelTime : Double --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDSystemProfile.SetSystemCPUNiceTime(Value : Double);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetDouble(Self, FObjKey,'SystemCPUNiceTime',FSystemCPUNiceTime.FATI,FSystemCPUNiceTime.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDSystemProfile.SetSystemCPUNiceTime(Value : Double) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDSystemProfile.GetSystemCPUNiceTime : Double;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetDouble(Self,FSystemCPUNiceTime.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDSystemProfile.GetSystemCPUNiceTime : Double --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDSystemProfile.SetSystemCaptureDateTime(Value : TDatetime);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetDateTime(Self, FObjKey,'SystemCaptureDateTime',FSystemCaptureDateTime.FATI,FSystemCaptureDateTime.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDSystemProfile.SetSystemCaptureDateTime(Value : datetime) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDSystemProfile.GetSystemCaptureDateTime : TDatetime;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetDateTime(Self,FSystemCaptureDateTime.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDSystemProfile.GetSystemCaptureDateTime : datetime --> '+E.Message)
      end;
    end;
  End;


//---- Class TSOGRIDCentralDataModel

  Constructor TSOGRIDCentralDataModel.Create(Const aManager : TGRIDClientServerDataModelCentralBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FGRIDServerName.FATI := -1;
    FGRIDServerDesc.FATI := -1;
    FGRIDServerHost.FATI := -1;
    FGRIDServerInterface.FATI := -1;
    FGRIDServerStartUp.FATI := -1;
    FGRIDServerVersionMajor.FATI := -1;
    FGRIDServerVersionMinor.FATI := -1;
    FGRIDServerVersionBuild.FATI := -1;
    FGRIDService.FATI := -1;
    FGRIDSystemProfile.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TSOGRIDCentralDataModel.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TSOGRIDCentralDataModel,'TSOGRIDCentralDataModel Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TSOGRIDCentralDataModel.SetObjKeyRef(Value : UInt32);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetUInt32(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TSOGRIDCentralDataModel.GetObjKeyRef : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetUInt32(Self, FObjKeyRef.FATI,Result);
  End;

  Procedure TSOGRIDCentralDataModel.SetGRIDServerName(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'GRIDServerName',FGRIDServerName.FATI,FGRIDServerName.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralDataModel.SetGRIDServerName(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralDataModel.GetGRIDServerName : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FGRIDServerName.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralDataModel.GetGRIDServerName : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralDataModel.SetGRIDServerDesc(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'GRIDServerDesc',FGRIDServerDesc.FATI,FGRIDServerDesc.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralDataModel.SetGRIDServerDesc(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralDataModel.GetGRIDServerDesc : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FGRIDServerDesc.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralDataModel.GetGRIDServerDesc : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralDataModel.SetGRIDServerHost(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'GRIDServerHost',FGRIDServerHost.FATI,FGRIDServerHost.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralDataModel.SetGRIDServerHost(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralDataModel.GetGRIDServerHost : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FGRIDServerHost.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralDataModel.GetGRIDServerHost : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralDataModel.SetGRIDServerInterface(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'GRIDServerInterface',FGRIDServerInterface.FATI,FGRIDServerInterface.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralDataModel.SetGRIDServerInterface(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralDataModel.GetGRIDServerInterface : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FGRIDServerInterface.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralDataModel.GetGRIDServerInterface : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralDataModel.SetGRIDServerStartUp(Value : TDatetime);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetDateTime(Self, FObjKey,'GRIDServerStartUp',FGRIDServerStartUp.FATI,FGRIDServerStartUp.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralDataModel.SetGRIDServerStartUp(Value : datetime) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralDataModel.GetGRIDServerStartUp : TDatetime;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetDateTime(Self,FGRIDServerStartUp.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralDataModel.GetGRIDServerStartUp : datetime --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralDataModel.SetGRIDServerVersionMajor(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'GRIDServerVersionMajor',FGRIDServerVersionMajor.FATI,FGRIDServerVersionMajor.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralDataModel.SetGRIDServerVersionMajor(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralDataModel.GetGRIDServerVersionMajor : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FGRIDServerVersionMajor.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralDataModel.GetGRIDServerVersionMajor : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralDataModel.SetGRIDServerVersionMinor(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'GRIDServerVersionMinor',FGRIDServerVersionMinor.FATI,FGRIDServerVersionMinor.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralDataModel.SetGRIDServerVersionMinor(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralDataModel.GetGRIDServerVersionMinor : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FGRIDServerVersionMinor.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralDataModel.GetGRIDServerVersionMinor : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralDataModel.SetGRIDServerVersionBuild(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'GRIDServerVersionBuild',FGRIDServerVersionBuild.FATI,FGRIDServerVersionBuild.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralDataModel.SetGRIDServerVersionBuild(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralDataModel.GetGRIDServerVersionBuild : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FGRIDServerVersionBuild.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralDataModel.GetGRIDServerVersionBuild : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralDataModel.SetGRIDService(Index : Integer; Const Value : TSOGRIDCentralServiceItem);
  var a : String;
      Tools : TList<UInt32>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Assert(Assigned(Value)); //Nil forbiden
    Tools :=  TList<UInt32>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfUint32(Self,FGRIDService.FATI,Tools);
        if Tools.Count>=Index then
        begin
          Tools[Index] := Value.FObjKey;
          StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'GRIDService',FGRIDService.FATI,FGRIDService.FData_Index,Tools);
        end
        else
        begin
          raise Exception.Create('Index overflow : Total GRIDService object Count = '+IntToStr(Tools.Count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralDataModel.SetGRIDService'+ E.Message);
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
  End;

  Function TSOGRIDCentralDataModel.GetGRIDService(Index : Integer) : TSOGRIDCentralServiceItem;
  var a : String;
      Tools : TList<UInt32>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Tools :=  TList<UInt32>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfUInt32(Self,FGRIDService.FATI,Tools);
        if (Tools.Count>Index) then
        Begin
          Result := TSOGRIDCentralServiceItem(StoredProtoAppClasses.BusinessObjects[Tools[Index]]);
        End
        Else
        Begin
          Raise Exception.Create('Index overflow : Total GRIDService count = '+IntToStr(Tools.count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralDataModel.GetGRIDService : '+E.Message)
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
    if Result = nil then
      raise Exception.Create('TSOGRIDCentralDataModel.GetGRIDService('+IntToStr(Index)+') unassigned');
  End;

  Procedure TSOGRIDCentralDataModel.SetGRIDSystemProfile(Value : TSOGRIDSystemProfile);
  var a : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      if Assigned(Value) then
        begin
          StoredProtoAppClasses.LookForObject(Value,a);
          StoredProtoAppClasses.SetUInt32(Self, FObjKey,'GRIDSystemProfile',FGRIDSystemProfile.FATI,FGRIDSystemProfile.FData_Index,a);
        end
        else
        begin
          StoredProtoAppClasses.SetUInt32(Self, FObjKey,'GRIDSystemProfile',FGRIDSystemProfile.FATI,FGRIDSystemProfile.FData_Index,High(UInt32));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralDataModel.SetGRIDSystemProfile : '+E.Message)
        end;
      end;
  End;

  Function TSOGRIDCentralDataModel.GetGRIDSystemProfile : TSOGRIDSystemProfile;
  var ai : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetUInt32(Self,FGRIDSystemProfile.FATI,ai);
      Result := nil;
      if (ai<>High(UInt32)) then
        Result := TSOGRIDSystemProfile(StoredProtoAppClasses.BusinessObjects[ai]);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralDataModel.GetGRIDSystemProfile '+ E.Message);
      end;
    end;
  End;


  Procedure TSOGRIDCentralDataModel.AddGRIDService(aTSOGRIDCentralServiceItem : TSOGRIDCentralServiceItem);
  var Tools : TList<UInt32>;
      aB : Boolean;
  Begin
    Assert(Assigned(aTSOGRIDCentralServiceItem));
    aB := StoredProtoAppClasses.AuditEnabled;
    Tools :=  TList<UInt32>.Create;
    try
      StoredProtoAppClasses.GetListOfUInt32(Self,FGRIDService.FATI,Tools);
      Tools.Add(aTSOGRIDCentralServiceItem.FObjKey); //No "if IndexOf()" test : Mutli-occurence is allowed (See AddExternalRef)
      StoredProtoAppClasses.AuditEnabled := False;
      StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'GRIDService',FGRIDService.FATI,FGRIDService.FData_Index,Tools);
      StoredProtoAppClasses.AuditEnabled := aB;
    finally
      StoredProtoAppClasses.AuditEnabled := aB;
      FreeAndNil(Tools);
    end;
  end;

  Procedure TSOGRIDCentralDataModel.RemoveGRIDService(aTSOGRIDCentralServiceItem : TSOGRIDCentralServiceItem);
  var Tools : TList<UInt32>;
      lk : Int64;
      aB : Boolean;
  Begin
    Assert(Assigned(aTSOGRIDCentralServiceItem));
    aB := StoredProtoAppClasses.AuditEnabled;
    Tools :=  TList<UInt32>.Create;
    try
      StoredProtoAppClasses.GetListOfUInt32(Self,FGRIDService.FATI,Tools);
      lk := Tools.IndexOf(aTSOGRIDCentralServiceItem.FObjKey);
      if lk>-1 then
      begin
        Tools.Delete(lk);
        StoredProtoAppClasses.AuditEnabled := False;
        StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'GRIDService',FGRIDService.FATI,FGRIDService.FData_Index,Tools);
        StoredProtoAppClasses.AuditEnabled := aB;
      end;
    finally
      StoredProtoAppClasses.AuditEnabled := aB;
      FreeAndNil(Tools);
    end;
  end;

  Function TSOGRIDCentralDataModel.GRIDServiceCount : Integer;
  Begin
    Result := StoredProtoAppClasses.GetListItemCount(FGRIDService.FData_Index);
  end;


{TGRIDClientServerDataModelCentralBOManager}
//------------------------------------------------------------

Procedure TGRIDClientServerDataModelCentralBOManager.InternalLoadCommon;
var i : integer;
    cl : string;
    FAuditMem : Boolean;
    aTSOGRIDCentralServiceItem : TSOGRIDCentralServiceItem;
    aTSOGRIDSystemProfile : TSOGRIDSystemProfile;
    aTSOGRIDCentralDataModel : TSOGRIDCentralDataModel;
    CurrentInstanceKey : UInt32;
    aSO : TofStoredObject_UInt32Key;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  CurrentInstanceKey := High(UInt32);
  aSO := TofStoredObject_UInt32Key(StoredObject);
  for i := Low(aSO.AllocationData.TableATI_Int) to High(aSO.AllocationData.TableATI_Int) do
  begin
    //Deleted object is ignored but still exists in the buffer : Ignore it.
    if aSO.AllocationData.TableATI_Int[i].MetaStatus = ToATIMetaStatus.omsDeleted then
      Continue;

    CurrentInstanceKey := aSO.AllocationData.TableATI_Int[i].InstanceIndex;

    if CurrentInstanceKey<>High(UInt32) then
    begin

      if Not( Assigned(aSO.LookForObject(CurrentInstanceKey)) ) then
      begin
        //Object does not exists yet : Build.

        //Create object.
        cl := aSO.DefinitionData.Classes[aSO.AllocationData.TableATI_Int[i].MetaClassIndex].ClassName;
        if cl = 'TSOGRIDCentralServiceItem' then
        begin
          aTSOGRIDCentralServiceItem := TSOGRIDCentralServiceItem.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTSOGRIDCentralServiceItem.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTSOGRIDCentralServiceItem.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTSOGRIDCentralServiceItem);
          end;
        end
        else
        if cl = 'TSOGRIDSystemProfile' then
        begin
          aTSOGRIDSystemProfile := TSOGRIDSystemProfile.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTSOGRIDSystemProfile.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTSOGRIDSystemProfile.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTSOGRIDSystemProfile);
          end;
        end
        else
        if cl = 'TSOGRIDCentralDataModel' then
        begin
          aTSOGRIDCentralDataModel := TSOGRIDCentralDataModel.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTSOGRIDCentralDataModel.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTSOGRIDCentralDataModel.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTSOGRIDCentralDataModel);
          end;
        end
        else
        begin
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 0 then //TSOGRIDCentralServiceItem
      begin
        aTSOGRIDCentralServiceItem := TSOGRIDCentralServiceItem(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TSOGRIDCentralServiceItem class.
        begin
          aTSOGRIDCentralServiceItem.FObjKeyRef.FATI := i;
          aTSOGRIDCentralServiceItem.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //ServiceClass
        begin
          aTSOGRIDCentralServiceItem.FServiceClass.FATI := i;
          aTSOGRIDCentralServiceItem.FServiceClass.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //ServiceName
        begin
          aTSOGRIDCentralServiceItem.FServiceName.FATI := i;
          aTSOGRIDCentralServiceItem.FServiceName.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 3 then //ServiceDesc
        begin
          aTSOGRIDCentralServiceItem.FServiceDesc.FATI := i;
          aTSOGRIDCentralServiceItem.FServiceDesc.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 4 then //ServiceInstanceID
        begin
          aTSOGRIDCentralServiceItem.FServiceInstanceID.FATI := i;
          aTSOGRIDCentralServiceItem.FServiceInstanceID.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 5 then //ServiceStarted
        begin
          aTSOGRIDCentralServiceItem.FServiceStarted.FATI := i;
          aTSOGRIDCentralServiceItem.FServiceStarted.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 6 then //ServiceStartedOn
        begin
          aTSOGRIDCentralServiceItem.FServiceStartedOn.FATI := i;
          aTSOGRIDCentralServiceItem.FServiceStartedOn.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 7 then //ServiceThreadID
        begin
          aTSOGRIDCentralServiceItem.FServiceThreadID.FATI := i;
          aTSOGRIDCentralServiceItem.FServiceThreadID.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 8 then //ServiceCategory
        begin
          aTSOGRIDCentralServiceItem.FServiceCategory.FATI := i;
          aTSOGRIDCentralServiceItem.FServiceCategory.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 1 then //TSOGRIDSystemProfile
      begin
        aTSOGRIDSystemProfile := TSOGRIDSystemProfile(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TSOGRIDSystemProfile class.
        begin
          aTSOGRIDSystemProfile.FObjKeyRef.FATI := i;
          aTSOGRIDSystemProfile.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //SystemCPULoad
        begin
          aTSOGRIDSystemProfile.FSystemCPULoad.FATI := i;
          aTSOGRIDSystemProfile.FSystemCPULoad.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //SystemCPULoadKernel
        begin
          aTSOGRIDSystemProfile.FSystemCPULoadKernel.FATI := i;
          aTSOGRIDSystemProfile.FSystemCPULoadKernel.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 3 then //SystemCPUPIdleTime
        begin
          aTSOGRIDSystemProfile.FSystemCPUPIdleTime.FATI := i;
          aTSOGRIDSystemProfile.FSystemCPUPIdleTime.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 4 then //SystemCPUUserTime
        begin
          aTSOGRIDSystemProfile.FSystemCPUUserTime.FATI := i;
          aTSOGRIDSystemProfile.FSystemCPUUserTime.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 5 then //SystemCPUKernelTime
        begin
          aTSOGRIDSystemProfile.FSystemCPUKernelTime.FATI := i;
          aTSOGRIDSystemProfile.FSystemCPUKernelTime.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 6 then //SystemCPUNiceTime
        begin
          aTSOGRIDSystemProfile.FSystemCPUNiceTime.FATI := i;
          aTSOGRIDSystemProfile.FSystemCPUNiceTime.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 7 then //SystemCaptureDateTime
        begin
          aTSOGRIDSystemProfile.FSystemCaptureDateTime.FATI := i;
          aTSOGRIDSystemProfile.FSystemCaptureDateTime.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 2 then //TSOGRIDCentralDataModel
      begin
        aTSOGRIDCentralDataModel := TSOGRIDCentralDataModel(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TSOGRIDCentralDataModel class.
        begin
          aTSOGRIDCentralDataModel.FObjKeyRef.FATI := i;
          aTSOGRIDCentralDataModel.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //GRIDServerName
        begin
          aTSOGRIDCentralDataModel.FGRIDServerName.FATI := i;
          aTSOGRIDCentralDataModel.FGRIDServerName.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //GRIDServerDesc
        begin
          aTSOGRIDCentralDataModel.FGRIDServerDesc.FATI := i;
          aTSOGRIDCentralDataModel.FGRIDServerDesc.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 3 then //GRIDServerHost
        begin
          aTSOGRIDCentralDataModel.FGRIDServerHost.FATI := i;
          aTSOGRIDCentralDataModel.FGRIDServerHost.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 4 then //GRIDServerInterface
        begin
          aTSOGRIDCentralDataModel.FGRIDServerInterface.FATI := i;
          aTSOGRIDCentralDataModel.FGRIDServerInterface.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 5 then //GRIDServerStartUp
        begin
          aTSOGRIDCentralDataModel.FGRIDServerStartUp.FATI := i;
          aTSOGRIDCentralDataModel.FGRIDServerStartUp.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 6 then //GRIDServerVersionMajor
        begin
          aTSOGRIDCentralDataModel.FGRIDServerVersionMajor.FATI := i;
          aTSOGRIDCentralDataModel.FGRIDServerVersionMajor.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 7 then //GRIDServerVersionMinor
        begin
          aTSOGRIDCentralDataModel.FGRIDServerVersionMinor.FATI := i;
          aTSOGRIDCentralDataModel.FGRIDServerVersionMinor.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 8 then //GRIDServerVersionBuild
        begin
          aTSOGRIDCentralDataModel.FGRIDServerVersionBuild.FATI := i;
          aTSOGRIDCentralDataModel.FGRIDServerVersionBuild.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 9 then //GRIDService
        begin
          aTSOGRIDCentralDataModel.FGRIDService.FATI := i;
          aTSOGRIDCentralDataModel.FGRIDService.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 10 then //GRIDSystemProfile
        begin
          aTSOGRIDCentralDataModel.FGRIDSystemProfile.FATI := i;
          aTSOGRIDCentralDataModel.FGRIDSystemProfile.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;


    end
    else
    begin
      Break; //End of array list in Instance = -1
    end;
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
  StoredObject.SetModified(False);
end;

Function TGRIDClientServerDataModelCentralBOManager.BuildObject(aObjectClass : String; Const Guid : UInt32) : TObject;
var i : Integer;
    FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
 if aObjectClass = 'TSOGRIDCentralServiceItem' then
 begin
   Result := TSOGRIDCentralServiceItem.Create(Self);
   if guid <> High(UInt32) then
   begin
     TSOGRIDCentralServiceItem(Result).SetObjKeyRef(Guid); //Internal set in local buffer.
     TSOGRIDCentralServiceItem(Result).FObjKey := Guid; //Variable set.
     StoredObject.ChangeGUID(Guid, Result); //ClassManager list update.
   end;
 end;
 if aObjectClass = 'TSOGRIDSystemProfile' then
 begin
   Result := TSOGRIDSystemProfile.Create(Self);
   if guid <> High(UInt32) then
   begin
     TSOGRIDSystemProfile(Result).SetObjKeyRef(Guid); //Internal set in local buffer.
     TSOGRIDSystemProfile(Result).FObjKey := Guid; //Variable set.
     StoredObject.ChangeGUID(Guid, Result); //ClassManager list update.
   end;
 end;
 if aObjectClass = 'TSOGRIDCentralDataModel' then
 begin
   Result := TSOGRIDCentralDataModel.Create(Self);
   if guid <> High(UInt32) then
   begin
     TSOGRIDCentralDataModel(Result).SetObjKeyRef(Guid); //Internal set in local buffer.
     TSOGRIDCentralDataModel(Result).FObjKey := Guid; //Variable set.
     StoredObject.ChangeGUID(Guid, Result); //ClassManager list update.
   end;
 end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;

Constructor TGRIDClientServerDataModelCentralBOManager.Create;
Begin
  Inherited Create;
  StoredObject := TofStoredObject_UInt32Key.Create;
  StoredObject.StoredObjectClassManager := Self;
  RegisterClass;
end;

Procedure TGRIDClientServerDataModelCentralBOManager.PopulateObject( anObject : TObject; PropertyName, StringValue : String);
var i : integer;
    s : TStringList;
    ls : TList<String>;
    FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  if anObject Is TSOGRIDCentralServiceItem then
  begin
    if Lowercase(PropertyName) = 'serviceclass' then
    begin
      TSOGRIDCentralServiceItem(anObject).ServiceClass := StringValue;
    end;
    if Lowercase(PropertyName) = 'servicename' then
    begin
      TSOGRIDCentralServiceItem(anObject).ServiceName := StringValue;
    end;
    if Lowercase(PropertyName) = 'servicedesc' then
    begin
      TSOGRIDCentralServiceItem(anObject).ServiceDesc := StringValue;
    end;
    if Lowercase(PropertyName) = 'serviceinstanceid' then
    begin
      TSOGRIDCentralServiceItem(anObject).ServiceInstanceID := StringValue;
    end;
    if Lowercase(PropertyName) = 'servicestarted' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TSOGRIDCentralServiceItem(anObject).ServiceStarted := Boolean(StrToInt(StringValue));
    end;
    if Lowercase(PropertyName) = 'servicestartedon' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TSOGRIDCentralServiceItem(anObject).ServiceStartedOn := StrToDateTime(StringValue);
    end;
    if Lowercase(PropertyName) = 'servicethreadid' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TSOGRIDCentralServiceItem(anObject).ServiceThreadID := StrToInt(StringValue);
    end;
    if Lowercase(PropertyName) = 'servicecategory' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TSOGRIDCentralServiceItem(anObject).ServiceCategory := TSOGRIDCentralServiceCategory(StrToInt(StringValue));
    end;
  end;
  if anObject Is TSOGRIDSystemProfile then
  begin
    if Lowercase(PropertyName) = 'systemcpuload' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TSOGRIDSystemProfile(anObject).SystemCPULoad := StrToFloat(StringValue);
    end;
    if Lowercase(PropertyName) = 'systemcpuloadkernel' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TSOGRIDSystemProfile(anObject).SystemCPULoadKernel := StrToFloat(StringValue);
    end;
    if Lowercase(PropertyName) = 'systemcpupidletime' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TSOGRIDSystemProfile(anObject).SystemCPUPIdleTime := StrToFloat(StringValue);
    end;
    if Lowercase(PropertyName) = 'systemcpuusertime' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TSOGRIDSystemProfile(anObject).SystemCPUUserTime := StrToFloat(StringValue);
    end;
    if Lowercase(PropertyName) = 'systemcpukerneltime' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TSOGRIDSystemProfile(anObject).SystemCPUKernelTime := StrToFloat(StringValue);
    end;
    if Lowercase(PropertyName) = 'systemcpunicetime' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TSOGRIDSystemProfile(anObject).SystemCPUNiceTime := StrToFloat(StringValue);
    end;
    if Lowercase(PropertyName) = 'systemcapturedatetime' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TSOGRIDSystemProfile(anObject).SystemCaptureDateTime := StrToDateTime(StringValue);
    end;
  end;
  if anObject Is TSOGRIDCentralDataModel then
  begin
    if Lowercase(PropertyName) = 'gridservername' then
    begin
      TSOGRIDCentralDataModel(anObject).GRIDServerName := StringValue;
    end;
    if Lowercase(PropertyName) = 'gridserverdesc' then
    begin
      TSOGRIDCentralDataModel(anObject).GRIDServerDesc := StringValue;
    end;
    if Lowercase(PropertyName) = 'gridserverhost' then
    begin
      TSOGRIDCentralDataModel(anObject).GRIDServerHost := StringValue;
    end;
    if Lowercase(PropertyName) = 'gridserverinterface' then
    begin
      TSOGRIDCentralDataModel(anObject).GRIDServerInterface := StringValue;
    end;
    if Lowercase(PropertyName) = 'gridserverstartup' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TSOGRIDCentralDataModel(anObject).GRIDServerStartUp := StrToDateTime(StringValue);
    end;
    if Lowercase(PropertyName) = 'gridserverversionmajor' then
    begin
      TSOGRIDCentralDataModel(anObject).GRIDServerVersionMajor := StringValue;
    end;
    if Lowercase(PropertyName) = 'gridserverversionminor' then
    begin
      TSOGRIDCentralDataModel(anObject).GRIDServerVersionMinor := StringValue;
    end;
    if Lowercase(PropertyName) = 'gridserverversionbuild' then
    begin
      TSOGRIDCentralDataModel(anObject).GRIDServerVersionBuild := StringValue;
    end;
    if Lowercase(PropertyName) = 'gridservice' then
    begin
    end;
    if Lowercase(PropertyName) = 'gridsystemprofile' then
    begin
    end;
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDClientServerDataModelCentralBOManager.PopulateObjectStream( anObject : TObject; PropertyName : String; Value : TStream);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
if anObject Is TSOGRIDCentralServiceItem then
begin
end;
if anObject Is TSOGRIDSystemProfile then
begin
end;
if anObject Is TSOGRIDCentralDataModel then
begin
end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDClientServerDataModelCentralBOManager.PopulateObjectWithString( anObject : TObject; PropertyName : String; Value : String);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  if anObject Is TSOGRIDCentralServiceItem then
  begin
    if Lowercase(PropertyName) = 'serviceclass' then
    begin
      TSOGRIDCentralServiceItem(anObject).ServiceClass := Value;
    end;
    if Lowercase(PropertyName) = 'servicename' then
    begin
      TSOGRIDCentralServiceItem(anObject).ServiceName := Value;
    end;
    if Lowercase(PropertyName) = 'servicedesc' then
    begin
      TSOGRIDCentralServiceItem(anObject).ServiceDesc := Value;
    end;
    if Lowercase(PropertyName) = 'serviceinstanceid' then
    begin
      TSOGRIDCentralServiceItem(anObject).ServiceInstanceID := Value;
    end;
  end;
  if anObject Is TSOGRIDSystemProfile then
  begin
  end;
  if anObject Is TSOGRIDCentralDataModel then
  begin
    if Lowercase(PropertyName) = 'gridservername' then
    begin
      TSOGRIDCentralDataModel(anObject).GRIDServerName := Value;
    end;
    if Lowercase(PropertyName) = 'gridserverdesc' then
    begin
      TSOGRIDCentralDataModel(anObject).GRIDServerDesc := Value;
    end;
    if Lowercase(PropertyName) = 'gridserverhost' then
    begin
      TSOGRIDCentralDataModel(anObject).GRIDServerHost := Value;
    end;
    if Lowercase(PropertyName) = 'gridserverinterface' then
    begin
      TSOGRIDCentralDataModel(anObject).GRIDServerInterface := Value;
    end;
    if Lowercase(PropertyName) = 'gridserverversionmajor' then
    begin
      TSOGRIDCentralDataModel(anObject).GRIDServerVersionMajor := Value;
    end;
    if Lowercase(PropertyName) = 'gridserverversionminor' then
    begin
      TSOGRIDCentralDataModel(anObject).GRIDServerVersionMinor := Value;
    end;
    if Lowercase(PropertyName) = 'gridserverversionbuild' then
    begin
      TSOGRIDCentralDataModel(anObject).GRIDServerVersionBuild := Value;
    end;
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDClientServerDataModelCentralBOManager.PopulateObjectWithDouble( anObject : TObject; PropertyName : String; Value : Double);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  if anObject Is TSOGRIDCentralServiceItem then
  begin
  end;
  if anObject Is TSOGRIDSystemProfile then
  begin
    if Lowercase(PropertyName) = 'systemcpuload' then
    begin
      TSOGRIDSystemProfile(anObject).SystemCPULoad := Value;
    end;
    if Lowercase(PropertyName) = 'systemcpuloadkernel' then
    begin
      TSOGRIDSystemProfile(anObject).SystemCPULoadKernel := Value;
    end;
    if Lowercase(PropertyName) = 'systemcpupidletime' then
    begin
      TSOGRIDSystemProfile(anObject).SystemCPUPIdleTime := Value;
    end;
    if Lowercase(PropertyName) = 'systemcpuusertime' then
    begin
      TSOGRIDSystemProfile(anObject).SystemCPUUserTime := Value;
    end;
    if Lowercase(PropertyName) = 'systemcpukerneltime' then
    begin
      TSOGRIDSystemProfile(anObject).SystemCPUKernelTime := Value;
    end;
    if Lowercase(PropertyName) = 'systemcpunicetime' then
    begin
      TSOGRIDSystemProfile(anObject).SystemCPUNiceTime := Value;
    end;
  end;
  if anObject Is TSOGRIDCentralDataModel then
  begin
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDClientServerDataModelCentralBOManager.PopulateObjectWithInteger( anObject : TObject; PropertyName : String; Value : Integer);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  if anObject Is TSOGRIDCentralServiceItem then
  begin
    if Lowercase(PropertyName) = 'servicethreadid' then
    begin
      TSOGRIDCentralServiceItem(anObject).ServiceThreadID := Value;
    end;
  end;
  if anObject Is TSOGRIDSystemProfile then
  begin
  end;
  if anObject Is TSOGRIDCentralDataModel then
  begin
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDClientServerDataModelCentralBOManager.PopulateObjectWithDateTime( anObject : TObject; PropertyName : String; Value : TDateTime);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  if anObject Is TSOGRIDCentralServiceItem then
  begin
    if Lowercase(PropertyName) = 'servicestartedon' then
    begin
      TSOGRIDCentralServiceItem(anObject).ServiceStartedOn := Value;
    end;
  end;
  if anObject Is TSOGRIDSystemProfile then
  begin
    if Lowercase(PropertyName) = 'systemcapturedatetime' then
    begin
      TSOGRIDSystemProfile(anObject).SystemCaptureDateTime := Value;
    end;
  end;
  if anObject Is TSOGRIDCentralDataModel then
  begin
    if Lowercase(PropertyName) = 'gridserverstartup' then
    begin
      TSOGRIDCentralDataModel(anObject).GRIDServerStartUp := Value;
    end;
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDClientServerDataModelCentralBOManager.PopulateObjectWithUInt32( anObject : TObject; PropertyName : String; Value : UInt32);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  if anObject Is TSOGRIDCentralServiceItem then
  begin
  end;
  if anObject Is TSOGRIDSystemProfile then
  begin
  end;
  if anObject Is TSOGRIDCentralDataModel then
  begin
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDClientServerDataModelCentralBOManager.PopulateObjectWithInt64( anObject : TObject; PropertyName : String; Value : UInt64);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  if anObject Is TSOGRIDCentralServiceItem then
  begin
  end;
  if anObject Is TSOGRIDSystemProfile then
  begin
  end;
  if anObject Is TSOGRIDCentralDataModel then
  begin
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDClientServerDataModelCentralBOManager.PopulateObjectWithByte( anObject : TObject; PropertyName : String; Value : Byte);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  if anObject Is TSOGRIDCentralServiceItem then
  begin
    if Lowercase(PropertyName) = 'servicecategory' then
    begin
      TSOGRIDCentralServiceItem(anObject).ServiceCategory := TSOGRIDCentralServiceCategory(Value);
    end;
  end;
  if anObject Is TSOGRIDSystemProfile then
  begin
  end;
  if anObject Is TSOGRIDCentralDataModel then
  begin
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDClientServerDataModelCentralBOManager.PopulateObjectWithBoolean( anObject : TObject; PropertyName : String; Value : Boolean);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  if anObject Is TSOGRIDCentralServiceItem then
  begin
    if Lowercase(PropertyName) = 'servicestarted' then
    begin
      TSOGRIDCentralServiceItem(anObject).ServiceStarted := Value;
    end;
  end;
  if anObject Is TSOGRIDSystemProfile then
  begin
  end;
  if anObject Is TSOGRIDCentralDataModel then
  begin
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;

Procedure TGRIDClientServerDataModelCentralBOManager.RegisterClass;
Begin
  StoredObject.ClearAllData(True);
  StoredObject.RegisterClass('TSOGRIDCentralServiceItem');
  StoredObject.RegisterProperty('TSOGRIDCentralServiceItem','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralServiceItem','ServiceClass',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralServiceItem','ServiceName',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralServiceItem','ServiceDesc',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralServiceItem','ServiceInstanceID',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralServiceItem','ServiceStarted',ofssBoolean);
  StoredObject.RegisterProperty('TSOGRIDCentralServiceItem','ServiceStartedOn',ofssDateTime);
  StoredObject.RegisterProperty('TSOGRIDCentralServiceItem','ServiceThreadID',ofssInteger);
  StoredObject.RegisterProperty('TSOGRIDCentralServiceItem','ServiceCategory',ofssByte);
  StoredObject.RegisterClass('TSOGRIDSystemProfile');
  StoredObject.RegisterProperty('TSOGRIDSystemProfile','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TSOGRIDSystemProfile','SystemCPULoad',ofssDouble);
  StoredObject.RegisterProperty('TSOGRIDSystemProfile','SystemCPULoadKernel',ofssDouble);
  StoredObject.RegisterProperty('TSOGRIDSystemProfile','SystemCPUPIdleTime',ofssDouble);
  StoredObject.RegisterProperty('TSOGRIDSystemProfile','SystemCPUUserTime',ofssDouble);
  StoredObject.RegisterProperty('TSOGRIDSystemProfile','SystemCPUKernelTime',ofssDouble);
  StoredObject.RegisterProperty('TSOGRIDSystemProfile','SystemCPUNiceTime',ofssDouble);
  StoredObject.RegisterProperty('TSOGRIDSystemProfile','SystemCaptureDateTime',ofssDateTime);
  StoredObject.RegisterClass('TSOGRIDCentralDataModel');
  StoredObject.RegisterProperty('TSOGRIDCentralDataModel','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralDataModel','GRIDServerName',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralDataModel','GRIDServerDesc',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralDataModel','GRIDServerHost',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralDataModel','GRIDServerInterface',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralDataModel','GRIDServerStartUp',ofssDateTime);
  StoredObject.RegisterProperty('TSOGRIDCentralDataModel','GRIDServerVersionMajor',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralDataModel','GRIDServerVersionMinor',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralDataModel','GRIDServerVersionBuild',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralDataModel','GRIDService',ofssObjectList);
  StoredObject.RegisterProperty('TSOGRIDCentralDataModel','GRIDSystemProfile',ofssObject);
end;



End.


//--------- Original UpScript
{
project name GRIDClientServerDataModelCentralBO

include classes sysutils

define enum TSOGRIDCentralServiceCategory
                                            scLogger
                                            scComServer
                                            scCentralManagementService
                                            scProcessManagementService
                                            scBus
                                            scProcess
end

define class TSOGRIDCentralServiceItem
ServiceClass
ServiceName
ServiceDesc
ServiceInstanceID string
ServiceStarted bool
ServiceStartedOn DateTime
ServiceThreadID integer
ServiceCategory TSOGRIDCentralServiceCategory
end

define class TSOGRIDSystemProfile
SystemCPULoad
SystemCPULoadKernel
SystemCPUPIdleTime
SystemCPUUserTime
SystemCPUKernelTime
SystemCPUNiceTime Double
SystemCaptureDateTime datetime
end

define classlist TSOGRIDCentralServiceItemList of TSOGRIDCentralServiceItem

define class TSOGRIDCentralDataModel
GRIDServerName
GRIDServerDesc
GRIDServerHost
GRIDServerInterface string
GRIDServerStartUp datetime
GRIDServerVersionMajor
GRIDServerVersionMinor
GRIDServerVersionBuild string
GRIDService TSOGRIDCentralServiceItemList
GRIDSystemProfile TSOGRIDSystemProfile
end

}


