{*---------------------------------------------------*}
// UpScript Translator (ObjectPascal for StoredObject) AutoGenerated file.
{*---------------------------------------------------*}


Unit GMS.ClientServer.Protocol.Central.BO;
{*---------------------------------------------------*}
{$IFDEF FPC}
{$mode delphi}
{$ENDIF}


INTERFACE

//Include statement
Uses
  GS.StoredObject.Buffer, GS.StoredObject.BaseTypes, GS.StoredObject.Stream,
  {$IFNDEF FPC}
  System.Generics.collections,
  GS.StoredObject.Core,
  {$ELSE}
  Generics.collections,
  GS.StoredObject.Types_UINT32,
  GS.StoredObject.Core_NonGenerics,
  {$ENDIF }
  classes, sysutils;

{*---------------------------------------------------*}
Type

TGRIDClientServerProtocolCentralBOManager = Class;
TGRIDCentralServiceAskDefinition = Class;
TGRIDCentralServiceDefinitionResponse = Class;

//---- Class TGRIDCentralServiceAskDefinition (0 Field(s) and 0 method(s))
TGRIDCentralServiceAskDefinition = Class
  {$REGION 'StoredObject Technical stuffs for TGRIDCentralServiceAskDefinition'}
  StoredProtoAppClasses : TofStoredObject_UInt32Key; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : UInt32;

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : UInt32);
  Function GetObjKeyRef : UInt32;

Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolCentralBOManager); Virtual;
End;

//---- Class TGRIDCentralServiceDefinitionResponse (2 Field(s) and 0 method(s))
TGRIDCentralServiceDefinitionResponse = Class
Protected
  {$REGION 'StoredObject Technical stuffs for TGRIDCentralServiceDefinitionResponse'}
  StoredProtoAppClasses : TofStoredObject_UInt32Key; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : UInt32;
  FResult : TData_Def; //bool
  Fbuffer : TData_Def; //stream

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : UInt32);
  Function GetObjKeyRef : UInt32;

  Procedure SetResult(Value : Boolean);
  Function GetResult : Boolean;
  Procedure Setbuffer(Value : TStream);
  Function Getbuffer : TStream;
Public
  Constructor Create(Const aManager : TGRIDClientServerProtocolCentralBOManager); Virtual;
Published
  Property Result : Boolean read GetResult Write SetResult;
  Property buffer : TStream read Getbuffer Write Setbuffer;
End;



//------------------------------------------------------------
TGRIDClientServerProtocolCentralBOManager = class(TofStoredObjectClassManager_UInt32)
Protected
  Procedure InternalLoadCommon; Override;
Public
  Constructor Create; Virtual;
  Function BuildObject(aObjectClass : String; Const Guid : UInt32) : TObject; Override;
    Procedure PopulateObject( anObject : TObject; PropertyName, StringValue : String); Override;
    Procedure PopulateObjectStream( anObject : TObject; PropertyName : String; Value : TStream); Override;
  Procedure RegisterClass; Override;

end;


IMPLEMENTATION


//---- Class TGRIDCentralServiceAskDefinition

  Constructor TGRIDCentralServiceAskDefinition.Create(Const aManager : TGRIDClientServerProtocolCentralBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDCentralServiceAskDefinition.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDCentralServiceAskDefinition,'TGRIDCentralServiceAskDefinition Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDCentralServiceAskDefinition.SetObjKeyRef(Value : UInt32);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetUInt32(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TGRIDCentralServiceAskDefinition.GetObjKeyRef : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetUInt32(Self, FObjKeyRef.FATI,Result);
  End;


//---- Class TGRIDCentralServiceDefinitionResponse

  Constructor TGRIDCentralServiceDefinitionResponse.Create(Const aManager : TGRIDClientServerProtocolCentralBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FResult.FATI := -1;
    Fbuffer.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TGRIDCentralServiceDefinitionResponse.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TGRIDCentralServiceDefinitionResponse,'TGRIDCentralServiceDefinitionResponse Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TGRIDCentralServiceDefinitionResponse.SetObjKeyRef(Value : UInt32);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetUInt32(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TGRIDCentralServiceDefinitionResponse.GetObjKeyRef : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetUInt32(Self, FObjKeyRef.FATI,Result);
  End;

  Procedure TGRIDCentralServiceDefinitionResponse.SetResult(Value : Boolean);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetByte(Self, FObjKey,'Result',FResult.FATI,FResult.FData_Index,Byte(Value));
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDCentralServiceDefinitionResponse.SetResult(Value : bool) --> '+E.Message)
      end;
    end;
  End;

  Function TGRIDCentralServiceDefinitionResponse.GetResult : Boolean;
  var b : Byte;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetByte(Self,FResult.FATI,b);
      Result := Boolean(b);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDCentralServiceDefinitionResponse.GetResult : bool --> '+E.Message)
      end;
    end;
  End;

  Procedure TGRIDCentralServiceDefinitionResponse.Setbuffer(Value : TStream);
  var r : TArrayOfByte;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
      try
         SetLength(r,Value.Size);
         Value.ReadBuffer(Pointer(r)^,Value.Size);
         StoredProtoAppClasses.SeTArrayOfByte(Self, FObjKey,'buffer',Fbuffer.FATI,Fbuffer.FData_Index,r);
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TGRIDCentralServiceDefinitionResponse.Setbuffer(Value : stream) --> '+E.Message)
        end;
      end;
  End;

  Function TGRIDCentralServiceDefinitionResponse.Getbuffer : TStream;
  var r : TArrayOfByte;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
       Result := Nil;
       StoredProtoAppClasses.GetArrayOfByte(Self,Fbuffer.FATI,r);
       if length(r)>0 then
       Begin
         Result := TMemoryStream.Create;
         Result.WriteBuffer(Pointer(r)^,Length(r));
       end;
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TGRIDCentralServiceDefinitionResponse.Getbuffer : stream --> '+E.Message)
      end;
    end;
  End;


{TGRIDClientServerProtocolCentralBOManager}
//------------------------------------------------------------

Procedure TGRIDClientServerProtocolCentralBOManager.InternalLoadCommon;
var i : integer;
    cl : string;
    FAuditMem : Boolean;
    aTGRIDCentralServiceAskDefinition : TGRIDCentralServiceAskDefinition;
    aTGRIDCentralServiceDefinitionResponse : TGRIDCentralServiceDefinitionResponse;
    CurrentInstanceKey : UInt32;
    aSO : TofStoredObject_UInt32Key;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  CurrentInstanceKey := High(UInt32);
  aSO := TofStoredObject_UInt32Key(StoredObject);
  for i := Low(aSO.AllocationData.TableATI_Int) to High(aSO.AllocationData.TableATI_Int) do
  begin
    //Deleted object is ignored but still exists in the buffer : Ignore it.
    if aSO.AllocationData.TableATI_Int[i].MetaStatus = ToATIMetaStatus.omsDeleted then
      Continue;

    CurrentInstanceKey := aSO.AllocationData.TableATI_Int[i].InstanceIndex;

    if CurrentInstanceKey<>High(UInt32) then
    begin

      if Not( Assigned(aSO.LookForObject(CurrentInstanceKey)) ) then
      begin
        //Object does not exists yet : Build.

        //Create object.
        cl := aSO.DefinitionData.Classes[aSO.AllocationData.TableATI_Int[i].MetaClassIndex].ClassName;
        if cl = 'TGRIDCentralServiceAskDefinition' then
        begin
          aTGRIDCentralServiceAskDefinition := TGRIDCentralServiceAskDefinition.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDCentralServiceAskDefinition.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDCentralServiceAskDefinition.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDCentralServiceAskDefinition);
          end;
        end
        else
        if cl = 'TGRIDCentralServiceDefinitionResponse' then
        begin
          aTGRIDCentralServiceDefinitionResponse := TGRIDCentralServiceDefinitionResponse.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTGRIDCentralServiceDefinitionResponse.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTGRIDCentralServiceDefinitionResponse.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTGRIDCentralServiceDefinitionResponse);
          end;
        end
        else
        begin
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 0 then //TGRIDCentralServiceAskDefinition
      begin
        aTGRIDCentralServiceAskDefinition := TGRIDCentralServiceAskDefinition(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDCentralServiceAskDefinition class.
        begin
          aTGRIDCentralServiceAskDefinition.FObjKeyRef.FATI := i;
          aTGRIDCentralServiceAskDefinition.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 1 then //TGRIDCentralServiceDefinitionResponse
      begin
        aTGRIDCentralServiceDefinitionResponse := TGRIDCentralServiceDefinitionResponse(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TGRIDCentralServiceDefinitionResponse class.
        begin
          aTGRIDCentralServiceDefinitionResponse.FObjKeyRef.FATI := i;
          aTGRIDCentralServiceDefinitionResponse.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //Result
        begin
          aTGRIDCentralServiceDefinitionResponse.FResult.FATI := i;
          aTGRIDCentralServiceDefinitionResponse.FResult.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //buffer
        begin
          aTGRIDCentralServiceDefinitionResponse.Fbuffer.FATI := i;
          aTGRIDCentralServiceDefinitionResponse.Fbuffer.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;


    end
    else
    begin
      Break; //End of array list in Instance = -1
    end;
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
  StoredObject.SetModified(False);
end;

Function TGRIDClientServerProtocolCentralBOManager.BuildObject(aObjectClass : String; Const Guid : UInt32) : TObject;
var i : Integer;
    FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
 if aObjectClass = 'TGRIDCentralServiceAskDefinition' then
 begin
   Result := TGRIDCentralServiceAskDefinition.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDCentralServiceAskDefinition(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TGRIDCentralServiceDefinitionResponse' then
 begin
   Result := TGRIDCentralServiceDefinitionResponse.Create(Self);
   if guid <> High(UInt32) then
   begin
     TGRIDCentralServiceDefinitionResponse(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;

Constructor TGRIDClientServerProtocolCentralBOManager.Create;
Begin
  StoredObject := TofStoredObject_UInt32Key.Create;
  TofStoredObject_UInt32Key(StoredObject).StoredObjectClassManager := Self;
  RegisterClass;
end;

Procedure TGRIDClientServerProtocolCentralBOManager.PopulateObject( anObject : TObject; PropertyName, StringValue : String);
var i : integer;
    s : TStringList;
    ls : TList<String>;
Begin
if anObject Is TGRIDCentralServiceAskDefinition then
begin
end;
if anObject Is TGRIDCentralServiceDefinitionResponse then
begin
  if length(StringValue)=0 then
    StringValue := '0';
  if Lowercase(PropertyName) = 'result' then
  begin
    TGRIDCentralServiceDefinitionResponse(anObject).Result := Boolean(StrToInt(StringValue));
  end;
  //if Lowercase(PropertyName) = 'buffer' then
  //begin
  //  TGRIDCentralServiceDefinitionResponse(anObject).buffer := ToStream(StringValue);
  //end;
end;
end;
Procedure TGRIDClientServerProtocolCentralBOManager.PopulateObjectStream( anObject : TObject; PropertyName : String; Value : TStream);
Begin
if anObject Is TGRIDCentralServiceAskDefinition then
begin
end;
if anObject Is TGRIDCentralServiceDefinitionResponse then
begin
  if Lowercase(PropertyName) = 'buffer' then
  begin
    Value.Position := 0;
    TGRIDCentralServiceDefinitionResponse(anObject).buffer := Value;
  end;
end;
end;

Procedure TGRIDClientServerProtocolCentralBOManager.RegisterClass;
Begin
  StoredObject.ClearAllData(True);
  StoredObject.RegisterClass('TGRIDCentralServiceAskDefinition');
  StoredObject.RegisterProperty('TGRIDCentralServiceAskDefinition','ObjKeyRef',ofssString);
  StoredObject.RegisterClass('TGRIDCentralServiceDefinitionResponse');
  StoredObject.RegisterProperty('TGRIDCentralServiceDefinitionResponse','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TGRIDCentralServiceDefinitionResponse','Result',ofssBoolean);
  StoredObject.RegisterProperty('TGRIDCentralServiceDefinitionResponse','buffer',ofssBlob);
end;



End.


//--------- Original UpScript
{
project name GRIDClientServerProtocolCentralBO

include classes sysutils

def forward
TGRIDCentralServiceAskDefinition
TGRIDCentralServiceDefinitionResponse
end

define class TGRIDCentralServiceAskDefinition
end

define class TGRIDCentralServiceDefinitionResponse
Result bool
buffer stream
end



}

