{*---------------------------------------------------*}
// UpScript Translator (ObjectPascal for StoredObject) AutoGenerated file.
{*---------------------------------------------------*}


Unit GMS.Server.Services.SSDPLikeServer.DataModel.BO;
{*---------------------------------------------------*}
{$IFDEF FPC}
{$mode delphi}
{$ENDIF}


INTERFACE

//Include statement
Uses
  GS.StoredObject.Buffer, GS.StoredObject.BaseTypes, GS.StoredObject.Stream,
  {$IFNDEF FPC}
  System.Generics.collections,
  GS.StoredObject.Core,
  {$ELSE}
  Generics.collections,
  GS.StoredObject.Types_UINT32,
  GS.StoredObject.Core_NonGenerics,
  {$ENDIF }
  classes, sysutils;

{*---------------------------------------------------*}
Type

TSOGRIDSSDPLikeDataModelManager = Class;
TSOSSDPService = Class;
TSOSSDPDevice = Class;
TSOSSDPDatamodel = Class;
//TSOSSDPServiceList = Class; Not used
//TSOSSDPDeviceList = Class; Not used

//---- Class TSOSSDPService (2 Field(s) and 0 method(s))
TSOSSDPService = Class
Protected
  {$REGION 'StoredObject Technical stuffs for TSOSSDPService'}
  StoredProtoAppClasses : TofStoredObject_UInt32Key; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : UInt32;
  FServiceName : TData_Def; //string
  FServiceType : TData_Def; //string

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : UInt32);
  Function GetObjKeyRef : UInt32;

  Procedure SetServiceName(Value : String);
  Function GetServiceName : String;
  Procedure SetServiceType(Value : String);
  Function GetServiceType : String;
Public
  Constructor Create(Const aManager : TSOGRIDSSDPLikeDataModelManager); Virtual;
Published
  Property ServiceName : String read GetServiceName Write SetServiceName;
  Property ServiceType : String read GetServiceType Write SetServiceType;
End;

//---- Class TSOSSDPDevice (4 Field(s) and 0 method(s))
TSOSSDPDevice = Class
Protected
  {$REGION 'StoredObject Technical stuffs for TSOSSDPDevice'}
  StoredProtoAppClasses : TofStoredObject_UInt32Key; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : UInt32;
  FLocation : TData_Def; //String
  FServerName : TData_Def; //String
  FServiceList : TData_Def; //TSOSSDPServiceList
  FUNS : TData_Def; //string

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : UInt32);
  Function GetObjKeyRef : UInt32;

  Procedure SetLocation(Value : String);
  Function GetLocation : String;
  Procedure SetServerName(Value : String);
  Function GetServerName : String;
  Procedure SetServiceList(Index : Integer; Const Value : TSOSSDPService);
  Function GetServiceList(Index : Integer) : TSOSSDPService;
  Procedure SetUNS(Value : String);
  Function GetUNS : String;
Public
  Constructor Create(Const aManager : TSOGRIDSSDPLikeDataModelManager); Virtual;
  Procedure AddServiceList(aTSOSSDPService : TSOSSDPService);
  Procedure RemoveServiceList(aTSOSSDPService : TSOSSDPService);
  Function ServiceListCount : Integer;
  //Procedure IsServiceListExists(aTSOSSDPService : TSOSSDPService);
  Property ServiceList[Index : Integer] : TSOSSDPService read GetServiceList Write SetServiceList;
Published
  Property Location : String read GetLocation Write SetLocation;
  Property ServerName : String read GetServerName Write SetServerName;
  Property UNS : String read GetUNS Write SetUNS;
End;

//---- Class TSOSSDPDatamodel (3 Field(s) and 0 method(s))
TSOSSDPDatamodel = Class
Protected
  {$REGION 'StoredObject Technical stuffs for TSOSSDPDatamodel'}
  StoredProtoAppClasses : TofStoredObject_UInt32Key; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : UInt32;
  FProduct : TData_Def; //string
  FVersion : TData_Def; //string
  FDeviceList : TData_Def; //TSOSSDPDeviceList

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : UInt32);
  Function GetObjKeyRef : UInt32;

  Procedure SetProduct(Value : String);
  Function GetProduct : String;
  Procedure SetVersion(Value : String);
  Function GetVersion : String;
  Procedure SetDeviceList(Index : Integer; Const Value : TSOSSDPDevice);
  Function GetDeviceList(Index : Integer) : TSOSSDPDevice;
Public
  Constructor Create(Const aManager : TSOGRIDSSDPLikeDataModelManager); Virtual;
  Procedure AddDeviceList(aTSOSSDPDevice : TSOSSDPDevice);
  Procedure RemoveDeviceList(aTSOSSDPDevice : TSOSSDPDevice);
  Function DeviceListCount : Integer;
  //Procedure IsDeviceListExists(aTSOSSDPDevice : TSOSSDPDevice);
  Property DeviceList[Index : Integer] : TSOSSDPDevice read GetDeviceList Write SetDeviceList;
Published
  Property Product : String read GetProduct Write SetProduct;
  Property Version : String read GetVersion Write SetVersion;
End;

//---- Class List TSOSSDPServiceList (of type TSOSSDPService) : NOT USED in StoredObject Mode

//---- Class List TSOSSDPDeviceList (of type TSOSSDPDevice) : NOT USED in StoredObject Mode



//------------------------------------------------------------
TSOGRIDSSDPLikeDataModelManager = class(TofStoredObjectClassManager_UInt32)
Protected
  Procedure InternalLoadCommon; Override;
Public
  Constructor Create; Virtual;
  Function BuildObject(aObjectClass : String; Const Guid : UInt32) : TObject; Override;
    Procedure PopulateObject( anObject : TObject; PropertyName, StringValue : String); Override;
    Procedure PopulateObjectStream( anObject : TObject; PropertyName : String; Value : TStream); Override;
  Procedure RegisterClass; Override;

end;


IMPLEMENTATION


//---- Class TSOSSDPService

  Constructor TSOSSDPService.Create(Const aManager : TSOGRIDSSDPLikeDataModelManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FServiceName.FATI := -1;
    FServiceType.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TSOSSDPService.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TSOSSDPService,'TSOSSDPService Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TSOSSDPService.SetObjKeyRef(Value : UInt32);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetUInt32(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TSOSSDPService.GetObjKeyRef : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetUInt32(Self, FObjKeyRef.FATI,Result);
  End;

  Procedure TSOSSDPService.SetServiceName(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'ServiceName',FServiceName.FATI,FServiceName.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPService.SetServiceName(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOSSDPService.GetServiceName : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FServiceName.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPService.GetServiceName : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOSSDPService.SetServiceType(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'ServiceType',FServiceType.FATI,FServiceType.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPService.SetServiceType(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOSSDPService.GetServiceType : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FServiceType.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPService.GetServiceType : string --> '+E.Message)
      end;
    end;
  End;


//---- Class TSOSSDPDevice

  Constructor TSOSSDPDevice.Create(Const aManager : TSOGRIDSSDPLikeDataModelManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FLocation.FATI := -1;
    FServerName.FATI := -1;
    FServiceList.FATI := -1;
    FUNS.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TSOSSDPDevice.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TSOSSDPDevice,'TSOSSDPDevice Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TSOSSDPDevice.SetObjKeyRef(Value : UInt32);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetUInt32(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TSOSSDPDevice.GetObjKeyRef : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetUInt32(Self, FObjKeyRef.FATI,Result);
  End;

  Procedure TSOSSDPDevice.SetLocation(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'Location',FLocation.FATI,FLocation.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPDevice.SetLocation(Value : String) --> '+E.Message)
      end;
    end;
  End;

  Function TSOSSDPDevice.GetLocation : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FLocation.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPDevice.GetLocation : String --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOSSDPDevice.SetServerName(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'ServerName',FServerName.FATI,FServerName.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPDevice.SetServerName(Value : String) --> '+E.Message)
      end;
    end;
  End;

  Function TSOSSDPDevice.GetServerName : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FServerName.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPDevice.GetServerName : String --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOSSDPDevice.SetServiceList(Index : Integer; Const Value : TSOSSDPService);
  var a : String;
      Tools : TList<UInt32>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Assert(Assigned(Value)); //Nil forbiden
    Tools :=  TList<UInt32>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfUint32(Self,FServiceList.FATI,Tools);
        if Tools.Count>=Index then
        begin
          Tools[Index] := Value.FObjKey;
          StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'ServiceList',FServiceList.FATI,FServiceList.FData_Index,Tools);
        end
        else
        begin
          raise Exception.Create('Index overflow : Total ServiceList object Count = '+IntToStr(Tools.Count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOSSDPDevice.SetServiceList'+ E.Message);
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
  End;

  Function TSOSSDPDevice.GetServiceList(Index : Integer) : TSOSSDPService;
  var a : String;
      Tools : TList<UInt32>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Tools :=  TList<UInt32>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfUInt32(Self,FServiceList.FATI,Tools);
        if (Tools.Count>Index) then
        Begin
          Result := TSOSSDPService(StoredProtoAppClasses.BusinessObjects[Tools[Index]]);
        End
        Else
        Begin
          Raise Exception.Create('Index overflow : Total ServiceList count = '+IntToStr(Tools.count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOSSDPDevice.GetServiceList : '+E.Message)
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
    if Result = nil then
      raise Exception.Create('TSOSSDPDevice.GetServiceList('+IntToStr(Index)+') unassigned');
  End;

  Procedure TSOSSDPDevice.SetUNS(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'UNS',FUNS.FATI,FUNS.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPDevice.SetUNS(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOSSDPDevice.GetUNS : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FUNS.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPDevice.GetUNS : string --> '+E.Message)
      end;
    end;
  End;


  Procedure TSOSSDPDevice.AddServiceList(aTSOSSDPService : TSOSSDPService);
  var Tools : TList<UInt32>;
  Begin
    Assert(Assigned(aTSOSSDPService));
    Tools :=  TList<UInt32>.Create;
    try
      StoredProtoAppClasses.GetListOfUInt32(Self,FServiceList.FATI,Tools);
      Tools.Add(aTSOSSDPService.FObjKey); //No "if IndexOf()" test : Mutli-occurence is allowed (See AddExternalRef)
      StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'ServiceList',FServiceList.FATI,FServiceList.FData_Index,Tools);
    finally
      FreeAndNil(Tools);
    end;
  end;

  Procedure TSOSSDPDevice.RemoveServiceList(aTSOSSDPService : TSOSSDPService);
  var Tools : TList<UInt32>;
      lk : Int64;
  Begin
    Assert(Assigned(aTSOSSDPService));
    Tools :=  TList<UInt32>.Create;
    try
      StoredProtoAppClasses.GetListOfUInt32(Self,FServiceList.FATI,Tools);
      lk := Tools.IndexOf(aTSOSSDPService.FObjKey);
      if lk>-1 then
      begin
        Tools.Delete(lk);
        StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'ServiceList',FServiceList.FATI,FServiceList.FData_Index,Tools);
      end;
    finally
      FreeAndNil(Tools);
    end;
  end;

  Function TSOSSDPDevice.ServiceListCount : Integer;
  Begin
    Result := StoredProtoAppClasses.GetListItemCount(FServiceList.FData_Index);
  end;


//---- Class TSOSSDPDatamodel

  Constructor TSOSSDPDatamodel.Create(Const aManager : TSOGRIDSSDPLikeDataModelManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FProduct.FATI := -1;
    FVersion.FATI := -1;
    FDeviceList.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TSOSSDPDatamodel.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TSOSSDPDatamodel,'TSOSSDPDatamodel Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TSOSSDPDatamodel.SetObjKeyRef(Value : UInt32);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetUInt32(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TSOSSDPDatamodel.GetObjKeyRef : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetUInt32(Self, FObjKeyRef.FATI,Result);
  End;

  Procedure TSOSSDPDatamodel.SetProduct(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'Product',FProduct.FATI,FProduct.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPDatamodel.SetProduct(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOSSDPDatamodel.GetProduct : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FProduct.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPDatamodel.GetProduct : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOSSDPDatamodel.SetVersion(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'Version',FVersion.FATI,FVersion.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPDatamodel.SetVersion(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOSSDPDatamodel.GetVersion : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FVersion.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPDatamodel.GetVersion : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOSSDPDatamodel.SetDeviceList(Index : Integer; Const Value : TSOSSDPDevice);
  var a : String;
      Tools : TList<UInt32>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Assert(Assigned(Value)); //Nil forbiden
    Tools :=  TList<UInt32>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfUint32(Self,FDeviceList.FATI,Tools);
        if Tools.Count>=Index then
        begin
          Tools[Index] := Value.FObjKey;
          StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'DeviceList',FDeviceList.FATI,FDeviceList.FData_Index,Tools);
        end
        else
        begin
          raise Exception.Create('Index overflow : Total DeviceList object Count = '+IntToStr(Tools.Count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOSSDPDatamodel.SetDeviceList'+ E.Message);
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
  End;

  Function TSOSSDPDatamodel.GetDeviceList(Index : Integer) : TSOSSDPDevice;
  var a : String;
      Tools : TList<UInt32>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Tools :=  TList<UInt32>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfUInt32(Self,FDeviceList.FATI,Tools);
        if (Tools.Count>Index) then
        Begin
          Result := TSOSSDPDevice(StoredProtoAppClasses.BusinessObjects[Tools[Index]]);
        End
        Else
        Begin
          Raise Exception.Create('Index overflow : Total DeviceList count = '+IntToStr(Tools.count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOSSDPDatamodel.GetDeviceList : '+E.Message)
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
    if Result = nil then
      raise Exception.Create('TSOSSDPDatamodel.GetDeviceList('+IntToStr(Index)+') unassigned');
  End;


  Procedure TSOSSDPDatamodel.AddDeviceList(aTSOSSDPDevice : TSOSSDPDevice);
  var Tools : TList<UInt32>;
  Begin
    Assert(Assigned(aTSOSSDPDevice));
    Tools :=  TList<UInt32>.Create;
    try
      StoredProtoAppClasses.GetListOfUInt32(Self,FDeviceList.FATI,Tools);
      Tools.Add(aTSOSSDPDevice.FObjKey); //No "if IndexOf()" test : Mutli-occurence is allowed (See AddExternalRef)
      StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'DeviceList',FDeviceList.FATI,FDeviceList.FData_Index,Tools);
    finally
      FreeAndNil(Tools);
    end;
  end;

  Procedure TSOSSDPDatamodel.RemoveDeviceList(aTSOSSDPDevice : TSOSSDPDevice);
  var Tools : TList<UInt32>;
      lk : Int64;
  Begin
    Assert(Assigned(aTSOSSDPDevice));
    Tools :=  TList<UInt32>.Create;
    try
      StoredProtoAppClasses.GetListOfUInt32(Self,FDeviceList.FATI,Tools);
      lk := Tools.IndexOf(aTSOSSDPDevice.FObjKey);
      if lk>-1 then
      begin
        Tools.Delete(lk);
        StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'DeviceList',FDeviceList.FATI,FDeviceList.FData_Index,Tools);
      end;
    finally
      FreeAndNil(Tools);
    end;
  end;

  Function TSOSSDPDatamodel.DeviceListCount : Integer;
  Begin
    Result := StoredProtoAppClasses.GetListItemCount(FDeviceList.FData_Index);
  end;


{TSOGRIDSSDPLikeDataModelManager}
//------------------------------------------------------------

Procedure TSOGRIDSSDPLikeDataModelManager.InternalLoadCommon;
var i : integer;
    cl : string;
    FAuditMem : Boolean;
    aTSOSSDPService : TSOSSDPService;
    aTSOSSDPDevice : TSOSSDPDevice;
    aTSOSSDPDatamodel : TSOSSDPDatamodel;
    CurrentInstanceKey : UInt32;
    aSO : TofStoredObject_UInt32Key;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  CurrentInstanceKey := High(UInt32);
  aSO := TofStoredObject_UInt32Key(StoredObject);
  for i := Low(aSO.AllocationData.TableATI_Int) to High(aSO.AllocationData.TableATI_Int) do
  begin
    //Deleted object is ignored but still exists in the buffer : Ignore it.
    if aSO.AllocationData.TableATI_Int[i].MetaStatus = ToATIMetaStatus.omsDeleted then
      Continue;

    CurrentInstanceKey := aSO.AllocationData.TableATI_Int[i].InstanceIndex;

    if CurrentInstanceKey<>High(UInt32) then
    begin

      if Not( Assigned(aSO.LookForObject(CurrentInstanceKey)) ) then
      begin
        //Object does not exists yet : Build.

        //Create object.
        cl := aSO.DefinitionData.Classes[aSO.AllocationData.TableATI_Int[i].MetaClassIndex].ClassName;
        if cl = 'TSOSSDPService' then
        begin
          aTSOSSDPService := TSOSSDPService.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTSOSSDPService.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTSOSSDPService.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTSOSSDPService);
          end;
        end
        else
        if cl = 'TSOSSDPDevice' then
        begin
          aTSOSSDPDevice := TSOSSDPDevice.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTSOSSDPDevice.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTSOSSDPDevice.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTSOSSDPDevice);
          end;
        end
        else
        if cl = 'TSOSSDPDatamodel' then
        begin
          aTSOSSDPDatamodel := TSOSSDPDatamodel.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTSOSSDPDatamodel.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTSOSSDPDatamodel.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTSOSSDPDatamodel);
          end;
        end
        else
        begin
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 0 then //TSOSSDPService
      begin
        aTSOSSDPService := TSOSSDPService(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TSOSSDPService class.
        begin
          aTSOSSDPService.FObjKeyRef.FATI := i;
          aTSOSSDPService.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //ServiceName
        begin
          aTSOSSDPService.FServiceName.FATI := i;
          aTSOSSDPService.FServiceName.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //ServiceType
        begin
          aTSOSSDPService.FServiceType.FATI := i;
          aTSOSSDPService.FServiceType.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 1 then //TSOSSDPDevice
      begin
        aTSOSSDPDevice := TSOSSDPDevice(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TSOSSDPDevice class.
        begin
          aTSOSSDPDevice.FObjKeyRef.FATI := i;
          aTSOSSDPDevice.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //Location
        begin
          aTSOSSDPDevice.FLocation.FATI := i;
          aTSOSSDPDevice.FLocation.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //ServerName
        begin
          aTSOSSDPDevice.FServerName.FATI := i;
          aTSOSSDPDevice.FServerName.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 3 then //ServiceList
        begin
          aTSOSSDPDevice.FServiceList.FATI := i;
          aTSOSSDPDevice.FServiceList.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 4 then //UNS
        begin
          aTSOSSDPDevice.FUNS.FATI := i;
          aTSOSSDPDevice.FUNS.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 2 then //TSOSSDPDatamodel
      begin
        aTSOSSDPDatamodel := TSOSSDPDatamodel(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TSOSSDPDatamodel class.
        begin
          aTSOSSDPDatamodel.FObjKeyRef.FATI := i;
          aTSOSSDPDatamodel.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //Product
        begin
          aTSOSSDPDatamodel.FProduct.FATI := i;
          aTSOSSDPDatamodel.FProduct.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //Version
        begin
          aTSOSSDPDatamodel.FVersion.FATI := i;
          aTSOSSDPDatamodel.FVersion.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 3 then //DeviceList
        begin
          aTSOSSDPDatamodel.FDeviceList.FATI := i;
          aTSOSSDPDatamodel.FDeviceList.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;


    end
    else
    begin
      Break; //End of array list in Instance = -1
    end;
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
  StoredObject.SetModified(False);
end;

Function TSOGRIDSSDPLikeDataModelManager.BuildObject(aObjectClass : String; Const Guid : UInt32) : TObject;
var i : Integer;
    FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
 if aObjectClass = 'TSOSSDPService' then
 begin
   Result := TSOSSDPService.Create(Self);
   if guid <> High(UInt32) then
   begin
     TSOSSDPService(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TSOSSDPDevice' then
 begin
   Result := TSOSSDPDevice.Create(Self);
   if guid <> High(UInt32) then
   begin
     TSOSSDPDevice(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TSOSSDPDatamodel' then
 begin
   Result := TSOSSDPDatamodel.Create(Self);
   if guid <> High(UInt32) then
   begin
     TSOSSDPDatamodel(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;

Constructor TSOGRIDSSDPLikeDataModelManager.Create;
Begin
  StoredObject := TofStoredObject_UInt32Key.Create;
  StoredObject.StoredObjectClassManager := Self;
  RegisterClass;
end;

Procedure TSOGRIDSSDPLikeDataModelManager.PopulateObject( anObject : TObject; PropertyName, StringValue : String);
var i : integer;
    s : TStringList;
    ls : TList<String>;
Begin
if anObject Is TSOSSDPService then
begin
  if Lowercase(PropertyName) = 'servicename' then
  begin
    TSOSSDPService(anObject).ServiceName := StringValue;
  end;
  if Lowercase(PropertyName) = 'servicetype' then
  begin
    TSOSSDPService(anObject).ServiceType := StringValue;
  end;
end;
if anObject Is TSOSSDPDevice then
begin
  if Lowercase(PropertyName) = 'location' then
  begin
    TSOSSDPDevice(anObject).Location := StringValue;
  end;
  if Lowercase(PropertyName) = 'servername' then
  begin
    TSOSSDPDevice(anObject).ServerName := StringValue;
  end;
  if Lowercase(PropertyName) = 'servicelist' then
  begin
  end;
  if Lowercase(PropertyName) = 'uns' then
  begin
    TSOSSDPDevice(anObject).UNS := StringValue;
  end;
end;
if anObject Is TSOSSDPDatamodel then
begin
  if Lowercase(PropertyName) = 'product' then
  begin
    TSOSSDPDatamodel(anObject).Product := StringValue;
  end;
  if Lowercase(PropertyName) = 'version' then
  begin
    TSOSSDPDatamodel(anObject).Version := StringValue;
  end;
  if Lowercase(PropertyName) = 'devicelist' then
  begin
  end;
end;
end;
Procedure TSOGRIDSSDPLikeDataModelManager.PopulateObjectStream( anObject : TObject; PropertyName : String; Value : TStream);
Begin
if anObject Is TSOSSDPService then
begin
end;
if anObject Is TSOSSDPDevice then
begin
end;
if anObject Is TSOSSDPDatamodel then
begin
end;
end;

Procedure TSOGRIDSSDPLikeDataModelManager.RegisterClass;
Begin
  StoredObject.ClearAllData(True);
  StoredObject.RegisterClass('TSOSSDPService');
  StoredObject.RegisterProperty('TSOSSDPService','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TSOSSDPService','ServiceName',ofssString);
  StoredObject.RegisterProperty('TSOSSDPService','ServiceType',ofssString);
  StoredObject.RegisterClass('TSOSSDPDevice');
  StoredObject.RegisterProperty('TSOSSDPDevice','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TSOSSDPDevice','Location',ofssString);
  StoredObject.RegisterProperty('TSOSSDPDevice','ServerName',ofssString);
  StoredObject.RegisterProperty('TSOSSDPDevice','ServiceList',ofssObjectList);
  StoredObject.RegisterProperty('TSOSSDPDevice','UNS',ofssString);
  StoredObject.RegisterClass('TSOSSDPDatamodel');
  StoredObject.RegisterProperty('TSOSSDPDatamodel','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TSOSSDPDatamodel','Product',ofssString);
  StoredObject.RegisterProperty('TSOSSDPDatamodel','Version',ofssString);
  StoredObject.RegisterProperty('TSOSSDPDatamodel','DeviceList',ofssObjectList);
end;



End.


//--------- Original UpScript
{
project name GRIDServerServicesSSDPLikeServerDataModelBO

include classes sysutils

def forward TSOSSDPServiceList end
def forward TSOSSDPDeviceList end

define class TSOSSDPService
ServiceName ServiceType string
end

define class TSOSSDPDevice
Location ServerName String
ServiceList TSOSSDPServiceList
UNS string
end

define class TSOSSDPDatamodel
Product Version string
DeviceList TSOSSDPDeviceList
end

define classlist TSOSSDPServiceList of TSOSSDPService
define classlist TSOSSDPDeviceList of TSOSSDPDevice


}

