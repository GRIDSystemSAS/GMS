{*---------------------------------------------------*}
// UpScript Translator (ObjectPascal for StoredObject) AutoGenerated file.
// Generation Option ExternalRefKey  : False
// Generation Option PrimaryKey Type : String
// Generation Date : 2017/12/16 21.59.48
{*---------------------------------------------------*}

Unit GMS.Server.DataModel.Central.UserManagement.BO;
{*---------------------------------------------------*}
{$IFDEF FPC}
{$mode delphi}
{$ENDIF}


INTERFACE

//Include statement
Uses
  GS.StoredObject.Buffer, GS.StoredObject.BaseTypes, GS.StoredObject.Stream,
  {$IFNDEF FPC}
  System.Generics.collections,
  GS.StoredObject.Core,
  {$ELSE}
  Generics.collections,
  GS.StoredObject.Types_STRING,
  GS.StoredObject.Core_NonGenerics,
  {$ENDIF }
  classes, sysutils;

{*---------------------------------------------------*}
Type

TGRIDServerDataModelCentralUserManagementBOManager = Class;
TSOGRIDCentralUserManager = Class;
TSOGRIDCentralUser = Class;
TSOGRIDCentralSession = Class;
TSOGRIDCentralUserDirectoryEntry = Class;
TSOGRIDCentralGroup = Class;
//TSOGRIDCentralUserDirectory = Class; Not used
//TSOGRIDCentralUserList = Class; Not used
//TSOGRIDCentralGroupList = Class; Not used
//TSOGRIDCentralSessionList = Class; Not used

//---- Enum TSOGRIDCentralGroupRight (4 enumerate(s))
TSOGRIDCentralGroupRight = (grALL,grREAD,grWRITE,grNONE);

//---- Class TSOGRIDCentralUserManager (3 Field(s) and 0 method(s))
TSOGRIDCentralUserManager = Class
Protected
  {$REGION 'StoredObject Technical stuffs for TSOGRIDCentralUserManager'}
  StoredProtoAppClasses : TofStoredObject_StringKey; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : String;
  FUserList : TData_Def; //TSOGRIDCentralUserList
  FGroupList : TData_Def; //TSOGRIDCentralGroupList
  FSessionList : TData_Def; //TSOGRIDCentralSessionList

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : String);
  Function GetObjKeyRef : String;

  Procedure SetUserList(Index : Integer; Const Value : TSOGRIDCentralUser);
  Function GetUserList(Index : Integer) : TSOGRIDCentralUser;
  Procedure SetGroupList(Index : Integer; Const Value : TSOGRIDCentralGroup);
  Function GetGroupList(Index : Integer) : TSOGRIDCentralGroup;
  Procedure SetSessionList(Index : Integer; Const Value : TSOGRIDCentralSession);
  Function GetSessionList(Index : Integer) : TSOGRIDCentralSession;
Public
  Constructor Create(Const aManager : TGRIDServerDataModelCentralUserManagementBOManager); Virtual;
  Procedure AddUserList(aTSOGRIDCentralUser : TSOGRIDCentralUser);
  Procedure RemoveUserList(aTSOGRIDCentralUser : TSOGRIDCentralUser);
  Function UserListCount : Integer;
  //Procedure IsUserListExists(aTSOGRIDCentralUser : TSOGRIDCentralUser);
  Procedure AddGroupList(aTSOGRIDCentralGroup : TSOGRIDCentralGroup);
  Procedure RemoveGroupList(aTSOGRIDCentralGroup : TSOGRIDCentralGroup);
  Function GroupListCount : Integer;
  //Procedure IsGroupListExists(aTSOGRIDCentralGroup : TSOGRIDCentralGroup);
  Procedure AddSessionList(aTSOGRIDCentralSession : TSOGRIDCentralSession);
  Procedure RemoveSessionList(aTSOGRIDCentralSession : TSOGRIDCentralSession);
  Function SessionListCount : Integer;
  //Procedure IsSessionListExists(aTSOGRIDCentralSession : TSOGRIDCentralSession);
  Property UserList[Index : Integer] : TSOGRIDCentralUser read GetUserList Write SetUserList;
  Property GroupList[Index : Integer] : TSOGRIDCentralGroup read GetGroupList Write SetGroupList;
  Property SessionList[Index : Integer] : TSOGRIDCentralSession read GetSessionList Write SetSessionList;
Published
End;

//---- Class TSOGRIDCentralUser (7 Field(s) and 0 method(s))
TSOGRIDCentralUser = Class
Protected
  {$REGION 'StoredObject Technical stuffs for TSOGRIDCentralUser'}
  StoredProtoAppClasses : TofStoredObject_StringKey; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : String;
  FUserName : TData_Def; //String
  FPassword : TData_Def; //String
  FUserCreateDateTime : TData_Def; //datetime
  FDirectoryEntry : TData_Def; //TSOGRIDCentralUserDirectoryEntry
  FCurrentSessions : TData_Def; //TSOGRIDCentralSessionList
  FClosedSessionsHistory : TData_Def; //TSOGRIDCentralSessionList
  FGroups : TData_Def; //TSOGRIDCentralGroupList

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : String);
  Function GetObjKeyRef : String;

  Procedure SetUserName(Value : String);
  Function GetUserName : String;
  Procedure SetPassword(Value : String);
  Function GetPassword : String;
  Procedure SetUserCreateDateTime(Value : TDatetime);
  Function GetUserCreateDateTime : TDatetime;
  Procedure SetDirectoryEntry(Value : TSOGRIDCentralUserDirectoryEntry);
  Function GetDirectoryEntry : TSOGRIDCentralUserDirectoryEntry;
  Procedure SetCurrentSessions(Index : Integer; Const Value : TSOGRIDCentralSession);
  Function GetCurrentSessions(Index : Integer) : TSOGRIDCentralSession;
  Procedure SetClosedSessionsHistory(Index : Integer; Const Value : TSOGRIDCentralSession);
  Function GetClosedSessionsHistory(Index : Integer) : TSOGRIDCentralSession;
  Procedure SetGroups(Index : Integer; Const Value : TSOGRIDCentralGroup);
  Function GetGroups(Index : Integer) : TSOGRIDCentralGroup;
Public
  Constructor Create(Const aManager : TGRIDServerDataModelCentralUserManagementBOManager); Virtual;
  Procedure AddCurrentSessions(aTSOGRIDCentralSession : TSOGRIDCentralSession);
  Procedure RemoveCurrentSessions(aTSOGRIDCentralSession : TSOGRIDCentralSession);
  Function CurrentSessionsCount : Integer;
  //Procedure IsCurrentSessionsExists(aTSOGRIDCentralSession : TSOGRIDCentralSession);
  Procedure AddClosedSessionsHistory(aTSOGRIDCentralSession : TSOGRIDCentralSession);
  Procedure RemoveClosedSessionsHistory(aTSOGRIDCentralSession : TSOGRIDCentralSession);
  Function ClosedSessionsHistoryCount : Integer;
  //Procedure IsClosedSessionsHistoryExists(aTSOGRIDCentralSession : TSOGRIDCentralSession);
  Procedure AddGroups(aTSOGRIDCentralGroup : TSOGRIDCentralGroup);
  Procedure RemoveGroups(aTSOGRIDCentralGroup : TSOGRIDCentralGroup);
  Function GroupsCount : Integer;
  //Procedure IsGroupsExists(aTSOGRIDCentralGroup : TSOGRIDCentralGroup);
  Property CurrentSessions[Index : Integer] : TSOGRIDCentralSession read GetCurrentSessions Write SetCurrentSessions;
  Property ClosedSessionsHistory[Index : Integer] : TSOGRIDCentralSession read GetClosedSessionsHistory Write SetClosedSessionsHistory;
  Property Groups[Index : Integer] : TSOGRIDCentralGroup read GetGroups Write SetGroups;
Published
  Property UserName : String read GetUserName Write SetUserName;
  Property Password : String read GetPassword Write SetPassword;
  Property UserCreateDateTime : TDatetime read GetUserCreateDateTime Write SetUserCreateDateTime;
  Property DirectoryEntry : TSOGRIDCentralUserDirectoryEntry read GetDirectoryEntry Write SetDirectoryEntry;
End;

//---- Class TSOGRIDCentralSession (7 Field(s) and 0 method(s))
TSOGRIDCentralSession = Class
Protected
  {$REGION 'StoredObject Technical stuffs for TSOGRIDCentralSession'}
  StoredProtoAppClasses : TofStoredObject_StringKey; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : String;
  FPhysicalConnectionID : TData_Def; //string
  FSessionID : TData_Def; //string
  FCreateDateTime : TData_Def; //datetime
  FLastActivityDateTime : TData_Def; //datetime
  FCloseDateTime : TData_Def; //datetime
  FActivityHit : TData_Def; //integer
  FUserAttached : TData_Def; //TSOGRIDCentralUser

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : String);
  Function GetObjKeyRef : String;

  Procedure SetPhysicalConnectionID(Value : String);
  Function GetPhysicalConnectionID : String;
  Procedure SetSessionID(Value : String);
  Function GetSessionID : String;
  Procedure SetCreateDateTime(Value : TDatetime);
  Function GetCreateDateTime : TDatetime;
  Procedure SetLastActivityDateTime(Value : TDatetime);
  Function GetLastActivityDateTime : TDatetime;
  Procedure SetCloseDateTime(Value : TDatetime);
  Function GetCloseDateTime : TDatetime;
  Procedure SetActivityHit(Value : Integer);
  Function GetActivityHit : Integer;
  Procedure SetUserAttached(Value : TSOGRIDCentralUser);
  Function GetUserAttached : TSOGRIDCentralUser;
Public
  Constructor Create(Const aManager : TGRIDServerDataModelCentralUserManagementBOManager); Virtual;
Published
  Property PhysicalConnectionID : String read GetPhysicalConnectionID Write SetPhysicalConnectionID;
  Property SessionID : String read GetSessionID Write SetSessionID;
  Property CreateDateTime : TDatetime read GetCreateDateTime Write SetCreateDateTime;
  Property LastActivityDateTime : TDatetime read GetLastActivityDateTime Write SetLastActivityDateTime;
  Property CloseDateTime : TDatetime read GetCloseDateTime Write SetCloseDateTime;
  Property ActivityHit : Integer read GetActivityHit Write SetActivityHit;
  Property UserAttached : TSOGRIDCentralUser read GetUserAttached Write SetUserAttached;
End;

//---- Class TSOGRIDCentralUserDirectoryEntry (6 Field(s) and 0 method(s))
TSOGRIDCentralUserDirectoryEntry = Class
Protected
  {$REGION 'StoredObject Technical stuffs for TSOGRIDCentralUserDirectoryEntry'}
  StoredProtoAppClasses : TofStoredObject_StringKey; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : String;
  FFistName : TData_Def; //string
  FLastName : TData_Def; //string
  Fmail : TData_Def; //string
  FDOB : TData_Def; //datetime
  FExternalReference : TData_Def; //string
  FPhoto : TData_Def; //stream

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : String);
  Function GetObjKeyRef : String;

  Procedure SetFistName(Value : String);
  Function GetFistName : String;
  Procedure SetLastName(Value : String);
  Function GetLastName : String;
  Procedure Setmail(Value : String);
  Function Getmail : String;
  Procedure SetDOB(Value : TDatetime);
  Function GetDOB : TDatetime;
  Procedure SetExternalReference(Value : String);
  Function GetExternalReference : String;
  Procedure SetPhoto(Value : TStream);
  Function GetPhoto : TStream;
Public
  Constructor Create(Const aManager : TGRIDServerDataModelCentralUserManagementBOManager); Virtual;
Published
  Property FistName : String read GetFistName Write SetFistName;
  Property LastName : String read GetLastName Write SetLastName;
  Property mail : String read Getmail Write Setmail;
  Property DOB : TDatetime read GetDOB Write SetDOB;
  Property ExternalReference : String read GetExternalReference Write SetExternalReference;
  Property Photo : TStream read GetPhoto Write SetPhoto;
End;

//---- Class TSOGRIDCentralGroup (4 Field(s) and 0 method(s))
TSOGRIDCentralGroup = Class
Protected
  {$REGION 'StoredObject Technical stuffs for TSOGRIDCentralGroup'}
  StoredProtoAppClasses : TofStoredObject_StringKey; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : String;
  FGroupDesc : TData_Def; //String
  FAppFunctionID : TData_Def; //string
  FAppFunctionRight : TData_Def; //TSOGRIDCentralGroupRight
  FUsersAttached : TData_Def; //TSOGRIDCentralUserList

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : String);
  Function GetObjKeyRef : String;

  Procedure SetGroupDesc(Value : String);
  Function GetGroupDesc : String;
  Procedure SetAppFunctionID(Value : String);
  Function GetAppFunctionID : String;
  Procedure SetAppFunctionRight(Value : TSOGRIDCentralGroupRight);
  Function GetAppFunctionRight : TSOGRIDCentralGroupRight;
  Procedure SetUsersAttached(Index : Integer; Const Value : TSOGRIDCentralUser);
  Function GetUsersAttached(Index : Integer) : TSOGRIDCentralUser;
Public
  Constructor Create(Const aManager : TGRIDServerDataModelCentralUserManagementBOManager); Virtual;
  Procedure AddUsersAttached(aTSOGRIDCentralUser : TSOGRIDCentralUser);
  Procedure RemoveUsersAttached(aTSOGRIDCentralUser : TSOGRIDCentralUser);
  Function UsersAttachedCount : Integer;
  //Procedure IsUsersAttachedExists(aTSOGRIDCentralUser : TSOGRIDCentralUser);
  Property UsersAttached[Index : Integer] : TSOGRIDCentralUser read GetUsersAttached Write SetUsersAttached;
Published
  Property GroupDesc : String read GetGroupDesc Write SetGroupDesc;
  Property AppFunctionID : String read GetAppFunctionID Write SetAppFunctionID;
  Property AppFunctionRight : TSOGRIDCentralGroupRight read GetAppFunctionRight Write SetAppFunctionRight;
End;

//---- Class List TSOGRIDCentralUserDirectory (of type TSOGRIDCentralUserDirectoryEntry) : NOT USED in StoredObject Mode

//---- Class List TSOGRIDCentralUserList (of type TSOGRIDCentralUser) : NOT USED in StoredObject Mode

//---- Class List TSOGRIDCentralGroupList (of type TSOGRIDCentralGroup) : NOT USED in StoredObject Mode

//---- Class List TSOGRIDCentralSessionList (of type TSOGRIDCentralSession) : NOT USED in StoredObject Mode



//------------------------------------------------------------
TGRIDServerDataModelCentralUserManagementBOManager = class(TofStoredObjectClassManager_String)
Protected
  Procedure InternalLoadCommon; Override;
Public
  Constructor Create; Override;
  Function BuildObject(aObjectClass : String; Const Guid : String = '') : TObject; Override;
    Procedure PopulateObject( anObject : TObject; PropertyName, StringValue : String); Override;
    Procedure PopulateObjectStream( anObject : TObject; PropertyName : String; Value : TStream); Override;
    Procedure PopulateObjectWithString( anObject : TObject; PropertyName : String; Value : String); Override;
    Procedure PopulateObjectWithDouble( anObject : TObject; PropertyName : String; Value : Double); Override;
    Procedure PopulateObjectWithInteger( anObject : TObject; PropertyName : String; Value : Integer); Override;
    Procedure PopulateObjectWithDateTime( anObject : TObject; PropertyName : String; Value : TDateTime); Override;
    Procedure PopulateObjectWithUInt32( anObject : TObject; PropertyName : String; Value : UInt32); Override;
    Procedure PopulateObjectWithInt64( anObject : TObject; PropertyName : String; Value : UInt64); Override;
    Procedure PopulateObjectWithByte( anObject : TObject; PropertyName : String; Value : Byte); Override;
    Procedure PopulateObjectWithBoolean( anObject : TObject; PropertyName : String; Value : Boolean); Override;
  Procedure RegisterClass; Override;

end;


IMPLEMENTATION


//---- Class TSOGRIDCentralUserManager

  Constructor TSOGRIDCentralUserManager.Create(Const aManager : TGRIDServerDataModelCentralUserManagementBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_StringKey(aManager.StoredObject);

    FUserList.FATI := -1;
    FGroupList.FATI := -1;
    FSessionList.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TSOGRIDCentralUserManager.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TSOGRIDCentralUserManager,'TSOGRIDCentralUserManager Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TSOGRIDCentralUserManager.SetObjKeyRef(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetString(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TSOGRIDCentralUserManager.GetObjKeyRef : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetString(Self, FObjKeyRef.FATI,Result);
  End;

  Procedure TSOGRIDCentralUserManager.SetUserList(Index : Integer; Const Value : TSOGRIDCentralUser);
  var a : String;
      Tools : TList<String>;
      temp : Int64;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Assert(Assigned(Value)); //Nil forbiden
    Tools :=  TList<String>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfString(Self,FUserList.FATI,Tools);
        temp := Tools.IndexOf(Value.FObjKey);
        if temp>-1 then
        begin
          raise Exception.Create('Try to add UserList object which is aleady present in list : Index ask = '+IntTostr(Index)+', UserList object already in '+IntToStr(Temp)+' index');
        end;
        if Tools.Count>=Index then
        begin
          Tools[Index] := Value.FObjKey;
          StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'UserList',FUserList.FATI,FUserList.FData_Index,Tools);
        end
        else
        begin
          raise Exception.Create('Index overflow : Total UserList object Count = '+IntToStr(Tools.Count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralUserManager.SetUserList'+ E.Message);
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
  End;

  Function TSOGRIDCentralUserManager.GetUserList(Index : Integer) : TSOGRIDCentralUser;
  var a : String;
      Tools : TList<String>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Tools :=  TList<String>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfString(Self,FUserList.FATI,Tools);
        if (Tools.Count>Index) then
        Begin
          Result := TSOGRIDCentralUser(StoredProtoAppClasses.BusinessObjects[Tools[Index]]);
        End
        Else
        Begin
          Raise Exception.Create('Index overflow : Total UserList count = '+IntToStr(Tools.count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralUserManager.GetUserList : '+E.Message)
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
    if Result = nil then
      raise Exception.Create('TSOGRIDCentralUserManager.GetUserList('+IntToStr(Index)+') unassigned');
  End;

  Procedure TSOGRIDCentralUserManager.SetGroupList(Index : Integer; Const Value : TSOGRIDCentralGroup);
  var a : String;
      Tools : TList<String>;
      temp : Int64;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Assert(Assigned(Value)); //Nil forbiden
    Tools :=  TList<String>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfString(Self,FGroupList.FATI,Tools);
        temp := Tools.IndexOf(Value.FObjKey);
        if temp>-1 then
        begin
          raise Exception.Create('Try to add GroupList object which is aleady present in list : Index ask = '+IntTostr(Index)+', GroupList object already in '+IntToStr(Temp)+' index');
        end;
        if Tools.Count>=Index then
        begin
          Tools[Index] := Value.FObjKey;
          StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'GroupList',FGroupList.FATI,FGroupList.FData_Index,Tools);
        end
        else
        begin
          raise Exception.Create('Index overflow : Total GroupList object Count = '+IntToStr(Tools.Count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralUserManager.SetGroupList'+ E.Message);
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
  End;

  Function TSOGRIDCentralUserManager.GetGroupList(Index : Integer) : TSOGRIDCentralGroup;
  var a : String;
      Tools : TList<String>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Tools :=  TList<String>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfString(Self,FGroupList.FATI,Tools);
        if (Tools.Count>Index) then
        Begin
          Result := TSOGRIDCentralGroup(StoredProtoAppClasses.BusinessObjects[Tools[Index]]);
        End
        Else
        Begin
          Raise Exception.Create('Index overflow : Total GroupList count = '+IntToStr(Tools.count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralUserManager.GetGroupList : '+E.Message)
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
    if Result = nil then
      raise Exception.Create('TSOGRIDCentralUserManager.GetGroupList('+IntToStr(Index)+') unassigned');
  End;

  Procedure TSOGRIDCentralUserManager.SetSessionList(Index : Integer; Const Value : TSOGRIDCentralSession);
  var a : String;
      Tools : TList<String>;
      temp : Int64;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Assert(Assigned(Value)); //Nil forbiden
    Tools :=  TList<String>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfString(Self,FSessionList.FATI,Tools);
        temp := Tools.IndexOf(Value.FObjKey);
        if temp>-1 then
        begin
          raise Exception.Create('Try to add SessionList object which is aleady present in list : Index ask = '+IntTostr(Index)+', SessionList object already in '+IntToStr(Temp)+' index');
        end;
        if Tools.Count>=Index then
        begin
          Tools[Index] := Value.FObjKey;
          StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'SessionList',FSessionList.FATI,FSessionList.FData_Index,Tools);
        end
        else
        begin
          raise Exception.Create('Index overflow : Total SessionList object Count = '+IntToStr(Tools.Count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralUserManager.SetSessionList'+ E.Message);
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
  End;

  Function TSOGRIDCentralUserManager.GetSessionList(Index : Integer) : TSOGRIDCentralSession;
  var a : String;
      Tools : TList<String>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Tools :=  TList<String>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfString(Self,FSessionList.FATI,Tools);
        if (Tools.Count>Index) then
        Begin
          Result := TSOGRIDCentralSession(StoredProtoAppClasses.BusinessObjects[Tools[Index]]);
        End
        Else
        Begin
          Raise Exception.Create('Index overflow : Total SessionList count = '+IntToStr(Tools.count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralUserManager.GetSessionList : '+E.Message)
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
    if Result = nil then
      raise Exception.Create('TSOGRIDCentralUserManager.GetSessionList('+IntToStr(Index)+') unassigned');
  End;


  Procedure TSOGRIDCentralUserManager.AddUserList(aTSOGRIDCentralUser : TSOGRIDCentralUser);
  var Tools : TList<String>;
      aB : Boolean;
  Begin
    Assert(Assigned(aTSOGRIDCentralUser));
    aB := StoredProtoAppClasses.AuditEnabled;
    Tools :=  TList<String>.Create;
    try
      StoredProtoAppClasses.GetListOfString(Self,FUserList.FATI,Tools);
      Tools.Add(aTSOGRIDCentralUser.FObjKey); //No "if IndexOf()" test : Mutli-occurence is allowed (See AddExternalRef)
      StoredProtoAppClasses.AuditEnabled := False;
      StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'UserList',FUserList.FATI,FUserList.FData_Index,Tools);
      StoredProtoAppClasses.AuditEnabled := aB;
      if StoredProtoAppClasses.AuditEnabled then
      begin
        StoredProtoAppClasses.AuditManager.Audit_DataUpdate_AddObjectToList(FObjKey,Self,aTSOGRIDCentralUser.GetObjKeyRef,aTSOGRIDCentralUser,'UserList');
      end;
    finally
      StoredProtoAppClasses.AuditEnabled := aB;
      FreeAndNil(Tools);
    end;
  end;

  Procedure TSOGRIDCentralUserManager.RemoveUserList(aTSOGRIDCentralUser : TSOGRIDCentralUser);
  var Tools : TList<String>;
      lk : Int64;
      aB : Boolean;
  Begin
    Assert(Assigned(aTSOGRIDCentralUser));
    aB := StoredProtoAppClasses.AuditEnabled;
    Tools :=  TList<String>.Create;
    try
      StoredProtoAppClasses.GetListOfString(Self,FUserList.FATI,Tools);
      lk := Tools.IndexOf(aTSOGRIDCentralUser.FObjKey);
      if lk>-1 then
      begin
        Tools.Delete(lk);
        StoredProtoAppClasses.AuditEnabled := False;
        StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'UserList',FUserList.FATI,FUserList.FData_Index,Tools);
        StoredProtoAppClasses.AuditEnabled := aB;
        if StoredProtoAppClasses.AuditEnabled then
        begin
          StoredProtoAppClasses.AuditManager.Audit_DataUpdate_RemoveObjectFromList(FObjKey,Self,aTSOGRIDCentralUser.GetObjKeyRef,aTSOGRIDCentralUser,'UserList');
        end;
      end;
    finally
      StoredProtoAppClasses.AuditEnabled := aB;
      FreeAndNil(Tools);
    end;
  end;

  Function TSOGRIDCentralUserManager.UserListCount : Integer;
  Begin
    Result := StoredProtoAppClasses.GetListItemCount(FUserList.FData_Index);
  end;


  Procedure TSOGRIDCentralUserManager.AddGroupList(aTSOGRIDCentralGroup : TSOGRIDCentralGroup);
  var Tools : TList<String>;
      aB : Boolean;
  Begin
    Assert(Assigned(aTSOGRIDCentralGroup));
    aB := StoredProtoAppClasses.AuditEnabled;
    Tools :=  TList<String>.Create;
    try
      StoredProtoAppClasses.GetListOfString(Self,FGroupList.FATI,Tools);
      Tools.Add(aTSOGRIDCentralGroup.FObjKey); //No "if IndexOf()" test : Mutli-occurence is allowed (See AddExternalRef)
      StoredProtoAppClasses.AuditEnabled := False;
      StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'GroupList',FGroupList.FATI,FGroupList.FData_Index,Tools);
      StoredProtoAppClasses.AuditEnabled := aB;
      if StoredProtoAppClasses.AuditEnabled then
      begin
        StoredProtoAppClasses.AuditManager.Audit_DataUpdate_AddObjectToList(FObjKey,Self,aTSOGRIDCentralGroup.GetObjKeyRef,aTSOGRIDCentralGroup,'GroupList');
      end;
    finally
      StoredProtoAppClasses.AuditEnabled := aB;
      FreeAndNil(Tools);
    end;
  end;

  Procedure TSOGRIDCentralUserManager.RemoveGroupList(aTSOGRIDCentralGroup : TSOGRIDCentralGroup);
  var Tools : TList<String>;
      lk : Int64;
      aB : Boolean;
  Begin
    Assert(Assigned(aTSOGRIDCentralGroup));
    aB := StoredProtoAppClasses.AuditEnabled;
    Tools :=  TList<String>.Create;
    try
      StoredProtoAppClasses.GetListOfString(Self,FGroupList.FATI,Tools);
      lk := Tools.IndexOf(aTSOGRIDCentralGroup.FObjKey);
      if lk>-1 then
      begin
        Tools.Delete(lk);
        StoredProtoAppClasses.AuditEnabled := False;
        StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'GroupList',FGroupList.FATI,FGroupList.FData_Index,Tools);
        StoredProtoAppClasses.AuditEnabled := aB;
        if StoredProtoAppClasses.AuditEnabled then
        begin
          StoredProtoAppClasses.AuditManager.Audit_DataUpdate_RemoveObjectFromList(FObjKey,Self,aTSOGRIDCentralGroup.GetObjKeyRef,aTSOGRIDCentralGroup,'GroupList');
        end;
      end;
    finally
      StoredProtoAppClasses.AuditEnabled := aB;
      FreeAndNil(Tools);
    end;
  end;

  Function TSOGRIDCentralUserManager.GroupListCount : Integer;
  Begin
    Result := StoredProtoAppClasses.GetListItemCount(FGroupList.FData_Index);
  end;


  Procedure TSOGRIDCentralUserManager.AddSessionList(aTSOGRIDCentralSession : TSOGRIDCentralSession);
  var Tools : TList<String>;
      aB : Boolean;
  Begin
    Assert(Assigned(aTSOGRIDCentralSession));
    aB := StoredProtoAppClasses.AuditEnabled;
    Tools :=  TList<String>.Create;
    try
      StoredProtoAppClasses.GetListOfString(Self,FSessionList.FATI,Tools);
      Tools.Add(aTSOGRIDCentralSession.FObjKey); //No "if IndexOf()" test : Mutli-occurence is allowed (See AddExternalRef)
      StoredProtoAppClasses.AuditEnabled := False;
      StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'SessionList',FSessionList.FATI,FSessionList.FData_Index,Tools);
      StoredProtoAppClasses.AuditEnabled := aB;
      if StoredProtoAppClasses.AuditEnabled then
      begin
        StoredProtoAppClasses.AuditManager.Audit_DataUpdate_AddObjectToList(FObjKey,Self,aTSOGRIDCentralSession.GetObjKeyRef,aTSOGRIDCentralSession,'SessionList');
      end;
    finally
      StoredProtoAppClasses.AuditEnabled := aB;
      FreeAndNil(Tools);
    end;
  end;

  Procedure TSOGRIDCentralUserManager.RemoveSessionList(aTSOGRIDCentralSession : TSOGRIDCentralSession);
  var Tools : TList<String>;
      lk : Int64;
      aB : Boolean;
  Begin
    Assert(Assigned(aTSOGRIDCentralSession));
    aB := StoredProtoAppClasses.AuditEnabled;
    Tools :=  TList<String>.Create;
    try
      StoredProtoAppClasses.GetListOfString(Self,FSessionList.FATI,Tools);
      lk := Tools.IndexOf(aTSOGRIDCentralSession.FObjKey);
      if lk>-1 then
      begin
        Tools.Delete(lk);
        StoredProtoAppClasses.AuditEnabled := False;
        StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'SessionList',FSessionList.FATI,FSessionList.FData_Index,Tools);
        StoredProtoAppClasses.AuditEnabled := aB;
        if StoredProtoAppClasses.AuditEnabled then
        begin
          StoredProtoAppClasses.AuditManager.Audit_DataUpdate_RemoveObjectFromList(FObjKey,Self,aTSOGRIDCentralSession.GetObjKeyRef,aTSOGRIDCentralSession,'SessionList');
        end;
      end;
    finally
      StoredProtoAppClasses.AuditEnabled := aB;
      FreeAndNil(Tools);
    end;
  end;

  Function TSOGRIDCentralUserManager.SessionListCount : Integer;
  Begin
    Result := StoredProtoAppClasses.GetListItemCount(FSessionList.FData_Index);
  end;


//---- Class TSOGRIDCentralUser

  Constructor TSOGRIDCentralUser.Create(Const aManager : TGRIDServerDataModelCentralUserManagementBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_StringKey(aManager.StoredObject);

    FUserName.FATI := -1;
    FPassword.FATI := -1;
    FUserCreateDateTime.FATI := -1;
    FDirectoryEntry.FATI := -1;
    FCurrentSessions.FATI := -1;
    FClosedSessionsHistory.FATI := -1;
    FGroups.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TSOGRIDCentralUser.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TSOGRIDCentralUser,'TSOGRIDCentralUser Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TSOGRIDCentralUser.SetObjKeyRef(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetString(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TSOGRIDCentralUser.GetObjKeyRef : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetString(Self, FObjKeyRef.FATI,Result);
  End;

  Procedure TSOGRIDCentralUser.SetUserName(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'UserName',FUserName.FATI,FUserName.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralUser.SetUserName(Value : String) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralUser.GetUserName : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FUserName.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralUser.GetUserName : String --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralUser.SetPassword(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'Password',FPassword.FATI,FPassword.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralUser.SetPassword(Value : String) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralUser.GetPassword : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FPassword.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralUser.GetPassword : String --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralUser.SetUserCreateDateTime(Value : TDatetime);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetDateTime(Self, FObjKey,'UserCreateDateTime',FUserCreateDateTime.FATI,FUserCreateDateTime.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralUser.SetUserCreateDateTime(Value : datetime) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralUser.GetUserCreateDateTime : TDatetime;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetDateTime(Self,FUserCreateDateTime.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralUser.GetUserCreateDateTime : datetime --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralUser.SetDirectoryEntry(Value : TSOGRIDCentralUserDirectoryEntry);
  var a : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      if Assigned(Value) then
        begin
          StoredProtoAppClasses.LookForObject(Value,a);
          StoredProtoAppClasses.SetString(Self, FObjKey,'DirectoryEntry',FDirectoryEntry.FATI,FDirectoryEntry.FData_Index,a);
        end
        else
        begin
          StoredProtoAppClasses.SetString(Self, FObjKey,'DirectoryEntry',FDirectoryEntry.FATI,FDirectoryEntry.FData_Index,'');
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralUser.SetDirectoryEntry : '+E.Message)
        end;
      end;
  End;

  Function TSOGRIDCentralUser.GetDirectoryEntry : TSOGRIDCentralUserDirectoryEntry;
  var ai : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FDirectoryEntry.FATI,ai);
      Result := nil;
      if (ai<>EmptyStr) then
        Result := TSOGRIDCentralUserDirectoryEntry(StoredProtoAppClasses.BusinessObjects[ai]);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralUser.GetDirectoryEntry '+ E.Message);
      end;
    end;
  End;

  Procedure TSOGRIDCentralUser.SetCurrentSessions(Index : Integer; Const Value : TSOGRIDCentralSession);
  var a : String;
      Tools : TList<String>;
      temp : Int64;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Assert(Assigned(Value)); //Nil forbiden
    Tools :=  TList<String>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfString(Self,FCurrentSessions.FATI,Tools);
        temp := Tools.IndexOf(Value.FObjKey);
        if temp>-1 then
        begin
          raise Exception.Create('Try to add CurrentSessions object which is aleady present in list : Index ask = '+IntTostr(Index)+', CurrentSessions object already in '+IntToStr(Temp)+' index');
        end;
        if Tools.Count>=Index then
        begin
          Tools[Index] := Value.FObjKey;
          StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'CurrentSessions',FCurrentSessions.FATI,FCurrentSessions.FData_Index,Tools);
        end
        else
        begin
          raise Exception.Create('Index overflow : Total CurrentSessions object Count = '+IntToStr(Tools.Count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralUser.SetCurrentSessions'+ E.Message);
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
  End;

  Function TSOGRIDCentralUser.GetCurrentSessions(Index : Integer) : TSOGRIDCentralSession;
  var a : String;
      Tools : TList<String>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Tools :=  TList<String>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfString(Self,FCurrentSessions.FATI,Tools);
        if (Tools.Count>Index) then
        Begin
          Result := TSOGRIDCentralSession(StoredProtoAppClasses.BusinessObjects[Tools[Index]]);
        End
        Else
        Begin
          Raise Exception.Create('Index overflow : Total CurrentSessions count = '+IntToStr(Tools.count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralUser.GetCurrentSessions : '+E.Message)
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
    if Result = nil then
      raise Exception.Create('TSOGRIDCentralUser.GetCurrentSessions('+IntToStr(Index)+') unassigned');
  End;

  Procedure TSOGRIDCentralUser.SetClosedSessionsHistory(Index : Integer; Const Value : TSOGRIDCentralSession);
  var a : String;
      Tools : TList<String>;
      temp : Int64;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Assert(Assigned(Value)); //Nil forbiden
    Tools :=  TList<String>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfString(Self,FClosedSessionsHistory.FATI,Tools);
        temp := Tools.IndexOf(Value.FObjKey);
        if temp>-1 then
        begin
          raise Exception.Create('Try to add ClosedSessionsHistory object which is aleady present in list : Index ask = '+IntTostr(Index)+', ClosedSessionsHistory object already in '+IntToStr(Temp)+' index');
        end;
        if Tools.Count>=Index then
        begin
          Tools[Index] := Value.FObjKey;
          StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'ClosedSessionsHistory',FClosedSessionsHistory.FATI,FClosedSessionsHistory.FData_Index,Tools);
        end
        else
        begin
          raise Exception.Create('Index overflow : Total ClosedSessionsHistory object Count = '+IntToStr(Tools.Count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralUser.SetClosedSessionsHistory'+ E.Message);
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
  End;

  Function TSOGRIDCentralUser.GetClosedSessionsHistory(Index : Integer) : TSOGRIDCentralSession;
  var a : String;
      Tools : TList<String>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Tools :=  TList<String>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfString(Self,FClosedSessionsHistory.FATI,Tools);
        if (Tools.Count>Index) then
        Begin
          Result := TSOGRIDCentralSession(StoredProtoAppClasses.BusinessObjects[Tools[Index]]);
        End
        Else
        Begin
          Raise Exception.Create('Index overflow : Total ClosedSessionsHistory count = '+IntToStr(Tools.count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralUser.GetClosedSessionsHistory : '+E.Message)
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
    if Result = nil then
      raise Exception.Create('TSOGRIDCentralUser.GetClosedSessionsHistory('+IntToStr(Index)+') unassigned');
  End;

  Procedure TSOGRIDCentralUser.SetGroups(Index : Integer; Const Value : TSOGRIDCentralGroup);
  var a : String;
      Tools : TList<String>;
      temp : Int64;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Assert(Assigned(Value)); //Nil forbiden
    Tools :=  TList<String>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfString(Self,FGroups.FATI,Tools);
        temp := Tools.IndexOf(Value.FObjKey);
        if temp>-1 then
        begin
          raise Exception.Create('Try to add Groups object which is aleady present in list : Index ask = '+IntTostr(Index)+', Groups object already in '+IntToStr(Temp)+' index');
        end;
        if Tools.Count>=Index then
        begin
          Tools[Index] := Value.FObjKey;
          StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'Groups',FGroups.FATI,FGroups.FData_Index,Tools);
        end
        else
        begin
          raise Exception.Create('Index overflow : Total Groups object Count = '+IntToStr(Tools.Count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralUser.SetGroups'+ E.Message);
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
  End;

  Function TSOGRIDCentralUser.GetGroups(Index : Integer) : TSOGRIDCentralGroup;
  var a : String;
      Tools : TList<String>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Tools :=  TList<String>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfString(Self,FGroups.FATI,Tools);
        if (Tools.Count>Index) then
        Begin
          Result := TSOGRIDCentralGroup(StoredProtoAppClasses.BusinessObjects[Tools[Index]]);
        End
        Else
        Begin
          Raise Exception.Create('Index overflow : Total Groups count = '+IntToStr(Tools.count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralUser.GetGroups : '+E.Message)
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
    if Result = nil then
      raise Exception.Create('TSOGRIDCentralUser.GetGroups('+IntToStr(Index)+') unassigned');
  End;


  Procedure TSOGRIDCentralUser.AddCurrentSessions(aTSOGRIDCentralSession : TSOGRIDCentralSession);
  var Tools : TList<String>;
      aB : Boolean;
  Begin
    Assert(Assigned(aTSOGRIDCentralSession));
    aB := StoredProtoAppClasses.AuditEnabled;
    Tools :=  TList<String>.Create;
    try
      StoredProtoAppClasses.GetListOfString(Self,FCurrentSessions.FATI,Tools);
      Tools.Add(aTSOGRIDCentralSession.FObjKey); //No "if IndexOf()" test : Mutli-occurence is allowed (See AddExternalRef)
      StoredProtoAppClasses.AuditEnabled := False;
      StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'CurrentSessions',FCurrentSessions.FATI,FCurrentSessions.FData_Index,Tools);
      StoredProtoAppClasses.AuditEnabled := aB;
      if StoredProtoAppClasses.AuditEnabled then
      begin
        StoredProtoAppClasses.AuditManager.Audit_DataUpdate_AddObjectToList(FObjKey,Self,aTSOGRIDCentralSession.GetObjKeyRef,aTSOGRIDCentralSession,'CurrentSessions');
      end;
    finally
      StoredProtoAppClasses.AuditEnabled := aB;
      FreeAndNil(Tools);
    end;
  end;

  Procedure TSOGRIDCentralUser.RemoveCurrentSessions(aTSOGRIDCentralSession : TSOGRIDCentralSession);
  var Tools : TList<String>;
      lk : Int64;
      aB : Boolean;
  Begin
    Assert(Assigned(aTSOGRIDCentralSession));
    aB := StoredProtoAppClasses.AuditEnabled;
    Tools :=  TList<String>.Create;
    try
      StoredProtoAppClasses.GetListOfString(Self,FCurrentSessions.FATI,Tools);
      lk := Tools.IndexOf(aTSOGRIDCentralSession.FObjKey);
      if lk>-1 then
      begin
        Tools.Delete(lk);
        StoredProtoAppClasses.AuditEnabled := False;
        StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'CurrentSessions',FCurrentSessions.FATI,FCurrentSessions.FData_Index,Tools);
        StoredProtoAppClasses.AuditEnabled := aB;
        if StoredProtoAppClasses.AuditEnabled then
        begin
          StoredProtoAppClasses.AuditManager.Audit_DataUpdate_RemoveObjectFromList(FObjKey,Self,aTSOGRIDCentralSession.GetObjKeyRef,aTSOGRIDCentralSession,'CurrentSessions');
        end;
      end;
    finally
      StoredProtoAppClasses.AuditEnabled := aB;
      FreeAndNil(Tools);
    end;
  end;

  Function TSOGRIDCentralUser.CurrentSessionsCount : Integer;
  Begin
    Result := StoredProtoAppClasses.GetListItemCount(FCurrentSessions.FData_Index);
  end;


  Procedure TSOGRIDCentralUser.AddClosedSessionsHistory(aTSOGRIDCentralSession : TSOGRIDCentralSession);
  var Tools : TList<String>;
      aB : Boolean;
  Begin
    Assert(Assigned(aTSOGRIDCentralSession));
    aB := StoredProtoAppClasses.AuditEnabled;
    Tools :=  TList<String>.Create;
    try
      StoredProtoAppClasses.GetListOfString(Self,FClosedSessionsHistory.FATI,Tools);
      Tools.Add(aTSOGRIDCentralSession.FObjKey); //No "if IndexOf()" test : Mutli-occurence is allowed (See AddExternalRef)
      StoredProtoAppClasses.AuditEnabled := False;
      StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'ClosedSessionsHistory',FClosedSessionsHistory.FATI,FClosedSessionsHistory.FData_Index,Tools);
      StoredProtoAppClasses.AuditEnabled := aB;
      if StoredProtoAppClasses.AuditEnabled then
      begin
        StoredProtoAppClasses.AuditManager.Audit_DataUpdate_AddObjectToList(FObjKey,Self,aTSOGRIDCentralSession.GetObjKeyRef,aTSOGRIDCentralSession,'ClosedSessionsHistory');
      end;
    finally
      StoredProtoAppClasses.AuditEnabled := aB;
      FreeAndNil(Tools);
    end;
  end;

  Procedure TSOGRIDCentralUser.RemoveClosedSessionsHistory(aTSOGRIDCentralSession : TSOGRIDCentralSession);
  var Tools : TList<String>;
      lk : Int64;
      aB : Boolean;
  Begin
    Assert(Assigned(aTSOGRIDCentralSession));
    aB := StoredProtoAppClasses.AuditEnabled;
    Tools :=  TList<String>.Create;
    try
      StoredProtoAppClasses.GetListOfString(Self,FClosedSessionsHistory.FATI,Tools);
      lk := Tools.IndexOf(aTSOGRIDCentralSession.FObjKey);
      if lk>-1 then
      begin
        Tools.Delete(lk);
        StoredProtoAppClasses.AuditEnabled := False;
        StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'ClosedSessionsHistory',FClosedSessionsHistory.FATI,FClosedSessionsHistory.FData_Index,Tools);
        StoredProtoAppClasses.AuditEnabled := aB;
        if StoredProtoAppClasses.AuditEnabled then
        begin
          StoredProtoAppClasses.AuditManager.Audit_DataUpdate_RemoveObjectFromList(FObjKey,Self,aTSOGRIDCentralSession.GetObjKeyRef,aTSOGRIDCentralSession,'ClosedSessionsHistory');
        end;
      end;
    finally
      StoredProtoAppClasses.AuditEnabled := aB;
      FreeAndNil(Tools);
    end;
  end;

  Function TSOGRIDCentralUser.ClosedSessionsHistoryCount : Integer;
  Begin
    Result := StoredProtoAppClasses.GetListItemCount(FClosedSessionsHistory.FData_Index);
  end;


  Procedure TSOGRIDCentralUser.AddGroups(aTSOGRIDCentralGroup : TSOGRIDCentralGroup);
  var Tools : TList<String>;
      aB : Boolean;
  Begin
    Assert(Assigned(aTSOGRIDCentralGroup));
    aB := StoredProtoAppClasses.AuditEnabled;
    Tools :=  TList<String>.Create;
    try
      StoredProtoAppClasses.GetListOfString(Self,FGroups.FATI,Tools);
      Tools.Add(aTSOGRIDCentralGroup.FObjKey); //No "if IndexOf()" test : Mutli-occurence is allowed (See AddExternalRef)
      StoredProtoAppClasses.AuditEnabled := False;
      StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'Groups',FGroups.FATI,FGroups.FData_Index,Tools);
      StoredProtoAppClasses.AuditEnabled := aB;
      if StoredProtoAppClasses.AuditEnabled then
      begin
        StoredProtoAppClasses.AuditManager.Audit_DataUpdate_AddObjectToList(FObjKey,Self,aTSOGRIDCentralGroup.GetObjKeyRef,aTSOGRIDCentralGroup,'Groups');
      end;
    finally
      StoredProtoAppClasses.AuditEnabled := aB;
      FreeAndNil(Tools);
    end;
  end;

  Procedure TSOGRIDCentralUser.RemoveGroups(aTSOGRIDCentralGroup : TSOGRIDCentralGroup);
  var Tools : TList<String>;
      lk : Int64;
      aB : Boolean;
  Begin
    Assert(Assigned(aTSOGRIDCentralGroup));
    aB := StoredProtoAppClasses.AuditEnabled;
    Tools :=  TList<String>.Create;
    try
      StoredProtoAppClasses.GetListOfString(Self,FGroups.FATI,Tools);
      lk := Tools.IndexOf(aTSOGRIDCentralGroup.FObjKey);
      if lk>-1 then
      begin
        Tools.Delete(lk);
        StoredProtoAppClasses.AuditEnabled := False;
        StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'Groups',FGroups.FATI,FGroups.FData_Index,Tools);
        StoredProtoAppClasses.AuditEnabled := aB;
        if StoredProtoAppClasses.AuditEnabled then
        begin
          StoredProtoAppClasses.AuditManager.Audit_DataUpdate_RemoveObjectFromList(FObjKey,Self,aTSOGRIDCentralGroup.GetObjKeyRef,aTSOGRIDCentralGroup,'Groups');
        end;
      end;
    finally
      StoredProtoAppClasses.AuditEnabled := aB;
      FreeAndNil(Tools);
    end;
  end;

  Function TSOGRIDCentralUser.GroupsCount : Integer;
  Begin
    Result := StoredProtoAppClasses.GetListItemCount(FGroups.FData_Index);
  end;


//---- Class TSOGRIDCentralSession

  Constructor TSOGRIDCentralSession.Create(Const aManager : TGRIDServerDataModelCentralUserManagementBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_StringKey(aManager.StoredObject);

    FPhysicalConnectionID.FATI := -1;
    FSessionID.FATI := -1;
    FCreateDateTime.FATI := -1;
    FLastActivityDateTime.FATI := -1;
    FCloseDateTime.FATI := -1;
    FActivityHit.FATI := -1;
    FUserAttached.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TSOGRIDCentralSession.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TSOGRIDCentralSession,'TSOGRIDCentralSession Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TSOGRIDCentralSession.SetObjKeyRef(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetString(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TSOGRIDCentralSession.GetObjKeyRef : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetString(Self, FObjKeyRef.FATI,Result);
  End;

  Procedure TSOGRIDCentralSession.SetPhysicalConnectionID(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'PhysicalConnectionID',FPhysicalConnectionID.FATI,FPhysicalConnectionID.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralSession.SetPhysicalConnectionID(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralSession.GetPhysicalConnectionID : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FPhysicalConnectionID.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralSession.GetPhysicalConnectionID : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralSession.SetSessionID(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'SessionID',FSessionID.FATI,FSessionID.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralSession.SetSessionID(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralSession.GetSessionID : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FSessionID.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralSession.GetSessionID : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralSession.SetCreateDateTime(Value : TDatetime);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetDateTime(Self, FObjKey,'CreateDateTime',FCreateDateTime.FATI,FCreateDateTime.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralSession.SetCreateDateTime(Value : datetime) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralSession.GetCreateDateTime : TDatetime;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetDateTime(Self,FCreateDateTime.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralSession.GetCreateDateTime : datetime --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralSession.SetLastActivityDateTime(Value : TDatetime);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetDateTime(Self, FObjKey,'LastActivityDateTime',FLastActivityDateTime.FATI,FLastActivityDateTime.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralSession.SetLastActivityDateTime(Value : datetime) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralSession.GetLastActivityDateTime : TDatetime;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetDateTime(Self,FLastActivityDateTime.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralSession.GetLastActivityDateTime : datetime --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralSession.SetCloseDateTime(Value : TDatetime);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetDateTime(Self, FObjKey,'CloseDateTime',FCloseDateTime.FATI,FCloseDateTime.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralSession.SetCloseDateTime(Value : datetime) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralSession.GetCloseDateTime : TDatetime;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetDateTime(Self,FCloseDateTime.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralSession.GetCloseDateTime : datetime --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralSession.SetActivityHit(Value : Integer);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetInteger(Self, FObjKey,'ActivityHit',FActivityHit.FATI,FActivityHit.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralSession.SetActivityHit(Value : integer) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralSession.GetActivityHit : Integer;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetInteger(Self,FActivityHit.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralSession.GetActivityHit : integer --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralSession.SetUserAttached(Value : TSOGRIDCentralUser);
  var a : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      if Assigned(Value) then
        begin
          StoredProtoAppClasses.LookForObject(Value,a);
          StoredProtoAppClasses.SetString(Self, FObjKey,'UserAttached',FUserAttached.FATI,FUserAttached.FData_Index,a);
        end
        else
        begin
          StoredProtoAppClasses.SetString(Self, FObjKey,'UserAttached',FUserAttached.FATI,FUserAttached.FData_Index,'');
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralSession.SetUserAttached : '+E.Message)
        end;
      end;
  End;

  Function TSOGRIDCentralSession.GetUserAttached : TSOGRIDCentralUser;
  var ai : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FUserAttached.FATI,ai);
      Result := nil;
      if (ai<>EmptyStr) then
        Result := TSOGRIDCentralUser(StoredProtoAppClasses.BusinessObjects[ai]);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralSession.GetUserAttached '+ E.Message);
      end;
    end;
  End;


//---- Class TSOGRIDCentralUserDirectoryEntry

  Constructor TSOGRIDCentralUserDirectoryEntry.Create(Const aManager : TGRIDServerDataModelCentralUserManagementBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_StringKey(aManager.StoredObject);

    FFistName.FATI := -1;
    FLastName.FATI := -1;
    Fmail.FATI := -1;
    FDOB.FATI := -1;
    FExternalReference.FATI := -1;
    FPhoto.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TSOGRIDCentralUserDirectoryEntry.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TSOGRIDCentralUserDirectoryEntry,'TSOGRIDCentralUserDirectoryEntry Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TSOGRIDCentralUserDirectoryEntry.SetObjKeyRef(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetString(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TSOGRIDCentralUserDirectoryEntry.GetObjKeyRef : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetString(Self, FObjKeyRef.FATI,Result);
  End;

  Procedure TSOGRIDCentralUserDirectoryEntry.SetFistName(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'FistName',FFistName.FATI,FFistName.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralUserDirectoryEntry.SetFistName(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralUserDirectoryEntry.GetFistName : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FFistName.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralUserDirectoryEntry.GetFistName : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralUserDirectoryEntry.SetLastName(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'LastName',FLastName.FATI,FLastName.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralUserDirectoryEntry.SetLastName(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralUserDirectoryEntry.GetLastName : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FLastName.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralUserDirectoryEntry.GetLastName : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralUserDirectoryEntry.Setmail(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'mail',Fmail.FATI,Fmail.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralUserDirectoryEntry.Setmail(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralUserDirectoryEntry.Getmail : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,Fmail.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralUserDirectoryEntry.Getmail : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralUserDirectoryEntry.SetDOB(Value : TDatetime);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetDateTime(Self, FObjKey,'DOB',FDOB.FATI,FDOB.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralUserDirectoryEntry.SetDOB(Value : datetime) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralUserDirectoryEntry.GetDOB : TDatetime;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetDateTime(Self,FDOB.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralUserDirectoryEntry.GetDOB : datetime --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralUserDirectoryEntry.SetExternalReference(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'ExternalReference',FExternalReference.FATI,FExternalReference.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralUserDirectoryEntry.SetExternalReference(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralUserDirectoryEntry.GetExternalReference : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FExternalReference.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralUserDirectoryEntry.GetExternalReference : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralUserDirectoryEntry.SetPhoto(Value : TStream);
  var r : TArrayOfByte;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
      try
         SetLength(r,Value.Size);
         Value.Position := 0;
         Value.ReadBuffer(Pointer(r)^,Value.Size);
         StoredProtoAppClasses.SeTArrayOfByte(Self, FObjKey,'Photo',FPhoto.FATI,FPhoto.FData_Index,r);
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralUserDirectoryEntry.SetPhoto(Value : stream) --> '+E.Message)
        end;
      end;
  End;

  Function TSOGRIDCentralUserDirectoryEntry.GetPhoto : TStream;
  var r : TArrayOfByte;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
       Result := Nil;
       StoredProtoAppClasses.GetArrayOfByte(Self,FPhoto.FATI,r);
       if length(r)>0 then
       Begin
         Result := TMemoryStream.Create;
         Result.WriteBuffer(Pointer(r)^,Length(r));
       end;
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralUserDirectoryEntry.GetPhoto : stream --> '+E.Message)
      end;
    end;
  End;


//---- Class TSOGRIDCentralGroup

  Constructor TSOGRIDCentralGroup.Create(Const aManager : TGRIDServerDataModelCentralUserManagementBOManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_StringKey(aManager.StoredObject);

    FGroupDesc.FATI := -1;
    FAppFunctionID.FATI := -1;
    FAppFunctionRight.FATI := -1;
    FUsersAttached.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TSOGRIDCentralGroup.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TSOGRIDCentralGroup,'TSOGRIDCentralGroup Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TSOGRIDCentralGroup.SetObjKeyRef(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetString(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TSOGRIDCentralGroup.GetObjKeyRef : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetString(Self, FObjKeyRef.FATI,Result);
  End;

  Procedure TSOGRIDCentralGroup.SetGroupDesc(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'GroupDesc',FGroupDesc.FATI,FGroupDesc.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralGroup.SetGroupDesc(Value : String) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralGroup.GetGroupDesc : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FGroupDesc.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralGroup.GetGroupDesc : String --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralGroup.SetAppFunctionID(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'AppFunctionID',FAppFunctionID.FATI,FAppFunctionID.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralGroup.SetAppFunctionID(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralGroup.GetAppFunctionID : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FAppFunctionID.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralGroup.GetAppFunctionID : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralGroup.SetAppFunctionRight(Value : TSOGRIDCentralGroupRight);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetByte(Self, FObjKey,'AppFunctionRight',FAppFunctionRight.FATI,FAppFunctionRight.FData_Index,Byte(Value));
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralGroup.SetAppFunctionRight(Value : TSOGRIDCentralGroupRight) --> '+E.Message)
      end;
    end;
  End;

  Function TSOGRIDCentralGroup.GetAppFunctionRight : TSOGRIDCentralGroupRight;
  var R : Byte;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetByte(Self,FAppFunctionRight.FATI,R);
      Result :=TSOGRIDCentralGroupRight(R);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOGRIDCentralGroup.GetAppFunctionRight : TSOGRIDCentralGroupRight --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOGRIDCentralGroup.SetUsersAttached(Index : Integer; Const Value : TSOGRIDCentralUser);
  var a : String;
      Tools : TList<String>;
      temp : Int64;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Assert(Assigned(Value)); //Nil forbiden
    Tools :=  TList<String>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfString(Self,FUsersAttached.FATI,Tools);
        temp := Tools.IndexOf(Value.FObjKey);
        if temp>-1 then
        begin
          raise Exception.Create('Try to add UsersAttached object which is aleady present in list : Index ask = '+IntTostr(Index)+', UsersAttached object already in '+IntToStr(Temp)+' index');
        end;
        if Tools.Count>=Index then
        begin
          Tools[Index] := Value.FObjKey;
          StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'UsersAttached',FUsersAttached.FATI,FUsersAttached.FData_Index,Tools);
        end
        else
        begin
          raise Exception.Create('Index overflow : Total UsersAttached object Count = '+IntToStr(Tools.Count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralGroup.SetUsersAttached'+ E.Message);
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
  End;

  Function TSOGRIDCentralGroup.GetUsersAttached(Index : Integer) : TSOGRIDCentralUser;
  var a : String;
      Tools : TList<String>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Tools :=  TList<String>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfString(Self,FUsersAttached.FATI,Tools);
        if (Tools.Count>Index) then
        Begin
          Result := TSOGRIDCentralUser(StoredProtoAppClasses.BusinessObjects[Tools[Index]]);
        End
        Else
        Begin
          Raise Exception.Create('Index overflow : Total UsersAttached count = '+IntToStr(Tools.count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOGRIDCentralGroup.GetUsersAttached : '+E.Message)
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
    if Result = nil then
      raise Exception.Create('TSOGRIDCentralGroup.GetUsersAttached('+IntToStr(Index)+') unassigned');
  End;


  Procedure TSOGRIDCentralGroup.AddUsersAttached(aTSOGRIDCentralUser : TSOGRIDCentralUser);
  var Tools : TList<String>;
      aB : Boolean;
  Begin
    Assert(Assigned(aTSOGRIDCentralUser));
    aB := StoredProtoAppClasses.AuditEnabled;
    Tools :=  TList<String>.Create;
    try
      StoredProtoAppClasses.GetListOfString(Self,FUsersAttached.FATI,Tools);
      Tools.Add(aTSOGRIDCentralUser.FObjKey); //No "if IndexOf()" test : Mutli-occurence is allowed (See AddExternalRef)
      StoredProtoAppClasses.AuditEnabled := False;
      StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'UsersAttached',FUsersAttached.FATI,FUsersAttached.FData_Index,Tools);
      StoredProtoAppClasses.AuditEnabled := aB;
      if StoredProtoAppClasses.AuditEnabled then
      begin
        StoredProtoAppClasses.AuditManager.Audit_DataUpdate_AddObjectToList(FObjKey,Self,aTSOGRIDCentralUser.GetObjKeyRef,aTSOGRIDCentralUser,'UsersAttached');
      end;
    finally
      StoredProtoAppClasses.AuditEnabled := aB;
      FreeAndNil(Tools);
    end;
  end;

  Procedure TSOGRIDCentralGroup.RemoveUsersAttached(aTSOGRIDCentralUser : TSOGRIDCentralUser);
  var Tools : TList<String>;
      lk : Int64;
      aB : Boolean;
  Begin
    Assert(Assigned(aTSOGRIDCentralUser));
    aB := StoredProtoAppClasses.AuditEnabled;
    Tools :=  TList<String>.Create;
    try
      StoredProtoAppClasses.GetListOfString(Self,FUsersAttached.FATI,Tools);
      lk := Tools.IndexOf(aTSOGRIDCentralUser.FObjKey);
      if lk>-1 then
      begin
        Tools.Delete(lk);
        StoredProtoAppClasses.AuditEnabled := False;
        StoredProtoAppClasses.SetListOfString(Self, FObjKey, 'UsersAttached',FUsersAttached.FATI,FUsersAttached.FData_Index,Tools);
        StoredProtoAppClasses.AuditEnabled := aB;
        if StoredProtoAppClasses.AuditEnabled then
        begin
          StoredProtoAppClasses.AuditManager.Audit_DataUpdate_RemoveObjectFromList(FObjKey,Self,aTSOGRIDCentralUser.GetObjKeyRef,aTSOGRIDCentralUser,'UsersAttached');
        end;
      end;
    finally
      StoredProtoAppClasses.AuditEnabled := aB;
      FreeAndNil(Tools);
    end;
  end;

  Function TSOGRIDCentralGroup.UsersAttachedCount : Integer;
  Begin
    Result := StoredProtoAppClasses.GetListItemCount(FUsersAttached.FData_Index);
  end;


{TGRIDServerDataModelCentralUserManagementBOManager}
//------------------------------------------------------------

Procedure TGRIDServerDataModelCentralUserManagementBOManager.InternalLoadCommon;
var i : integer;
    cl : string;
    FAuditMem : Boolean;
    aTSOGRIDCentralUserManager : TSOGRIDCentralUserManager;
    aTSOGRIDCentralUser : TSOGRIDCentralUser;
    aTSOGRIDCentralSession : TSOGRIDCentralSession;
    aTSOGRIDCentralUserDirectoryEntry : TSOGRIDCentralUserDirectoryEntry;
    aTSOGRIDCentralGroup : TSOGRIDCentralGroup;
    CurrentInstanceKey : String;
    aSO : TofStoredObject_StringKey;
Begin
  FAuditMem := TofStoredObject_StringKey(StoredObject).AuditEnabled;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := False;
  CurrentInstanceKey := '';
  aSO := TofStoredObject_StringKey(StoredObject);
  for i := Low(aSO.AllocationData.TableATI) to High(aSO.AllocationData.TableATI) do
  begin
    //Deleted object is ignored but still exists in the buffer : Ignore it.
    if aSO.AllocationData.TableATI[i].MetaStatus = ToATIMetaStatus.omsDeleted then
      Continue;

    CurrentInstanceKey := aSO.AllocationData.TableATI[i].InstanceIndex;

    if (CurrentInstanceKey<>'') then
    begin

      if Not( Assigned(aSO.LookForObject(CurrentInstanceKey)) ) then
      begin
        //Object does not exists yet : Build.

        //Create object.
        cl := aSO.DefinitionData.Classes[aSO.AllocationData.TableATI[i].MetaClassIndex].ClassName;
        if cl = 'TSOGRIDCentralUserManager' then
        begin
          aTSOGRIDCentralUserManager := TSOGRIDCentralUserManager.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTSOGRIDCentralUserManager.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTSOGRIDCentralUserManager.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTSOGRIDCentralUserManager);
          end;
        end
        else
        if cl = 'TSOGRIDCentralUser' then
        begin
          aTSOGRIDCentralUser := TSOGRIDCentralUser.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTSOGRIDCentralUser.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTSOGRIDCentralUser.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTSOGRIDCentralUser);
          end;
        end
        else
        if cl = 'TSOGRIDCentralSession' then
        begin
          aTSOGRIDCentralSession := TSOGRIDCentralSession.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTSOGRIDCentralSession.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTSOGRIDCentralSession.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTSOGRIDCentralSession);
          end;
        end
        else
        if cl = 'TSOGRIDCentralUserDirectoryEntry' then
        begin
          aTSOGRIDCentralUserDirectoryEntry := TSOGRIDCentralUserDirectoryEntry.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTSOGRIDCentralUserDirectoryEntry.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTSOGRIDCentralUserDirectoryEntry.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTSOGRIDCentralUserDirectoryEntry);
          end;
        end
        else
        if cl = 'TSOGRIDCentralGroup' then
        begin
          aTSOGRIDCentralGroup := TSOGRIDCentralGroup.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTSOGRIDCentralGroup.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTSOGRIDCentralGroup.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTSOGRIDCentralGroup);
          end;
        end
        else
        begin
        end;
      end;

      if aSO.AllocationData.TableATI[i].MetaClassIndex = 0 then //TSOGRIDCentralUserManager
      begin
        aTSOGRIDCentralUserManager := TSOGRIDCentralUserManager(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 0 then //ObjKeyRef from TSOGRIDCentralUserManager class.
        begin
          aTSOGRIDCentralUserManager.FObjKeyRef.FATI := i;
          aTSOGRIDCentralUserManager.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 1 then //UserList
        begin
          aTSOGRIDCentralUserManager.FUserList.FATI := i;
          aTSOGRIDCentralUserManager.FUserList.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 2 then //GroupList
        begin
          aTSOGRIDCentralUserManager.FGroupList.FATI := i;
          aTSOGRIDCentralUserManager.FGroupList.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 3 then //SessionList
        begin
          aTSOGRIDCentralUserManager.FSessionList.FATI := i;
          aTSOGRIDCentralUserManager.FSessionList.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI[i].MetaClassIndex = 1 then //TSOGRIDCentralUser
      begin
        aTSOGRIDCentralUser := TSOGRIDCentralUser(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 0 then //ObjKeyRef from TSOGRIDCentralUser class.
        begin
          aTSOGRIDCentralUser.FObjKeyRef.FATI := i;
          aTSOGRIDCentralUser.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 1 then //UserName
        begin
          aTSOGRIDCentralUser.FUserName.FATI := i;
          aTSOGRIDCentralUser.FUserName.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 2 then //Password
        begin
          aTSOGRIDCentralUser.FPassword.FATI := i;
          aTSOGRIDCentralUser.FPassword.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 3 then //UserCreateDateTime
        begin
          aTSOGRIDCentralUser.FUserCreateDateTime.FATI := i;
          aTSOGRIDCentralUser.FUserCreateDateTime.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 4 then //DirectoryEntry
        begin
          aTSOGRIDCentralUser.FDirectoryEntry.FATI := i;
          aTSOGRIDCentralUser.FDirectoryEntry.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 5 then //CurrentSessions
        begin
          aTSOGRIDCentralUser.FCurrentSessions.FATI := i;
          aTSOGRIDCentralUser.FCurrentSessions.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 6 then //ClosedSessionsHistory
        begin
          aTSOGRIDCentralUser.FClosedSessionsHistory.FATI := i;
          aTSOGRIDCentralUser.FClosedSessionsHistory.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 7 then //Groups
        begin
          aTSOGRIDCentralUser.FGroups.FATI := i;
          aTSOGRIDCentralUser.FGroups.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI[i].MetaClassIndex = 2 then //TSOGRIDCentralSession
      begin
        aTSOGRIDCentralSession := TSOGRIDCentralSession(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 0 then //ObjKeyRef from TSOGRIDCentralSession class.
        begin
          aTSOGRIDCentralSession.FObjKeyRef.FATI := i;
          aTSOGRIDCentralSession.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 1 then //PhysicalConnectionID
        begin
          aTSOGRIDCentralSession.FPhysicalConnectionID.FATI := i;
          aTSOGRIDCentralSession.FPhysicalConnectionID.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 2 then //SessionID
        begin
          aTSOGRIDCentralSession.FSessionID.FATI := i;
          aTSOGRIDCentralSession.FSessionID.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 3 then //CreateDateTime
        begin
          aTSOGRIDCentralSession.FCreateDateTime.FATI := i;
          aTSOGRIDCentralSession.FCreateDateTime.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 4 then //LastActivityDateTime
        begin
          aTSOGRIDCentralSession.FLastActivityDateTime.FATI := i;
          aTSOGRIDCentralSession.FLastActivityDateTime.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 5 then //CloseDateTime
        begin
          aTSOGRIDCentralSession.FCloseDateTime.FATI := i;
          aTSOGRIDCentralSession.FCloseDateTime.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 6 then //ActivityHit
        begin
          aTSOGRIDCentralSession.FActivityHit.FATI := i;
          aTSOGRIDCentralSession.FActivityHit.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 7 then //UserAttached
        begin
          aTSOGRIDCentralSession.FUserAttached.FATI := i;
          aTSOGRIDCentralSession.FUserAttached.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI[i].MetaClassIndex = 3 then //TSOGRIDCentralUserDirectoryEntry
      begin
        aTSOGRIDCentralUserDirectoryEntry := TSOGRIDCentralUserDirectoryEntry(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 0 then //ObjKeyRef from TSOGRIDCentralUserDirectoryEntry class.
        begin
          aTSOGRIDCentralUserDirectoryEntry.FObjKeyRef.FATI := i;
          aTSOGRIDCentralUserDirectoryEntry.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 1 then //FistName
        begin
          aTSOGRIDCentralUserDirectoryEntry.FFistName.FATI := i;
          aTSOGRIDCentralUserDirectoryEntry.FFistName.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 2 then //LastName
        begin
          aTSOGRIDCentralUserDirectoryEntry.FLastName.FATI := i;
          aTSOGRIDCentralUserDirectoryEntry.FLastName.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 3 then //mail
        begin
          aTSOGRIDCentralUserDirectoryEntry.Fmail.FATI := i;
          aTSOGRIDCentralUserDirectoryEntry.Fmail.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 4 then //DOB
        begin
          aTSOGRIDCentralUserDirectoryEntry.FDOB.FATI := i;
          aTSOGRIDCentralUserDirectoryEntry.FDOB.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 5 then //ExternalReference
        begin
          aTSOGRIDCentralUserDirectoryEntry.FExternalReference.FATI := i;
          aTSOGRIDCentralUserDirectoryEntry.FExternalReference.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 6 then //Photo
        begin
          aTSOGRIDCentralUserDirectoryEntry.FPhoto.FATI := i;
          aTSOGRIDCentralUserDirectoryEntry.FPhoto.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI[i].MetaClassIndex = 4 then //TSOGRIDCentralGroup
      begin
        aTSOGRIDCentralGroup := TSOGRIDCentralGroup(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 0 then //ObjKeyRef from TSOGRIDCentralGroup class.
        begin
          aTSOGRIDCentralGroup.FObjKeyRef.FATI := i;
          aTSOGRIDCentralGroup.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 1 then //GroupDesc
        begin
          aTSOGRIDCentralGroup.FGroupDesc.FATI := i;
          aTSOGRIDCentralGroup.FGroupDesc.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 2 then //AppFunctionID
        begin
          aTSOGRIDCentralGroup.FAppFunctionID.FATI := i;
          aTSOGRIDCentralGroup.FAppFunctionID.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 3 then //AppFunctionRight
        begin
          aTSOGRIDCentralGroup.FAppFunctionRight.FATI := i;
          aTSOGRIDCentralGroup.FAppFunctionRight.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI[i].MetaPropertyIndex = 4 then //UsersAttached
        begin
          aTSOGRIDCentralGroup.FUsersAttached.FATI := i;
          aTSOGRIDCentralGroup.FUsersAttached.FData_Index := aSO.AllocationData.TableATI[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;


    end
    else
    begin
      Break; //End of array list in Instance = -1
    end;
  end;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := FAuditMem;
  StoredObject.SetModified(False);
end;

Function TGRIDServerDataModelCentralUserManagementBOManager.BuildObject(aObjectClass : String; Const Guid : String = '') : TObject;
var i : Integer;
    FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_StringKey(StoredObject).AuditEnabled;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := False;
 if aObjectClass = 'TSOGRIDCentralUserManager' then
 begin
   Result := TSOGRIDCentralUserManager.Create(Self);
   if guid <> '' then
   begin
     TSOGRIDCentralUserManager(Result).SetObjKeyRef(Guid); //Internal set in local buffer.
     TSOGRIDCentralUserManager(Result).FObjKey := Guid; //Variable set.
     StoredObject.ChangeGUID(Guid, Result); //ClassManager list update.
   end;
 end;
 if aObjectClass = 'TSOGRIDCentralUser' then
 begin
   Result := TSOGRIDCentralUser.Create(Self);
   if guid <> '' then
   begin
     TSOGRIDCentralUser(Result).SetObjKeyRef(Guid); //Internal set in local buffer.
     TSOGRIDCentralUser(Result).FObjKey := Guid; //Variable set.
     StoredObject.ChangeGUID(Guid, Result); //ClassManager list update.
   end;
 end;
 if aObjectClass = 'TSOGRIDCentralSession' then
 begin
   Result := TSOGRIDCentralSession.Create(Self);
   if guid <> '' then
   begin
     TSOGRIDCentralSession(Result).SetObjKeyRef(Guid); //Internal set in local buffer.
     TSOGRIDCentralSession(Result).FObjKey := Guid; //Variable set.
     StoredObject.ChangeGUID(Guid, Result); //ClassManager list update.
   end;
 end;
 if aObjectClass = 'TSOGRIDCentralUserDirectoryEntry' then
 begin
   Result := TSOGRIDCentralUserDirectoryEntry.Create(Self);
   if guid <> '' then
   begin
     TSOGRIDCentralUserDirectoryEntry(Result).SetObjKeyRef(Guid); //Internal set in local buffer.
     TSOGRIDCentralUserDirectoryEntry(Result).FObjKey := Guid; //Variable set.
     StoredObject.ChangeGUID(Guid, Result); //ClassManager list update.
   end;
 end;
 if aObjectClass = 'TSOGRIDCentralGroup' then
 begin
   Result := TSOGRIDCentralGroup.Create(Self);
   if guid <> '' then
   begin
     TSOGRIDCentralGroup(Result).SetObjKeyRef(Guid); //Internal set in local buffer.
     TSOGRIDCentralGroup(Result).FObjKey := Guid; //Variable set.
     StoredObject.ChangeGUID(Guid, Result); //ClassManager list update.
   end;
 end;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := FAuditMem;
end;

Constructor TGRIDServerDataModelCentralUserManagementBOManager.Create;
Begin
  Inherited Create;
  StoredObject := TofStoredObject_StringKey.Create;
  StoredObject.StoredObjectClassManager := Self;
  RegisterClass;
end;

Procedure TGRIDServerDataModelCentralUserManagementBOManager.PopulateObject( anObject : TObject; PropertyName, StringValue : String);
var i : integer;
    s : TStringList;
    ls : TList<String>;
    FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_StringKey(StoredObject).AuditEnabled;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := False;
  if anObject Is TSOGRIDCentralUserManager then
  begin
    if Lowercase(PropertyName) = 'userlist' then
    begin
      //TODO : Replace this mess by use of stream. :/
      ls := TList<String>.Create;
      try
        StoredObject.GetListOfString( anObject, TSOGRIDCentralUserManager(anObject).FUserList.FATI, ls);
        s := TStringList.Create;
        try
          s.Delimiter := ';';
          s.DelimitedText := StringValue;
          for I := 0 to s.Count-1 do
          ls.Add(s[i]);
        Finally
          FreeAndNil(s);
        end;

        StoredObject.SetListOfString( anObject, TSOGRIDCentralUserManager(anObject).FObjKey,
                            PropertyName,
                            TSOGRIDCentralUserManager(anObject).FUserList.FATI,
                            TSOGRIDCentralUserManager(anObject).FUserList.FData_Index,
                            ls);
      Finally
        FreeAndNil(ls);
      end;
    end;
    if Lowercase(PropertyName) = 'grouplist' then
    begin
      //TODO : Replace this mess by use of stream. :/
      ls := TList<String>.Create;
      try
        StoredObject.GetListOfString( anObject, TSOGRIDCentralUserManager(anObject).FGroupList.FATI, ls);
        s := TStringList.Create;
        try
          s.Delimiter := ';';
          s.DelimitedText := StringValue;
          for I := 0 to s.Count-1 do
          ls.Add(s[i]);
        Finally
          FreeAndNil(s);
        end;

        StoredObject.SetListOfString( anObject, TSOGRIDCentralUserManager(anObject).FObjKey,
                            PropertyName,
                            TSOGRIDCentralUserManager(anObject).FGroupList.FATI,
                            TSOGRIDCentralUserManager(anObject).FGroupList.FData_Index,
                            ls);
      Finally
        FreeAndNil(ls);
      end;
    end;
    if Lowercase(PropertyName) = 'sessionlist' then
    begin
      //TODO : Replace this mess by use of stream. :/
      ls := TList<String>.Create;
      try
        StoredObject.GetListOfString( anObject, TSOGRIDCentralUserManager(anObject).FSessionList.FATI, ls);
        s := TStringList.Create;
        try
          s.Delimiter := ';';
          s.DelimitedText := StringValue;
          for I := 0 to s.Count-1 do
          ls.Add(s[i]);
        Finally
          FreeAndNil(s);
        end;

        StoredObject.SetListOfString( anObject, TSOGRIDCentralUserManager(anObject).FObjKey,
                            PropertyName,
                            TSOGRIDCentralUserManager(anObject).FSessionList.FATI,
                            TSOGRIDCentralUserManager(anObject).FSessionList.FData_Index,
                            ls);
      Finally
        FreeAndNil(ls);
      end;
    end;
  end;
  if anObject Is TSOGRIDCentralUser then
  begin
    if Lowercase(PropertyName) = 'username' then
    begin
      TSOGRIDCentralUser(anObject).UserName := StringValue;
    end;
    if Lowercase(PropertyName) = 'password' then
    begin
      TSOGRIDCentralUser(anObject).Password := StringValue;
    end;
    if Lowercase(PropertyName) = 'usercreatedatetime' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TSOGRIDCentralUser(anObject).UserCreateDateTime := StrToDateTime(StringValue);
    end;
    if Lowercase(PropertyName) = 'directoryentry' then
    begin
        StoredObject.SetString( anObject, TSOGRIDCentralUser(anObject).FObjKey,
                            PropertyName,
                            TSOGRIDCentralUser(anObject).FDirectoryEntry.FATI,
                            TSOGRIDCentralUser(anObject).FDirectoryEntry.FData_Index,
                            StringValue);
    end;
    if Lowercase(PropertyName) = 'currentsessions' then
    begin
      //TODO : Replace this mess by use of stream. :/
      ls := TList<String>.Create;
      try
        StoredObject.GetListOfString( anObject, TSOGRIDCentralUser(anObject).FCurrentSessions.FATI, ls);
        s := TStringList.Create;
        try
          s.Delimiter := ';';
          s.DelimitedText := StringValue;
          for I := 0 to s.Count-1 do
          ls.Add(s[i]);
        Finally
          FreeAndNil(s);
        end;

        StoredObject.SetListOfString( anObject, TSOGRIDCentralUser(anObject).FObjKey,
                            PropertyName,
                            TSOGRIDCentralUser(anObject).FCurrentSessions.FATI,
                            TSOGRIDCentralUser(anObject).FCurrentSessions.FData_Index,
                            ls);
      Finally
        FreeAndNil(ls);
      end;
    end;
    if Lowercase(PropertyName) = 'closedsessionshistory' then
    begin
      //TODO : Replace this mess by use of stream. :/
      ls := TList<String>.Create;
      try
        StoredObject.GetListOfString( anObject, TSOGRIDCentralUser(anObject).FClosedSessionsHistory.FATI, ls);
        s := TStringList.Create;
        try
          s.Delimiter := ';';
          s.DelimitedText := StringValue;
          for I := 0 to s.Count-1 do
          ls.Add(s[i]);
        Finally
          FreeAndNil(s);
        end;

        StoredObject.SetListOfString( anObject, TSOGRIDCentralUser(anObject).FObjKey,
                            PropertyName,
                            TSOGRIDCentralUser(anObject).FClosedSessionsHistory.FATI,
                            TSOGRIDCentralUser(anObject).FClosedSessionsHistory.FData_Index,
                            ls);
      Finally
        FreeAndNil(ls);
      end;
    end;
    if Lowercase(PropertyName) = 'groups' then
    begin
      //TODO : Replace this mess by use of stream. :/
      ls := TList<String>.Create;
      try
        StoredObject.GetListOfString( anObject, TSOGRIDCentralUser(anObject).FGroups.FATI, ls);
        s := TStringList.Create;
        try
          s.Delimiter := ';';
          s.DelimitedText := StringValue;
          for I := 0 to s.Count-1 do
          ls.Add(s[i]);
        Finally
          FreeAndNil(s);
        end;

        StoredObject.SetListOfString( anObject, TSOGRIDCentralUser(anObject).FObjKey,
                            PropertyName,
                            TSOGRIDCentralUser(anObject).FGroups.FATI,
                            TSOGRIDCentralUser(anObject).FGroups.FData_Index,
                            ls);
      Finally
        FreeAndNil(ls);
      end;
    end;
  end;
  if anObject Is TSOGRIDCentralSession then
  begin
    if Lowercase(PropertyName) = 'physicalconnectionid' then
    begin
      TSOGRIDCentralSession(anObject).PhysicalConnectionID := StringValue;
    end;
    if Lowercase(PropertyName) = 'sessionid' then
    begin
      TSOGRIDCentralSession(anObject).SessionID := StringValue;
    end;
    if Lowercase(PropertyName) = 'createdatetime' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TSOGRIDCentralSession(anObject).CreateDateTime := StrToDateTime(StringValue);
    end;
    if Lowercase(PropertyName) = 'lastactivitydatetime' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TSOGRIDCentralSession(anObject).LastActivityDateTime := StrToDateTime(StringValue);
    end;
    if Lowercase(PropertyName) = 'closedatetime' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TSOGRIDCentralSession(anObject).CloseDateTime := StrToDateTime(StringValue);
    end;
    if Lowercase(PropertyName) = 'activityhit' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TSOGRIDCentralSession(anObject).ActivityHit := StrToInt(StringValue);
    end;
    if Lowercase(PropertyName) = 'userattached' then
    begin
        StoredObject.SetString( anObject, TSOGRIDCentralSession(anObject).FObjKey,
                            PropertyName,
                            TSOGRIDCentralSession(anObject).FUserAttached.FATI,
                            TSOGRIDCentralSession(anObject).FUserAttached.FData_Index,
                            StringValue);
    end;
  end;
  if anObject Is TSOGRIDCentralUserDirectoryEntry then
  begin
    if Lowercase(PropertyName) = 'fistname' then
    begin
      TSOGRIDCentralUserDirectoryEntry(anObject).FistName := StringValue;
    end;
    if Lowercase(PropertyName) = 'lastname' then
    begin
      TSOGRIDCentralUserDirectoryEntry(anObject).LastName := StringValue;
    end;
    if Lowercase(PropertyName) = 'mail' then
    begin
      TSOGRIDCentralUserDirectoryEntry(anObject).mail := StringValue;
    end;
    if Lowercase(PropertyName) = 'dob' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TSOGRIDCentralUserDirectoryEntry(anObject).DOB := StrToDateTime(StringValue);
    end;
    if Lowercase(PropertyName) = 'externalreference' then
    begin
      TSOGRIDCentralUserDirectoryEntry(anObject).ExternalReference := StringValue;
    end;
    //if Lowercase(PropertyName) = 'photo' then
    //begin
    //  TSOGRIDCentralUserDirectoryEntry(anObject).Photo := ToStream(StringValue);
    //end;
  end;
  if anObject Is TSOGRIDCentralGroup then
  begin
    if Lowercase(PropertyName) = 'groupdesc' then
    begin
      TSOGRIDCentralGroup(anObject).GroupDesc := StringValue;
    end;
    if Lowercase(PropertyName) = 'appfunctionid' then
    begin
      TSOGRIDCentralGroup(anObject).AppFunctionID := StringValue;
    end;
    if Lowercase(PropertyName) = 'appfunctionright' then
    begin
      if length(StringValue)=0 then
        StringValue := '0';
      TSOGRIDCentralGroup(anObject).AppFunctionRight := TSOGRIDCentralGroupRight(StrToInt(StringValue));
    end;
    if Lowercase(PropertyName) = 'usersattached' then
    begin
      //TODO : Replace this mess by use of stream. :/
      ls := TList<String>.Create;
      try
        StoredObject.GetListOfString( anObject, TSOGRIDCentralGroup(anObject).FUsersAttached.FATI, ls);
        s := TStringList.Create;
        try
          s.Delimiter := ';';
          s.DelimitedText := StringValue;
          for I := 0 to s.Count-1 do
          ls.Add(s[i]);
        Finally
          FreeAndNil(s);
        end;

        StoredObject.SetListOfString( anObject, TSOGRIDCentralGroup(anObject).FObjKey,
                            PropertyName,
                            TSOGRIDCentralGroup(anObject).FUsersAttached.FATI,
                            TSOGRIDCentralGroup(anObject).FUsersAttached.FData_Index,
                            ls);
      Finally
        FreeAndNil(ls);
      end;
    end;
  end;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDServerDataModelCentralUserManagementBOManager.PopulateObjectStream( anObject : TObject; PropertyName : String; Value : TStream);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_StringKey(StoredObject).AuditEnabled;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := False;
if anObject Is TSOGRIDCentralUserManager then
begin
end;
if anObject Is TSOGRIDCentralUser then
begin
end;
if anObject Is TSOGRIDCentralSession then
begin
end;
if anObject Is TSOGRIDCentralUserDirectoryEntry then
begin
  if Lowercase(PropertyName) = 'photo' then
  begin
    Value.Position := 0;
    TSOGRIDCentralUserDirectoryEntry(anObject).Photo := Value;
  end;
end;
if anObject Is TSOGRIDCentralGroup then
begin
end;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDServerDataModelCentralUserManagementBOManager.PopulateObjectWithString( anObject : TObject; PropertyName : String; Value : String);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_StringKey(StoredObject).AuditEnabled;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := False;
  if anObject Is TSOGRIDCentralUserManager then
  begin
  end;
  if anObject Is TSOGRIDCentralUser then
  begin
    if Lowercase(PropertyName) = 'username' then
    begin
      TSOGRIDCentralUser(anObject).UserName := Value;
    end;
    if Lowercase(PropertyName) = 'password' then
    begin
      TSOGRIDCentralUser(anObject).Password := Value;
    end;
  end;
  if anObject Is TSOGRIDCentralSession then
  begin
    if Lowercase(PropertyName) = 'physicalconnectionid' then
    begin
      TSOGRIDCentralSession(anObject).PhysicalConnectionID := Value;
    end;
    if Lowercase(PropertyName) = 'sessionid' then
    begin
      TSOGRIDCentralSession(anObject).SessionID := Value;
    end;
  end;
  if anObject Is TSOGRIDCentralUserDirectoryEntry then
  begin
    if Lowercase(PropertyName) = 'fistname' then
    begin
      TSOGRIDCentralUserDirectoryEntry(anObject).FistName := Value;
    end;
    if Lowercase(PropertyName) = 'lastname' then
    begin
      TSOGRIDCentralUserDirectoryEntry(anObject).LastName := Value;
    end;
    if Lowercase(PropertyName) = 'mail' then
    begin
      TSOGRIDCentralUserDirectoryEntry(anObject).mail := Value;
    end;
    if Lowercase(PropertyName) = 'externalreference' then
    begin
      TSOGRIDCentralUserDirectoryEntry(anObject).ExternalReference := Value;
    end;
  end;
  if anObject Is TSOGRIDCentralGroup then
  begin
    if Lowercase(PropertyName) = 'groupdesc' then
    begin
      TSOGRIDCentralGroup(anObject).GroupDesc := Value;
    end;
    if Lowercase(PropertyName) = 'appfunctionid' then
    begin
      TSOGRIDCentralGroup(anObject).AppFunctionID := Value;
    end;
  end;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDServerDataModelCentralUserManagementBOManager.PopulateObjectWithDouble( anObject : TObject; PropertyName : String; Value : Double);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_StringKey(StoredObject).AuditEnabled;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := False;
  if anObject Is TSOGRIDCentralUserManager then
  begin
  end;
  if anObject Is TSOGRIDCentralUser then
  begin
  end;
  if anObject Is TSOGRIDCentralSession then
  begin
  end;
  if anObject Is TSOGRIDCentralUserDirectoryEntry then
  begin
  end;
  if anObject Is TSOGRIDCentralGroup then
  begin
  end;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDServerDataModelCentralUserManagementBOManager.PopulateObjectWithInteger( anObject : TObject; PropertyName : String; Value : Integer);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_StringKey(StoredObject).AuditEnabled;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := False;
  if anObject Is TSOGRIDCentralUserManager then
  begin
  end;
  if anObject Is TSOGRIDCentralUser then
  begin
  end;
  if anObject Is TSOGRIDCentralSession then
  begin
    if Lowercase(PropertyName) = 'activityhit' then
    begin
      TSOGRIDCentralSession(anObject).ActivityHit := Value;
    end;
  end;
  if anObject Is TSOGRIDCentralUserDirectoryEntry then
  begin
  end;
  if anObject Is TSOGRIDCentralGroup then
  begin
  end;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDServerDataModelCentralUserManagementBOManager.PopulateObjectWithDateTime( anObject : TObject; PropertyName : String; Value : TDateTime);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_StringKey(StoredObject).AuditEnabled;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := False;
  if anObject Is TSOGRIDCentralUserManager then
  begin
  end;
  if anObject Is TSOGRIDCentralUser then
  begin
    if Lowercase(PropertyName) = 'usercreatedatetime' then
    begin
      TSOGRIDCentralUser(anObject).UserCreateDateTime := Value;
    end;
  end;
  if anObject Is TSOGRIDCentralSession then
  begin
    if Lowercase(PropertyName) = 'createdatetime' then
    begin
      TSOGRIDCentralSession(anObject).CreateDateTime := Value;
    end;
    if Lowercase(PropertyName) = 'lastactivitydatetime' then
    begin
      TSOGRIDCentralSession(anObject).LastActivityDateTime := Value;
    end;
    if Lowercase(PropertyName) = 'closedatetime' then
    begin
      TSOGRIDCentralSession(anObject).CloseDateTime := Value;
    end;
  end;
  if anObject Is TSOGRIDCentralUserDirectoryEntry then
  begin
    if Lowercase(PropertyName) = 'dob' then
    begin
      TSOGRIDCentralUserDirectoryEntry(anObject).DOB := Value;
    end;
  end;
  if anObject Is TSOGRIDCentralGroup then
  begin
  end;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDServerDataModelCentralUserManagementBOManager.PopulateObjectWithUInt32( anObject : TObject; PropertyName : String; Value : UInt32);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_StringKey(StoredObject).AuditEnabled;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := False;
  if anObject Is TSOGRIDCentralUserManager then
  begin
  end;
  if anObject Is TSOGRIDCentralUser then
  begin
  end;
  if anObject Is TSOGRIDCentralSession then
  begin
  end;
  if anObject Is TSOGRIDCentralUserDirectoryEntry then
  begin
  end;
  if anObject Is TSOGRIDCentralGroup then
  begin
  end;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDServerDataModelCentralUserManagementBOManager.PopulateObjectWithInt64( anObject : TObject; PropertyName : String; Value : UInt64);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_StringKey(StoredObject).AuditEnabled;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := False;
  if anObject Is TSOGRIDCentralUserManager then
  begin
  end;
  if anObject Is TSOGRIDCentralUser then
  begin
  end;
  if anObject Is TSOGRIDCentralSession then
  begin
  end;
  if anObject Is TSOGRIDCentralUserDirectoryEntry then
  begin
  end;
  if anObject Is TSOGRIDCentralGroup then
  begin
  end;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDServerDataModelCentralUserManagementBOManager.PopulateObjectWithByte( anObject : TObject; PropertyName : String; Value : Byte);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_StringKey(StoredObject).AuditEnabled;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := False;
  if anObject Is TSOGRIDCentralUserManager then
  begin
  end;
  if anObject Is TSOGRIDCentralUser then
  begin
  end;
  if anObject Is TSOGRIDCentralSession then
  begin
  end;
  if anObject Is TSOGRIDCentralUserDirectoryEntry then
  begin
  end;
  if anObject Is TSOGRIDCentralGroup then
  begin
    if Lowercase(PropertyName) = 'appfunctionright' then
    begin
      TSOGRIDCentralGroup(anObject).AppFunctionRight := TSOGRIDCentralGroupRight(Value);
    end;
  end;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := FAuditMem;
end;
Procedure TGRIDServerDataModelCentralUserManagementBOManager.PopulateObjectWithBoolean( anObject : TObject; PropertyName : String; Value : Boolean);
var FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_StringKey(StoredObject).AuditEnabled;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := False;
  if anObject Is TSOGRIDCentralUserManager then
  begin
  end;
  if anObject Is TSOGRIDCentralUser then
  begin
  end;
  if anObject Is TSOGRIDCentralSession then
  begin
  end;
  if anObject Is TSOGRIDCentralUserDirectoryEntry then
  begin
  end;
  if anObject Is TSOGRIDCentralGroup then
  begin
  end;
  TofStoredObject_StringKey(StoredObject).AuditEnabled := FAuditMem;
end;

Procedure TGRIDServerDataModelCentralUserManagementBOManager.RegisterClass;
Begin
  StoredObject.ClearAllData(True);
  StoredObject.RegisterClass('TSOGRIDCentralUserManager');
  StoredObject.RegisterProperty('TSOGRIDCentralUserManager','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralUserManager','UserList',ofssObjectList);
  StoredObject.RegisterProperty('TSOGRIDCentralUserManager','GroupList',ofssObjectList);
  StoredObject.RegisterProperty('TSOGRIDCentralUserManager','SessionList',ofssObjectList);
  StoredObject.RegisterClass('TSOGRIDCentralUser');
  StoredObject.RegisterProperty('TSOGRIDCentralUser','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralUser','UserName',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralUser','Password',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralUser','UserCreateDateTime',ofssDateTime);
  StoredObject.RegisterProperty('TSOGRIDCentralUser','DirectoryEntry',ofssObject);
  StoredObject.RegisterProperty('TSOGRIDCentralUser','CurrentSessions',ofssObjectList);
  StoredObject.RegisterProperty('TSOGRIDCentralUser','ClosedSessionsHistory',ofssObjectList);
  StoredObject.RegisterProperty('TSOGRIDCentralUser','Groups',ofssObjectList);
  StoredObject.RegisterClass('TSOGRIDCentralSession');
  StoredObject.RegisterProperty('TSOGRIDCentralSession','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralSession','PhysicalConnectionID',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralSession','SessionID',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralSession','CreateDateTime',ofssDateTime);
  StoredObject.RegisterProperty('TSOGRIDCentralSession','LastActivityDateTime',ofssDateTime);
  StoredObject.RegisterProperty('TSOGRIDCentralSession','CloseDateTime',ofssDateTime);
  StoredObject.RegisterProperty('TSOGRIDCentralSession','ActivityHit',ofssInteger);
  StoredObject.RegisterProperty('TSOGRIDCentralSession','UserAttached',ofssObject);
  StoredObject.RegisterClass('TSOGRIDCentralUserDirectoryEntry');
  StoredObject.RegisterProperty('TSOGRIDCentralUserDirectoryEntry','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralUserDirectoryEntry','FistName',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralUserDirectoryEntry','LastName',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralUserDirectoryEntry','mail',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralUserDirectoryEntry','DOB',ofssDateTime);
  StoredObject.RegisterProperty('TSOGRIDCentralUserDirectoryEntry','ExternalReference',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralUserDirectoryEntry','Photo',ofssBlob);
  StoredObject.RegisterClass('TSOGRIDCentralGroup');
  StoredObject.RegisterProperty('TSOGRIDCentralGroup','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralGroup','GroupDesc',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralGroup','AppFunctionID',ofssString);
  StoredObject.RegisterProperty('TSOGRIDCentralGroup','AppFunctionRight',ofssByte);
  StoredObject.RegisterProperty('TSOGRIDCentralGroup','UsersAttached',ofssObjectList);
end;



End.


//--------- Original UpScript
{
project name GRIDServerDataModelCentralUserManagementBO

include classes sysutils

define forward
TSOGRIDCentralSession
TSOGRIDCentralUser
TSOGRIDCentralUserList
TSOGRIDCentralUserDirectoryEntry
TSOGRIDCentralGroupList
TSOGRIDCentralSessionList
end

define class TSOGRIDCentralUserManager
UserList TSOGRIDCentralUserList
GroupList TSOGRIDCentralGroupList
SessionList TSOGRIDCentralSessionList
end

define class TSOGRIDCentralUser
UserName Password String
UserCreateDateTime datetime
DirectoryEntry TSOGRIDCentralUserDirectoryEntry
CurrentSessions TSOGRIDCentralSessionList
ClosedSessionsHistory TSOGRIDCentralSessionList
Groups TSOGRIDCentralGroupList
end

define Class TSOGRIDCentralSession
PhysicalConnectionID string
SessionID string
CreateDateTime datetime
LastActivityDateTime datetime
CloseDateTime datetime
ActivityHit integer
UserAttached TSOGRIDCentralUser
end

define Class TSOGRIDCentralUserDirectoryEntry
FistName LastName mail string
DOB datetime
ExternalReference string
Photo stream
end

define enum TSOGRIDCentralGroupRight grALL grREAD grWRITE grNONE end
define class TSOGRIDCentralGroup
GroupDesc String
AppFunctionID string
AppFunctionRight TSOGRIDCentralGroupRight
UsersAttached TSOGRIDCentralUserList
end

define classlist TSOGRIDCentralUserDirectory of TSOGRIDCentralUserDirectoryEntry

define classlist TSOGRIDCentralUserList of TSOGRIDCentralUser

define classlist TSOGRIDCentralGroupList of TSOGRIDCentralGroup

define classlist TSOGRIDCentralSessionList of TSOGRIDCentralSession


}

