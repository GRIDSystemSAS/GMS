{*---------------------------------------------------*}
// UpScript Translator (ObjectPascal for StoredObject) AutoGenerated file.
{*---------------------------------------------------*}


Unit GMS.Client.SSDPLikeServer.DataModel.BO;
{*---------------------------------------------------*}
{$IFDEF FPC}
{$mode delphi}
{$ENDIF}


INTERFACE

//Include statement
Uses
  GS.StoredObject.Buffer, GS.StoredObject.BaseTypes, GS.StoredObject.Stream,
  {$IFNDEF FPC}
  System.Generics.collections,
  GS.StoredObject.Core,
  {$ELSE}
  Generics.collections,
  GS.StoredObject.Types_UINT32,
  GS.StoredObject.Core_NonGenerics,
  {$ENDIF }
  classes, sysutils;
{*---------------------------------------------------*}
Type

TSOGRIDSSDPLikeServerSideDataModelManager = Class;
TSOSSDPServerService = Class;
TSOSSDPServerDevice = Class;
TSOSSDPServerSideDatamodel = Class;
//TSOSSDPServerServiceList = Class; Not used
//TSOSSDPServerDeviceList = Class; Not used

//---- Class TSOSSDPServerService (2 Field(s) and 0 method(s))
TSOSSDPServerService = Class
Protected
  {$REGION 'StoredObject Technical stuffs for TSOSSDPServerService'}
  StoredProtoAppClasses : TofStoredObject_UInt32Key; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : UInt32;
  FServiceName : TData_Def; //string
  FServiceType : TData_Def; //string

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : UInt32);
  Function GetObjKeyRef : UInt32;

  Procedure SetServiceName(Value : String);
  Function GetServiceName : String;
  Procedure SetServiceType(Value : String);
  Function GetServiceType : String;
Public
  Constructor Create(Const aManager : TSOGRIDSSDPLikeServerSideDataModelManager); Virtual;
Published
  Property ServiceName : String read GetServiceName Write SetServiceName;
  Property ServiceType : String read GetServiceType Write SetServiceType;
End;

//---- Class TSOSSDPServerDevice (4 Field(s) and 0 method(s))
TSOSSDPServerDevice = Class
Protected
  {$REGION 'StoredObject Technical stuffs for TSOSSDPServerDevice'}
  StoredProtoAppClasses : TofStoredObject_UInt32Key; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : UInt32;
  FLocation : TData_Def; //String
  FServerName : TData_Def; //String
  FServiceList : TData_Def; //TSOSSDPServerServiceList
  FUNS : TData_Def; //string

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : UInt32);
  Function GetObjKeyRef : UInt32;

  Procedure SetLocation(Value : String);
  Function GetLocation : String;
  Procedure SetServerName(Value : String);
  Function GetServerName : String;
  Procedure SetServiceList(Index : Integer; Const Value : TSOSSDPServerService);
  Function GetServiceList(Index : Integer) : TSOSSDPServerService;
  Procedure SetUNS(Value : String);
  Function GetUNS : String;
Public
  Constructor Create(Const aManager : TSOGRIDSSDPLikeServerSideDataModelManager); Virtual;
  Procedure AddServiceList(aTSOSSDPServerService : TSOSSDPServerService);
  Procedure RemoveServiceList(aTSOSSDPServerService : TSOSSDPServerService);
  Function ServiceListCount : Integer;
  //Procedure IsServiceListExists(aTSOSSDPServerService : TSOSSDPServerService);
  Property ServiceList[Index : Integer] : TSOSSDPServerService read GetServiceList Write SetServiceList;
Published
  Property Location : String read GetLocation Write SetLocation;
  Property ServerName : String read GetServerName Write SetServerName;
  Property UNS : String read GetUNS Write SetUNS;
End;

//---- Class TSOSSDPServerSideDatamodel (3 Field(s) and 0 method(s))
TSOSSDPServerSideDatamodel = Class
Protected
  {$REGION 'StoredObject Technical stuffs for TSOSSDPServerSideDatamodel'}
  StoredProtoAppClasses : TofStoredObject_UInt32Key; //Pointer
  FObjKeyRef : TData_Def;
  FObjKey : UInt32;
  FProduct : TData_Def; //string
  FVersion : TData_Def; //string
  FDeviceList : TData_Def; //TSOSSDPServerDeviceList

  {$ENDREGION}
  Function ClassContractGetterSetter : Boolean;

  Procedure SetObjKeyRef(Value : UInt32);
  Function GetObjKeyRef : UInt32;

  Procedure SetProduct(Value : String);
  Function GetProduct : String;
  Procedure SetVersion(Value : String);
  Function GetVersion : String;
  Procedure SetDeviceList(Index : Integer; Const Value : TSOSSDPServerDevice);
  Function GetDeviceList(Index : Integer) : TSOSSDPServerDevice;
Public
  Constructor Create(Const aManager : TSOGRIDSSDPLikeServerSideDataModelManager); Virtual;
  Procedure AddDeviceList(aTSOSSDPServerDevice : TSOSSDPServerDevice);
  Procedure RemoveDeviceList(aTSOSSDPServerDevice : TSOSSDPServerDevice);
  Function DeviceListCount : Integer;
  //Procedure IsDeviceListExists(aTSOSSDPServerDevice : TSOSSDPServerDevice);
  Property DeviceList[Index : Integer] : TSOSSDPServerDevice read GetDeviceList Write SetDeviceList;
Published
  Property Product : String read GetProduct Write SetProduct;
  Property Version : String read GetVersion Write SetVersion;
End;

//---- Class List TSOSSDPServerServiceList (of type TSOSSDPServerService) : NOT USED in StoredObject Mode

//---- Class List TSOSSDPServerDeviceList (of type TSOSSDPServerDevice) : NOT USED in StoredObject Mode



//------------------------------------------------------------
TSOGRIDSSDPLikeServerSideDataModelManager = class(TofStoredObjectClassManager_UInt32)
Protected
  Procedure InternalLoadCommon; Override;
Public
  Constructor Create; Virtual;
  Function BuildObject(aObjectClass : String; Const Guid : UInt32) : TObject; Override;
    Procedure PopulateObject( anObject : TObject; PropertyName, StringValue : String); Override;
    Procedure PopulateObjectStream( anObject : TObject; PropertyName : String; Value : TStream); Override;
  Procedure RegisterClass; Override;

end;


IMPLEMENTATION


//---- Class TSOSSDPServerService

  Constructor TSOSSDPServerService.Create(Const aManager : TSOGRIDSSDPLikeServerSideDataModelManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FServiceName.FATI := -1;
    FServiceType.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TSOSSDPServerService.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TSOSSDPServerService,'TSOSSDPServerService Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TSOSSDPServerService.SetObjKeyRef(Value : UInt32);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetUInt32(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TSOSSDPServerService.GetObjKeyRef : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetUInt32(Self, FObjKeyRef.FATI,Result);
  End;

  Procedure TSOSSDPServerService.SetServiceName(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'ServiceName',FServiceName.FATI,FServiceName.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPServerService.SetServiceName(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOSSDPServerService.GetServiceName : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FServiceName.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPServerService.GetServiceName : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOSSDPServerService.SetServiceType(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'ServiceType',FServiceType.FATI,FServiceType.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPServerService.SetServiceType(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOSSDPServerService.GetServiceType : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FServiceType.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPServerService.GetServiceType : string --> '+E.Message)
      end;
    end;
  End;


//---- Class TSOSSDPServerDevice

  Constructor TSOSSDPServerDevice.Create(Const aManager : TSOGRIDSSDPLikeServerSideDataModelManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FLocation.FATI := -1;
    FServerName.FATI := -1;
    FServiceList.FATI := -1;
    FUNS.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TSOSSDPServerDevice.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TSOSSDPServerDevice,'TSOSSDPServerDevice Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TSOSSDPServerDevice.SetObjKeyRef(Value : UInt32);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetUInt32(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TSOSSDPServerDevice.GetObjKeyRef : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetUInt32(Self, FObjKeyRef.FATI,Result);
  End;

  Procedure TSOSSDPServerDevice.SetLocation(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'Location',FLocation.FATI,FLocation.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPServerDevice.SetLocation(Value : String) --> '+E.Message)
      end;
    end;
  End;

  Function TSOSSDPServerDevice.GetLocation : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FLocation.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPServerDevice.GetLocation : String --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOSSDPServerDevice.SetServerName(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'ServerName',FServerName.FATI,FServerName.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPServerDevice.SetServerName(Value : String) --> '+E.Message)
      end;
    end;
  End;

  Function TSOSSDPServerDevice.GetServerName : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FServerName.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPServerDevice.GetServerName : String --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOSSDPServerDevice.SetServiceList(Index : Integer; Const Value : TSOSSDPServerService);
  var a : String;
      Tools : TList<UInt32>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Assert(Assigned(Value)); //Nil forbiden
    Tools :=  TList<UInt32>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfUint32(Self,FServiceList.FATI,Tools);
        if Tools.Count>=Index then
        begin
          Tools[Index] := Value.FObjKey;
          StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'ServiceList',FServiceList.FATI,FServiceList.FData_Index,Tools);
        end
        else
        begin
          raise Exception.Create('Index overflow : Total ServiceList object Count = '+IntToStr(Tools.Count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOSSDPServerDevice.SetServiceList'+ E.Message);
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
  End;

  Function TSOSSDPServerDevice.GetServiceList(Index : Integer) : TSOSSDPServerService;
  var a : String;
      Tools : TList<UInt32>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Tools :=  TList<UInt32>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfUInt32(Self,FServiceList.FATI,Tools);
        if (Tools.Count>Index) then
        Begin
          Result := TSOSSDPServerService(StoredProtoAppClasses.BusinessObjects[Tools[Index]]);
        End
        Else
        Begin
          Raise Exception.Create('Index overflow : Total ServiceList count = '+IntToStr(Tools.count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOSSDPServerDevice.GetServiceList : '+E.Message)
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
    if Result = nil then
      raise Exception.Create('TSOSSDPServerDevice.GetServiceList('+IntToStr(Index)+') unassigned');
  End;

  Procedure TSOSSDPServerDevice.SetUNS(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'UNS',FUNS.FATI,FUNS.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPServerDevice.SetUNS(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOSSDPServerDevice.GetUNS : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FUNS.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPServerDevice.GetUNS : string --> '+E.Message)
      end;
    end;
  End;


  Procedure TSOSSDPServerDevice.AddServiceList(aTSOSSDPServerService : TSOSSDPServerService);
  var Tools : TList<UInt32>;
  Begin
    Assert(Assigned(aTSOSSDPServerService));
    Tools :=  TList<UInt32>.Create;
    try
      StoredProtoAppClasses.GetListOfUInt32(Self,FServiceList.FATI,Tools);
      Tools.Add(aTSOSSDPServerService.FObjKey); //No "if IndexOf()" test : Mutli-occurence is allowed (See AddExternalRef)
      StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'ServiceList',FServiceList.FATI,FServiceList.FData_Index,Tools);
    finally
      FreeAndNil(Tools);
    end;
  end;

  Procedure TSOSSDPServerDevice.RemoveServiceList(aTSOSSDPServerService : TSOSSDPServerService);
  var Tools : TList<UInt32>;
      lk : Int64;
  Begin
    Assert(Assigned(aTSOSSDPServerService));
    Tools :=  TList<UInt32>.Create;
    try
      StoredProtoAppClasses.GetListOfUInt32(Self,FServiceList.FATI,Tools);
      lk := Tools.IndexOf(aTSOSSDPServerService.FObjKey);
      if lk>-1 then
      begin
        Tools.Delete(lk);
        StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'ServiceList',FServiceList.FATI,FServiceList.FData_Index,Tools);
      end;
    finally
      FreeAndNil(Tools);
    end;
  end;

  Function TSOSSDPServerDevice.ServiceListCount : Integer;
  Begin
    Result := StoredProtoAppClasses.GetListItemCount(FServiceList.FData_Index);
  end;


//---- Class TSOSSDPServerSideDatamodel

  Constructor TSOSSDPServerSideDatamodel.Create(Const aManager : TSOGRIDSSDPLikeServerSideDataModelManager);
  Begin
    //Inherited; Must not call to insure class name coherence in AddObject(Self) statement.
    Assert(Assigned(aManager));
    StoredProtoAppClasses :=  TofStoredObject_UInt32Key(aManager.StoredObject);

    FProduct.FATI := -1;
    FVersion.FATI := -1;
    FDeviceList.FATI := -1;
    StoredProtoAppClasses.AddObject(Self,FobjKey);
    FObjKeyRef.FATI := -1;
    SetObjKeyRef(FObjKey);
  End;

 Function TSOSSDPServerSideDatamodel.ClassContractGetterSetter : Boolean;
 Begin
   Assert(TObject(Self) Is TSOSSDPServerSideDatamodel,'TSOSSDPServerSideDatamodel Expected but '+Self.ClassName+' found.');
   if not(Assigned(StoredProtoAppClasses)) then
     raise Exception.Create('Object not exists anymore (Certainly freed by a TofStoredObject.Clear or Load call or by Persister manupulation).');
   Result := StoredProtoAppClasses.StoredObjectClassManager.Status <> smsLoading;
 end;

  Procedure TSOSSDPServerSideDatamodel.SetObjKeyRef(Value : UInt32);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.SetUInt32(Self, FObjKey,'ObjKeyRef',FObjKeyRef.FATI,FObjKeyRef.FData_Index, Value);
  End;

  Function TSOSSDPServerSideDatamodel.GetObjKeyRef : UInt32;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    StoredProtoAppClasses.GetUInt32(Self, FObjKeyRef.FATI,Result);
  End;

  Procedure TSOSSDPServerSideDatamodel.SetProduct(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'Product',FProduct.FATI,FProduct.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPServerSideDatamodel.SetProduct(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOSSDPServerSideDatamodel.GetProduct : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FProduct.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPServerSideDatamodel.GetProduct : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOSSDPServerSideDatamodel.SetVersion(Value : String);
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.SetString(Self, FObjKey,'Version',FVersion.FATI,FVersion.FData_Index,Value);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPServerSideDatamodel.SetVersion(Value : string) --> '+E.Message)
      end;
    end;
  End;

  Function TSOSSDPServerSideDatamodel.GetVersion : String;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    try
      StoredProtoAppClasses.GetString(Self,FVersion.FATI,Result);
    Except
      On E : Exception do
      begin
        Raise Exception.Create('TSOSSDPServerSideDatamodel.GetVersion : string --> '+E.Message)
      end;
    end;
  End;

  Procedure TSOSSDPServerSideDatamodel.SetDeviceList(Index : Integer; Const Value : TSOSSDPServerDevice);
  var a : String;
      Tools : TList<UInt32>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Assert(Assigned(Value)); //Nil forbiden
    Tools :=  TList<UInt32>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfUint32(Self,FDeviceList.FATI,Tools);
        if Tools.Count>=Index then
        begin
          Tools[Index] := Value.FObjKey;
          StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'DeviceList',FDeviceList.FATI,FDeviceList.FData_Index,Tools);
        end
        else
        begin
          raise Exception.Create('Index overflow : Total DeviceList object Count = '+IntToStr(Tools.Count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOSSDPServerSideDatamodel.SetDeviceList'+ E.Message);
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
  End;

  Function TSOSSDPServerSideDatamodel.GetDeviceList(Index : Integer) : TSOSSDPServerDevice;
  var a : String;
      Tools : TList<UInt32>;
  Begin
    if not(ClassContractGetterSetter) then
      Exit;
    Tools :=  TList<UInt32>.Create;
    try
      try
        StoredProtoAppClasses.GetListOfUInt32(Self,FDeviceList.FATI,Tools);
        if (Tools.Count>Index) then
        Begin
          Result := TSOSSDPServerDevice(StoredProtoAppClasses.BusinessObjects[Tools[Index]]);
        End
        Else
        Begin
          Raise Exception.Create('Index overflow : Total DeviceList count = '+IntToStr(Tools.count)+', Index ask = '+IntTostr(Index));
        end;
      Except
        On E : Exception do
        begin
          Raise Exception.Create('TSOSSDPServerSideDatamodel.GetDeviceList : '+E.Message)
        end;
      end;
    Finally
      FreeAndNil(Tools);
    end;
    if Result = nil then
      raise Exception.Create('TSOSSDPServerSideDatamodel.GetDeviceList('+IntToStr(Index)+') unassigned');
  End;


  Procedure TSOSSDPServerSideDatamodel.AddDeviceList(aTSOSSDPServerDevice : TSOSSDPServerDevice);
  var Tools : TList<UInt32>;
  Begin
    Assert(Assigned(aTSOSSDPServerDevice));
    Tools :=  TList<UInt32>.Create;
    try
      StoredProtoAppClasses.GetListOfUInt32(Self,FDeviceList.FATI,Tools);
      Tools.Add(aTSOSSDPServerDevice.FObjKey); //No "if IndexOf()" test : Mutli-occurence is allowed (See AddExternalRef)
      StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'DeviceList',FDeviceList.FATI,FDeviceList.FData_Index,Tools);
    finally
      FreeAndNil(Tools);
    end;
  end;

  Procedure TSOSSDPServerSideDatamodel.RemoveDeviceList(aTSOSSDPServerDevice : TSOSSDPServerDevice);
  var Tools : TList<UInt32>;
      lk : Int64;
  Begin
    Assert(Assigned(aTSOSSDPServerDevice));
    Tools :=  TList<UInt32>.Create;
    try
      StoredProtoAppClasses.GetListOfUInt32(Self,FDeviceList.FATI,Tools);
      lk := Tools.IndexOf(aTSOSSDPServerDevice.FObjKey);
      if lk>-1 then
      begin
        Tools.Delete(lk);
        StoredProtoAppClasses.SetListOfUInt32(Self, FObjKey, 'DeviceList',FDeviceList.FATI,FDeviceList.FData_Index,Tools);
      end;
    finally
      FreeAndNil(Tools);
    end;
  end;

  Function TSOSSDPServerSideDatamodel.DeviceListCount : Integer;
  Begin
    Result := StoredProtoAppClasses.GetListItemCount(FDeviceList.FData_Index);
  end;


{TSOGRIDSSDPLikeServerSideDataModelManager}
//------------------------------------------------------------

Procedure TSOGRIDSSDPLikeServerSideDataModelManager.InternalLoadCommon;
var i : integer;
    cl : string;
    FAuditMem : Boolean;
    aTSOSSDPServerService : TSOSSDPServerService;
    aTSOSSDPServerDevice : TSOSSDPServerDevice;
    aTSOSSDPServerSideDatamodel : TSOSSDPServerSideDatamodel;
    CurrentInstanceKey : UInt32;
    aSO : TofStoredObject_UInt32Key;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
  CurrentInstanceKey := High(UInt32);
  aSO := TofStoredObject_UInt32Key(StoredObject);
  for i := Low(aSO.AllocationData.TableATI_Int) to High(aSO.AllocationData.TableATI_Int) do
  begin
    //Deleted object is ignored but still exists in the buffer : Ignore it.
    if aSO.AllocationData.TableATI_Int[i].MetaStatus = ToATIMetaStatus.omsDeleted then
      Continue;

    CurrentInstanceKey := aSO.AllocationData.TableATI_Int[i].InstanceIndex;

    if CurrentInstanceKey<>High(UInt32) then
    begin

      if Not( Assigned(aSO.LookForObject(CurrentInstanceKey)) ) then
      begin
        //Object does not exists yet : Build.

        //Create object.
        cl := aSO.DefinitionData.Classes[aSO.AllocationData.TableATI_Int[i].MetaClassIndex].ClassName;
        if cl = 'TSOSSDPServerService' then
        begin
          aTSOSSDPServerService := TSOSSDPServerService.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTSOSSDPServerService.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTSOSSDPServerService.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTSOSSDPServerService);
          end;
        end
        else
        if cl = 'TSOSSDPServerDevice' then
        begin
          aTSOSSDPServerDevice := TSOSSDPServerDevice.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTSOSSDPServerDevice.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTSOSSDPServerDevice.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTSOSSDPServerDevice);
          end;
        end
        else
        if cl = 'TSOSSDPServerSideDatamodel' then
        begin
          aTSOSSDPServerSideDatamodel := TSOSSDPServerSideDatamodel.Create(Self); //Instance is adding to RuntimeObjectList in constructor.
          if aTSOSSDPServerSideDatamodel.FObjKey <> CurrentInstanceKey then //Overriding Key given in constructor
          begin
            aTSOSSDPServerSideDatamodel.FObjKey := CurrentInstanceKey; //Overriding Key given in constructor
            aSO.ChangeGUID(CurrentInstanceKey, aTSOSSDPServerSideDatamodel);
          end;
        end
        else
        begin
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 0 then //TSOSSDPServerService
      begin
        aTSOSSDPServerService := TSOSSDPServerService(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TSOSSDPServerService class.
        begin
          aTSOSSDPServerService.FObjKeyRef.FATI := i;
          aTSOSSDPServerService.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //ServiceName
        begin
          aTSOSSDPServerService.FServiceName.FATI := i;
          aTSOSSDPServerService.FServiceName.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //ServiceType
        begin
          aTSOSSDPServerService.FServiceType.FATI := i;
          aTSOSSDPServerService.FServiceType.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 1 then //TSOSSDPServerDevice
      begin
        aTSOSSDPServerDevice := TSOSSDPServerDevice(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TSOSSDPServerDevice class.
        begin
          aTSOSSDPServerDevice.FObjKeyRef.FATI := i;
          aTSOSSDPServerDevice.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //Location
        begin
          aTSOSSDPServerDevice.FLocation.FATI := i;
          aTSOSSDPServerDevice.FLocation.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //ServerName
        begin
          aTSOSSDPServerDevice.FServerName.FATI := i;
          aTSOSSDPServerDevice.FServerName.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 3 then //ServiceList
        begin
          aTSOSSDPServerDevice.FServiceList.FATI := i;
          aTSOSSDPServerDevice.FServiceList.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 4 then //UNS
        begin
          aTSOSSDPServerDevice.FUNS.FATI := i;
          aTSOSSDPServerDevice.FUNS.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;

      if aSO.AllocationData.TableATI_Int[i].MetaClassIndex = 2 then //TSOSSDPServerSideDatamodel
      begin
        aTSOSSDPServerSideDatamodel := TSOSSDPServerSideDatamodel(aSO.BusinessObjects[CurrentInstanceKey]);

        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 0 then //ObjKeyRef from TSOSSDPServerSideDatamodel class.
        begin
          aTSOSSDPServerSideDatamodel.FObjKeyRef.FATI := i;
          aTSOSSDPServerSideDatamodel.FObjKeyRef.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 1 then //Product
        begin
          aTSOSSDPServerSideDatamodel.FProduct.FATI := i;
          aTSOSSDPServerSideDatamodel.FProduct.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 2 then //Version
        begin
          aTSOSSDPServerSideDatamodel.FVersion.FATI := i;
          aTSOSSDPServerSideDatamodel.FVersion.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        if aSO.AllocationData.TableATI_Int[i].MetaPropertyIndex = 3 then //DeviceList
        begin
          aTSOSSDPServerSideDatamodel.FDeviceList.FATI := i;
          aTSOSSDPServerSideDatamodel.FDeviceList.FData_Index := aSO.AllocationData.TableATI_Int[i].DataMemoryIndex;
        end
        else
        begin
          raise Exception.Create('MetaPropertyIndex Invalid.');
        end;
      end;


    end
    else
    begin
      Break; //End of array list in Instance = -1
    end;
  end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
  StoredObject.SetModified(False);
end;

Function TSOGRIDSSDPLikeServerSideDataModelManager.BuildObject(aObjectClass : String; Const Guid : UInt32) : TObject;
var i : Integer;
    FAuditMem : Boolean;
Begin
  FAuditMem := TofStoredObject_UInt32Key(StoredObject).AuditEnabled;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := False;
 if aObjectClass = 'TSOSSDPServerService' then
 begin
   Result := TSOSSDPServerService.Create(Self);
   if guid <> High(UInt32) then
   begin
     TSOSSDPServerService(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TSOSSDPServerDevice' then
 begin
   Result := TSOSSDPServerDevice.Create(Self);
   if guid <> High(UInt32) then
   begin
     TSOSSDPServerDevice(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
 if aObjectClass = 'TSOSSDPServerSideDatamodel' then
 begin
   Result := TSOSSDPServerSideDatamodel.Create(Self);
   if guid <> High(UInt32) then
   begin
     TSOSSDPServerSideDatamodel(Result).FObjKey := Guid;
     StoredObject.ChangeGUID(Guid, Result);
   end;
 end;
  TofStoredObject_UInt32Key(StoredObject).AuditEnabled := FAuditMem;
end;

Constructor TSOGRIDSSDPLikeServerSideDataModelManager.Create;
Begin
  StoredObject := TofStoredObject_UInt32Key.Create;
  StoredObject.StoredObjectClassManager := Self;
  RegisterClass;
end;

Procedure TSOGRIDSSDPLikeServerSideDataModelManager.PopulateObject( anObject : TObject; PropertyName, StringValue : String);
var i : integer;
    s : TStringList;
    ls : TList<String>;
Begin
if anObject Is TSOSSDPServerService then
begin
  if Lowercase(PropertyName) = 'servicename' then
  begin
    TSOSSDPServerService(anObject).ServiceName := StringValue;
  end;
  if Lowercase(PropertyName) = 'servicetype' then
  begin
    TSOSSDPServerService(anObject).ServiceType := StringValue;
  end;
end;
if anObject Is TSOSSDPServerDevice then
begin
  if Lowercase(PropertyName) = 'location' then
  begin
    TSOSSDPServerDevice(anObject).Location := StringValue;
  end;
  if Lowercase(PropertyName) = 'servername' then
  begin
    TSOSSDPServerDevice(anObject).ServerName := StringValue;
  end;
  if Lowercase(PropertyName) = 'servicelist' then
  begin
  end;
  if Lowercase(PropertyName) = 'uns' then
  begin
    TSOSSDPServerDevice(anObject).UNS := StringValue;
  end;
end;
if anObject Is TSOSSDPServerSideDatamodel then
begin
  if Lowercase(PropertyName) = 'product' then
  begin
    TSOSSDPServerSideDatamodel(anObject).Product := StringValue;
  end;
  if Lowercase(PropertyName) = 'version' then
  begin
    TSOSSDPServerSideDatamodel(anObject).Version := StringValue;
  end;
  if Lowercase(PropertyName) = 'devicelist' then
  begin
  end;
end;
end;
Procedure TSOGRIDSSDPLikeServerSideDataModelManager.PopulateObjectStream( anObject : TObject; PropertyName : String; Value : TStream);
Begin
if anObject Is TSOSSDPServerService then
begin
end;
if anObject Is TSOSSDPServerDevice then
begin
end;
if anObject Is TSOSSDPServerSideDatamodel then
begin
end;
end;

Procedure TSOGRIDSSDPLikeServerSideDataModelManager.RegisterClass;
Begin
  StoredObject.ClearAllData(True);
  StoredObject.RegisterClass('TSOSSDPServerService');
  StoredObject.RegisterProperty('TSOSSDPServerService','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TSOSSDPServerService','ServiceName',ofssString);
  StoredObject.RegisterProperty('TSOSSDPServerService','ServiceType',ofssString);
  StoredObject.RegisterClass('TSOSSDPServerDevice');
  StoredObject.RegisterProperty('TSOSSDPServerDevice','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TSOSSDPServerDevice','Location',ofssString);
  StoredObject.RegisterProperty('TSOSSDPServerDevice','ServerName',ofssString);
  StoredObject.RegisterProperty('TSOSSDPServerDevice','ServiceList',ofssObjectList);
  StoredObject.RegisterProperty('TSOSSDPServerDevice','UNS',ofssString);
  StoredObject.RegisterClass('TSOSSDPServerSideDatamodel');
  StoredObject.RegisterProperty('TSOSSDPServerSideDatamodel','ObjKeyRef',ofssString);
  StoredObject.RegisterProperty('TSOSSDPServerSideDatamodel','Product',ofssString);
  StoredObject.RegisterProperty('TSOSSDPServerSideDatamodel','Version',ofssString);
  StoredObject.RegisterProperty('TSOSSDPServerSideDatamodel','DeviceList',ofssObjectList);
end;



End.


//--------- Original UpScript
{
project name SOGRIDSSDPLikeServerSideDataModel

include classes sysutils

def forward TSOSSDPServerServiceList end
def forward TSOSSDPServerDeviceList end

define class TSOSSDPServerService
ServiceName ServiceType string
end

define class TSOSSDPServerDevice
Location ServerName String
ServiceList TSOSSDPServerServiceList
UNS string
end

define class TSOSSDPServerSideDatamodel
Product Version string
DeviceList TSOSSDPServerDeviceList
end

define classlist TSOSSDPServerServiceList of TSOSSDPServerService
define classlist TSOSSDPServerDeviceList of TSOSSDPServerDevice


}

